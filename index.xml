<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on darcy&#39;s</title>
    <link>https://darcybook.github.io/</link>
    <description>Recent content in Introduction on darcy&#39;s</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://darcybook.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Canvas 和 CanvasObject</title>
      <link>https://darcybook.github.io/docs/explore/canvas/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/explore/canvas/</guid>
      <description>Canvas 和 CanvasObject# 在 Fyne 中，Canvas是绘制应用程序的区域。每个窗口都有一个画布，您可以使用Window.Canvas()进行访问，但通常您会在Window上找到避免直接访问画布的功能。
在Fyne中可以绘制的所有内容都是一种CanvasObject。 下面这个示例通过在canvas设置原始图形元素的却别。
可以通过多种方式自定义每种类型的对象，如文本和圆圈示例所示。 就像Canvas.SetContent()改变content显示，它也会改变当前看视图。你可以将FillColour改为rectangle，你可以使用rect.Refresh()请求刷新。
package main  import ( 	&amp;#34;image/color&amp;#34; 	&amp;#34;time&amp;#34;  	&amp;#34;fyne.io/fyne/v2&amp;#34; 	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.io/fyne/v2/canvas&amp;#34; )  func main() { 	myApp := app.New() 	myWindow := myApp.NewWindow(&amp;#34;Canvas&amp;#34;) 	myCanvas := myWindow.Canvas()  	blue := color.NRGBA{R: 0, G: 0, B: 180, A: 255} 	rect := canvas.NewRectangle(blue) 	myCanvas.SetContent(rect)  	go func() { 	time.</description>
    </item>
    
    <item>
      <title>介绍</title>
      <link>https://darcybook.github.io/docs/started/introduction/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/introduction/</guid>
      <description>入门#使用Fyne工具包构建跨平台应用程序非常简单，但在开始之前确实需要安装一些工具。如果您的计算机设置为使用Go进行开发，则可能不需要以下步骤，但我们建议您阅读操作系统的提示以防万一。如果本教程中的后续步骤失败，则应重新访问以下先决条件。
事前准备#Fyne 需要 3 个基本元素，即 Go 工具（至少 1.12 版）、C 编译器（用于连接系统图形驱动程序）和系统图形驱动。说明因操作系统而异，请选择下面的相应选项卡以获取安装说明。
请注意，这些步骤只是开发所必需的 - 您的Fyne应用程序不需要为最终用户进行任何设置或依赖项安装！
windows# 从下载下载页面Go并按照说明进行操作 为Windows安装一个可用的C编译器，下面已经经过Go和Fyne测试：  MSYS2 with MingW-w64 - msys2.org TDM-GCC - tdm-gcc.tdragon.net Cygwin - cygwin.com   在 Windows 中，您的图形驱动程序已经安装，但建议确保它们是最新的。  使用 MSYS2（推荐）进行安装的步骤如下：
 从 msys2.org 安装 MSYS2 安装后，请勿使用打开的 MSYS 终端 从开始菜单打开&amp;quot;MSYS2 MinGW 64-bit&amp;quot; 执行以下命令（如果要求提供安装选项，请确保选择“全部”）：   $ pacman -Syu  $ pacman -S git mingw-w64-x86_64-toolchain  您需要将 /c/Program\Files/Go/bin 和 ~/Go/bin 添加到 PATH 中，对于 MSYS2，您可以将以下命令粘贴到终端中：   $ echo &amp;#34;export PATH=$PATH:/c/Program\ Files/Go/bin:~/Go/bin&amp;#34; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://darcybook.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction#This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://darcybook.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static#Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Box</title>
      <link>https://darcybook.github.io/docs/container/box/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/container/box/</guid>
      <description>As discussed in Container and Layouts elements within a container can be arranged using a layout. This section explores the builtin layouts and how to use them.
The most commonly used layout is layout.BoxLayout and it has two variants, horizontal and vertical. A box layout arranges all elements in a single row or column with optional spaces to assist alignment.
A horizontal box layout, created with layout.NewHBoxLayout() creates an arrangement of items in a single row.</description>
    </item>
    
    <item>
      <title>Building a Custom Layout</title>
      <link>https://darcybook.github.io/docs/extend/custom-layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/extend/custom-layout/</guid>
      <description>In a Fyne application each Container arranges it&amp;rsquo;s child elements using a simple layout algorithm. Fyne defines many layouts available in the fyne.io/fyne/v2/layout package. If you look at the code you will see that they all implement the Layout interface.
type Layout interface { 	Layout([]CanvasObject, Size) 	MinSize(objects []CanvasObject) Size } Any application can provide a custom layout to arrange widgets in a non-standard manner. To do this you need to implement the interface above in your own code.</description>
    </item>
    
    <item>
      <title>Data Binding</title>
      <link>https://darcybook.github.io/docs/binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/binding/</guid>
      <description>Data binding is a powerful new addition to the Fyne toolkit that was introduced in version v2.0.0. By using data binding we can avoid manually managing many standard objects like Labels, Buttons and Lists.
The builtin bindings support many primitive types (like Int, String, Float etc), lists (such as StringList, BoolList) as well as Map and Struct bindings. Each of these types can be created using a simple constructor function. For example to create a new string binding with a zero value you can use binding.</description>
    </item>
    
    <item>
      <title>Geometry</title>
      <link>https://darcybook.github.io/docs/architecture/geometry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/architecture/geometry/</guid>
      <description>Fyne apps are based on 1 canvas per window. Each canvas has a root CanvasObject which can be a single widget or a Container for many sub-objects whose size and position are controlled by a Layout.
Position# Each canvas has its origin at the top left (0, 0) every element of the UI may be scaled depending on the output device and so the API does not describe pixels or exact measurements.</description>
    </item>
    
    <item>
      <title>Label</title>
      <link>https://darcybook.github.io/docs/widget/label/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/widget/label/</guid>
      <description>Widgets are the main components of a Fyne application GUI, they can be used in any place that a basic fyne.CanvasObject can. They manage user interactions and will always match the current theme.
The Label widget is the simplest of them - it presents text to the user. Unlike canvas.Text it can handle some simple formatting (such as \n) and wrapping (by setting the Wrapping field). You can create a label by calling widget.</description>
    </item>
    
    <item>
      <title>Layout and Widget Size</title>
      <link>https://darcybook.github.io/docs/faq/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/faq/layout/</guid>
      <description>Intro
Move and Resize#Q: How can I move my widget to a different position or resize it?
A: The position and size of elements in a Fyne app are controlled by the layout of the container that they are within. If the elements of your UI are too small consider using a different layout or container.
A new Window will expand whatever element is passed to SetContent() to fill it&amp;rsquo;s size.</description>
    </item>
    
    <item>
      <title>Rectangle</title>
      <link>https://darcybook.github.io/docs/canvas/rectangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/canvas/rectangle/</guid>
      <description>canvas.Rectangle is the simplest canvas object in Fyne. It displays a block of the specified colour. You can also set the colour using the FillColor field.
In this example the rectangle fills the window as it is the only content element.
package main  import ( 	&amp;#34;image/color&amp;#34;  	&amp;#34;fyne.io/fyne/v2&amp;#34; 	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.io/fyne/v2/canvas&amp;#34; )  func main() { 	myApp := app.New() 	w := myApp.NewWindow(&amp;#34;Rectangle&amp;#34;)  	rect := canvas.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://darcybook.github.io/docs/started/helloword/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/helloword/</guid>
      <description>开始你的第一个app# 完成入门文档中的步骤后，即可开始构建您的第一个应用。为了说明这个过程，我们将构建一个简单的 hello world 应用程序。
用app.New()建立一个简单的app，然后用app.NewWindow()打开一个窗口。用SetContent()将控件数添加到窗口上。最后利用ShowAndRun()运行你的app UI就会显示了
package main  import ( 	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.io/fyne/v2/widget&amp;#34; )  func main() { 	a := app.New() 	w := a.NewWindow(&amp;#34;Hello World&amp;#34;)  	w.SetContent(widget.NewLabel(&amp;#34;Hello World!&amp;#34;)) 	w.ShowAndRun() } ShowAndRun()可以使用该命令生成上述代码，然后通过运行go build .该命令或双击图标来执行该代码。您也可以绕过编译步骤，直接使用go run .运行代码。
这两种方法都会显示一个窗口，如下所示：
如果您更喜欢浅色主题，那么只需设置环境变量FYNE_THEME=light，您将获得：
这就是入门的全部内容。要了解更多信息，您可以阅读完整的API文档。</description>
    </item>
    
    <item>
      <title>容器和布局</title>
      <link>https://darcybook.github.io/docs/explore/container/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/explore/container/</guid>
      <description>容器和布局# 在前面的示例中，我们看到了如何将CanvasObject设置为Canvas的内容，但通常我们不仅需要显示一个视图。要显示多个项目，我们使用类型Container（容器）。
由于fyne.Container也是一个fyne.CanvasObject，我们可以将其设置为fyne.Canvas的content。 在此示例中，我们创建 3 个文本对象，然后使用该函数将它们放在Container中。由于没有布局，我们可以像您看到text2.Move()的那样移动元素。
package main  import ( 	&amp;#34;image/color&amp;#34;  	&amp;#34;fyne.io/fyne/v2&amp;#34; 	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.io/fyne/v2/canvas&amp;#34; 	&amp;#34;fyne.io/fyne/v2/container&amp;#34; 	//&amp;#34;fyne.io/fyne/v2/layout&amp;#34; )  func main() { 	myApp := app.New() 	myWindow := myApp.NewWindow(&amp;#34;Container&amp;#34;) 	green := color.NRGBA{R: 0, G: 180, B: 0, A: 255}  	text1 := canvas.NewText(&amp;#34;Hello&amp;#34;, green) 	text2 := canvas.NewText(&amp;#34;There&amp;#34;, green) 	text2.Move(fyne.NewPos(20, 20)) 	content := container.NewWithoutLayout(text1, text2) 	// content := container.</description>
    </item>
    
    <item>
      <title>Binding Simple Widgets</title>
      <link>https://darcybook.github.io/docs/binding/simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/binding/simple/</guid>
      <description>The simplest form of binding a widget is to pass it a bound item as a value instead of a static value. Many widgets provide a WithData constructor that will accept a typed data binding item. To set up the binding all you need to do is pass the right type in.
Although this may not look like much of a benefit in the initial code you can then see how it ensures that the displayed content is always up to date with the source of the data.</description>
    </item>
    
    <item>
      <title>Button</title>
      <link>https://darcybook.github.io/docs/widget/button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/widget/button/</guid>
      <description>The button widget can contain text, an icon or both, the constructor functions are widget.NewButton() and widget.NewButtonWithIcon(). To create a text button there are just 2 parameters, the string content and a 0 parameter func() that will be called when the button is tapped. See the example for how that can be created.
The button constructor with an icon includes an additional parameter which is the fyne.Resource which contains the icon data.</description>
    </item>
    
    <item>
      <title>Grid</title>
      <link>https://darcybook.github.io/docs/container/grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/container/grid/</guid>
      <description>The grid layout lays out the elements of a container in a grid pattern with a fixed number of columns. Items will fill a single row until the number of columns is met, after this a new row will be created. Vertical space will be split equally between each of the rows of objects.
You create a grid layout using layout.NewGridLayout(cols) where cols is the number of items (columns) you wish to have in each row.</description>
    </item>
    
    <item>
      <title>Scaling</title>
      <link>https://darcybook.github.io/docs/architecture/scaling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/architecture/scaling/</guid>
      <description>Fyne is built entirely using vector graphics, which means applications written with Fyne will scale to any size beautifully (not just whole number increments). This is a great benefit to the rising popularity of high density displays on mobile devices and high-end computers. The default scale value is calculated to match your operating system - on some systems this is user configuration and on others from your screen&amp;rsquo;s pixel density (DPI - dots per inch).</description>
    </item>
    
    <item>
      <title>Text</title>
      <link>https://darcybook.github.io/docs/canvas/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/canvas/text/</guid>
      <description>canvas.Text is used for all text rendering within Fyne. It is created by specifying the text and colour for the text. Text is rendered using the default font, specified by the current theme.
The text object allows certain configuration like the Alignment and TextStyle field. as illustrated in the example here. To use a monospaced font instead you can specify fyne.TextStyle{Monospace: true}.
package main  import ( 	&amp;#34;image/color&amp;#34;  	&amp;#34;fyne.</description>
    </item>
    
    <item>
      <title>Theme and Customisation</title>
      <link>https://darcybook.github.io/docs/faq/theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/faq/theme/</guid>
      <description>In this page we answer some common questions about the design of Fyne themes and widgets.
Customisation#Q: How can I change the colour of text for a Label widget?
A: All of the standard widgets use the current Theme definition to set the colour, font and sizes. To make changes to your application consider using a custom theme.
If your application requires text that is a different colour you can use the canvas.</description>
    </item>
    
    <item>
      <title>应用程序与循环运行</title>
      <link>https://darcybook.github.io/docs/started/apprun/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/apprun/</guid>
      <description>应用程序与循环运行# 要使 GUI 应用程序正常工作，它需要运行一个事件循环（有时称为 runloop）来处理用户交互和绘制事件。在 Fyne 中，这是使用App.Run()或 Window.ShowAndRun()函数启动的。这两个命令只能再你的设置代码main()函数中调用。 一个应用只能由一个事件循环，所以你的代码中只能调用一次Run()，调用第二次会导致错误。
package main  import ( 	&amp;#34;fmt&amp;#34;  	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.io/fyne/v2/widget&amp;#34; )  func main() { 	myApp := app.New() 	myWindow := myApp.NewWindow(&amp;#34;Hello&amp;#34;) 	myWindow.SetContent(widget.NewLabel(&amp;#34;Hello&amp;#34;))  	myWindow.Show() 	myApp.Run() 	tidyUp() }  func tidyUp() { 	fmt.Println(&amp;#34;Exited&amp;#34;) } 对于桌面运行时，可以通过调用直接退出应用（移动应用不支持此功能） - 通常开发人员代码中不需要写。关闭所有窗口后，应用程序也将退出。 所以说Run()之后执行的安徽念书,再应用退出前不会调用。</description>
    </item>
    
    <item>
      <title>组件清单</title>
      <link>https://darcybook.github.io/docs/explore/widgets/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/explore/widgets/</guid>
      <description>组件清单# 标准组件 (widget包中)# Accordion#可折叠控件（Accordion）显示项目列表，每个项目都由一个按钮表示，点击该按钮时会显示详细视图。
Button#按钮空间由有一个文本和图标，两者都是可选的。
Card#卡片控件是标题副标题的合计，都是可选的。
Check#单选框 有一个文本和单选（未选中）按钮。
Entry#输入框空间触发时允许录入简单文本。
密码输入框隐藏输入内容，还有一个控制它显示的按钮。
FileIcon#文件图标未不同文件提供标准图标。 将文件显示未不同的图标，并显示文件的扩展名。
Form#表单是两列网格，其中每行都有一个标签和一个小部件（通常是输入）。网格的最后一行将包含相应的窗体控件按钮（如果有）。
Hyperlink#超链接构件是具有适当填充和布局的文本组件。单击后，URL 将在默认 Web 浏览器中打开。
Icon#图标小部件是一个基本的图像组件，可加载其资源以匹配主题。
Label#标签是具有适当填充和布局的标签组件。
Progress bar#进度条提供一个横条，显示进度。</description>
    </item>
    
    <item>
      <title>Bundling resources</title>
      <link>https://darcybook.github.io/docs/extend/bundle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/extend/bundle/</guid>
      <description>Go based applications are usually built as a single binary executable, and this is the same for Fyne applications. A single file makes it easier to distribute install our software. Unfortunately GUI applications typically require additional resources to render the user interface. To manage this challenge a Go application can bundle assets into the binary itself. The Fyne toolkit prefers the use of &amp;ldquo;fyne bundle&amp;rdquo; as it has various benefits that we will explore below.</description>
    </item>
    
    <item>
      <title>Entry</title>
      <link>https://darcybook.github.io/docs/widget/entry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/widget/entry/</guid>
      <description>The entry widget is used for user input of simple text content. An entry can be created with a simple widget.NewEntry() constructing function. When you create the widget keep a reference so that you can access its Text field later. It is also possible to use the OnChanged callback function to be notified every time the content changes.
Entry widgets can also have validation for verifying the text input typed into it.</description>
    </item>
    
    <item>
      <title>Grid Wrap</title>
      <link>https://darcybook.github.io/docs/container/gridwrap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/container/gridwrap/</guid>
      <description>Like the previous grid layout, the grid wrap layout creates an arrangement of elements in a grid pattern. However this grid does not have a set number of columns, instead it uses a fixed size for each cell and then flows the content to as many rows as is needed to display the items.
You create a grid wrap layout using layout.NewGridWrapLayout(size) where size specifies the size to apply to all child elements.</description>
    </item>
    
    <item>
      <title>Line</title>
      <link>https://darcybook.github.io/docs/canvas/line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/canvas/line/</guid>
      <description>The canvas.Line object draws a line from the Position1 (default is top, left) to Position2 (default is bottom, right). You specify its colour and can vary the stroke width which otherwise defaults to 1.
A line position can be manipulated using the Position1 or Position2 fields or by using the Move() and Resize() functions. For example a 0 width area will show a vertical line whereas 0 height would be horizontal.</description>
    </item>
    
    <item>
      <title>Two-Way Binding</title>
      <link>https://darcybook.github.io/docs/binding/twoway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/binding/twoway/</guid>
      <description>So far we have looked at data binding as a way of keeping our user interface elements up to date. Far more common, however, is the need to update values from the UI widgets and keep the data up to date everywhere. Thankfully the bindings provided in Fyne are &amp;ldquo;two-way&amp;rdquo; which means that values can be pushed into them as well as read out. The change in data will be communicated to all connected code without any additional code.</description>
    </item>
    
    <item>
      <title>Widgets</title>
      <link>https://darcybook.github.io/docs/architecture/widgets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/architecture/widgets/</guid>
      <description>Widgets in the Fyne toolkit are designed for a clean and pleasant user interaction, following a standard theme and supporting rapid app development, solid testing and easy maintenance. There are various design considerations that promote that ambition, we explore them in this page.
Behaviour API# One thing that you will notice about the standard widgets is that the API is all about behaviour and state - but very little that controls the actual look of an element.</description>
    </item>
    
    <item>
      <title>布局清单</title>
      <link>https://darcybook.github.io/docs/explore/layouts/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/explore/layouts/</guid>
      <description>布局清单# 标准布局# Horizontal Box (HBox)#HBox在水平行排列子元素。 每个子元素有相同的高（容器中最高的元素）并保持最小宽度左对齐。
Vertical Box (VBox)#VBox在垂直列排列子元素。 每个子元素有相同的宽（容器中最宽的元素）并保持最小高度，顶对齐。
Center#居中布局将所有元素放在容器中心。 每个对象设置为最小尺寸。
Form#表单布局按对进行布局，第一列宽度最小。 对在表单中标签很有用，标签位于第一列，其它对象位于第二列。 此布局需要每次添加偶数个元素。
Grid#网格布局在可用空间内平局排列元素。 元素水平排放，直到达到指定的列数后自动换行。 所有对象都有相同的尺寸，宽度为宽/列数，高度为高/所需行数。上述计算需要减去padding。
GridWrap#网格环绕布局横向排列元素，如果空间不足，就换行。 所有对象都将设置为相同尺寸。 此布局可能不遵循MinSize来管理此统一布局。通常用于文件管理器或图像缩略图列表。
Border#边框布局支持将元素定位在可用空间外部。
Max#最大布局将所有容器元素填充可用空间。 所有对象都是全尺寸的，并按照添加顺序绘制（最后一个在顶部）。
Padded#填充布局定位所有容器元素类似最大布局，但在外部哟一个padding填充。
Combining Layouts#通过使用不同布局可以构建更为复杂的布局结构。 每个容器可以拥有不同的布局，且每一个可以嵌套不同的标准布局。 例如，一个水平HBox作为header，一个垂直VBox作为左侧边栏面板，一个网格布局作为内容域 &amp;ndash; 所有容器都使用边框布局。如下图所示的结果：</description>
    </item>
    
    <item>
      <title>更新 content</title>
      <link>https://darcybook.github.io/docs/started/updating/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/updating/</guid>
      <description>更新 content# 完成hello world教程或其他示例后，您将创建一个基本的用户界面。在此页面中，我们将了解如何从代码中更新 GUI 的content。
第一步是将要更新的小部件分配给变量。在 hello world 教程中，我们直接传入 widget.NewLabel 到 SetContent()，为了更新它，我们将其更改为两行不同的行，例如：
	clock := widget.NewLabel(&amp;#34;&amp;#34;) 	w.SetContent(clock) 只要content被分配给变量，我们就可以调用类似SetText(&amp;quot;new text&amp;quot;)。对于我们的示例，我们将在Time.Format的帮助下将标签的content设置为当前时间。
	formatted := time.Now().Format(&amp;#34;Time: 03:04:05&amp;#34;) 	clock.SetText(formatted) 这就是我们需要去改变可见元素的content的全部操作（有关完整代码，请参见下文）。 但是,我们可以更进一步的定期更新content。
后台背景执行#大多数应用程序都需要具有在后台运行的进程，例如下载数据或响应事件。为了模拟这一点，我们将扩展上面的代码以每秒运行一次。
与大多数go代码一样，我们可以创建一个goroutine（使用go关键字）并在那里运行我们的代码。如果我们将文本更新代码移动到新函数，则可以在初始显示和计时器上调用它以进行定期更新。通过将 goroutine 和内部time.Tick 循环组合在一起，我们可以每秒更新一次label。
	go func() { 	for range time.Tick(time.Second) { 	updateTime(clock) 	} 	}() 注意,将此代码放在ShowAndRun 或 Run调用之前，因为它们在应用程序关闭之前不会return。最终运行结果，代码将每秒运行并更新用户界面，从而创建一个基本的时钟小部件。完整代码如下：
package main  import ( 	&amp;#34;time&amp;#34;  	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.</description>
    </item>
    
    <item>
      <title>Border</title>
      <link>https://darcybook.github.io/docs/container/border/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/container/border/</guid>
      <description>The border layout is possibly the most widely used to construct user interfaces as it allows the positioning of items around a central element which will expand to fill the space. To create a border layout you need to pass the fyne.CanvasObjects that should be positioned in a border position to the layout (as well as the container as usual). This syntax is a little different to the other layouts but is basically just layout.</description>
    </item>
    
    <item>
      <title>Choices</title>
      <link>https://darcybook.github.io/docs/widget/choices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/widget/choices/</guid>
      <description>There are various widgets available to present the user with a choice, these include a checkbox, radio group and select popup.
The widget.Check provides a simple yes/no choice and is created using a string label. Each of these widgets also takes a &amp;ldquo;changed&amp;rdquo; func(...) where the parameter is of the appropriate type. widget.NewCheck(..) therefore takes a string parameter for the label and a func(bool) param for the change handler. You can also use the Checked field to get the boolean value.</description>
    </item>
    
    <item>
      <title>Circle</title>
      <link>https://darcybook.github.io/docs/canvas/circle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/canvas/circle/</guid>
      <description>canvas.Circle defines a circle shape filled by the specified colour. You may also set a StrokeWidth and therefore a different StrokeColor as shown in this example.
The circle will fill the space specified by calling Resize() or by the layout it is controlled by. As the example sets the circle as the window content it will resize to fill the window, within a basic padding (controlled by the theme).
package main  import ( 	&amp;#34;image/color&amp;#34;  	&amp;#34;fyne.</description>
    </item>
    
    <item>
      <title>Creating a Custom Theme</title>
      <link>https://darcybook.github.io/docs/extend/custom-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/extend/custom-theme/</guid>
      <description>Applications are able to load custom themes that can apply small changes to the standard theme or provide a completely unique look. A theme will need to implement the functions of fyne.Theme interface, which is defined as follows:
type Theme interface { 	Color(ThemeColorName, ThemeVariant) color.Color 	Font(TextStyle) Resource 	Icon(ThemeIconName) Resource 	Size(ThemeSizeName) float32 } To apply our theme changes we will first define a new type that that implements this interface.</description>
    </item>
    
    <item>
      <title>Data Conversion</title>
      <link>https://darcybook.github.io/docs/binding/conversion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/binding/conversion/</guid>
      <description>So far we have used data binding where the type of data matches the output type (for example String and Label or Entry). Often it will be desirable to present data that is not already in the correct format. To do this the binding package provides a number of helpful conversion functions.
Most commonly this will be used to convert different types of data into strings for displaying in Label or Entry widgets.</description>
    </item>
    
    <item>
      <title>Organisation and Packages</title>
      <link>https://darcybook.github.io/docs/architecture/organisation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/architecture/organisation/</guid>
      <description>The Fyne project is split into many packages, each providing different types of functionality. They are as follows:
 fyne.io/fyne/v2 This import provides the basic definitions common to all Fyne code including data types and interfaces. fyne.io/fyne/v2/app The app package provides the APIs that start a new application. Normally you only require app.New() or app.NewWithID(). fyne.io/fyne/v2/canvas The canvas package provides all of the drawing APIs within Fyne. The complete Fyne toolkit is made up of these primitive graphical types.</description>
    </item>
    
    <item>
      <title>对话框</title>
      <link>https://darcybook.github.io/docs/explore/dialogs/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/explore/dialogs/</guid>
      <description>对话框# 标准对话框# Color#允许用户从标准集中选择颜色（或在高级模式下选择任何颜色）。
Confirm#要求去确认一个动作。
FileOpen#用户在应用内询问选择一个文件。 实际的对话框显示，根据当前的操作系统有所不同。
Form#对话框中可以输入不容的元素，进行验证。
Information#一个向用户展示消息的简单途径。
Custom#展示可以放在对话容器中的所有内容。
</description>
    </item>
    
    <item>
      <title>窗口处理</title>
      <link>https://darcybook.github.io/docs/started/windows/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/windows/</guid>
      <description>窗口处理# Windows 是使用App.NewWindow()函数创建的，需要使用Show()函数进行显示。fyne.Window上ShowAndRun()的协助你同时显示并运行你的应用。
默认情况下，在通过MinSize()函数，窗口大小是正好可以显示content。
窗口的尺寸将是正确的，可以通过检查函数来显示其内容（后面的示例可以了解更多）。通过Window.Resize()可以设置一个更大的尺寸。函数需要传递具有长宽属性（基于设备无关像素，它在不同设备上将是相同的）的fyne.Size，例如默认情况下，要使用正方形，我们可以：
	w.Resize(fyne.NewSize(100, 100)) 要注意的是，桌面环境可能会显示窗口导致比实际的小。移动设备通常会忽略这一点，一般以全屏显示。
如果你向显示第二个窗口，你只需调用Show()。如果你的应用程序启动时，要打开多个窗口，那么将Window.Show() 和App.Run()分开是个不错的选择。下面的例子，介绍了怎么运行时打开两个窗口：
package main  import ( 	&amp;#34;fyne.io/fyne/v2&amp;#34; 	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.io/fyne/v2/widget&amp;#34; )  func main() { 	a := app.New() 	w := a.NewWindow(&amp;#34;Hello World&amp;#34;)  	w.SetContent(widget.NewLabel(&amp;#34;Hello World!&amp;#34;)) 	w.Show()  	w2 := a.NewWindow(&amp;#34;Larger&amp;#34;) 	w2.SetContent(widget.NewLabel(&amp;#34;More content&amp;#34;)) 	w2.Resize(fyne.NewSize(100, 100)) 	w2.Show()  	a.Run() } 上述应用程序将在两个窗口都关闭时退出。 如果你向将应用设为一个主窗口，一个是附属窗口，你可以将主窗口设置master，这样主窗口关闭时，其它窗口也会关闭。在Window上调用SetMaster()，可以完成设置。
Windows可以随时创建，我们可以修改上面的代码，新增一个窗口（w2），点击一个按钮可以打开新窗口。你可以从更复杂的工作流中加载窗口，但要注意新窗口通常显示在当前活动content的上方。
	w2.SetContent(widget.NewButton(&amp;#34;Open new&amp;#34;, func() { 	w3 := a.</description>
    </item>
    
    <item>
      <title>Form</title>
      <link>https://darcybook.github.io/docs/container/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/container/form/</guid>
      <description>The layout.FormLayout is like a 2 column grid layout but tweaked to lay out forms in an application. The height of each item will be the larger of the two minimum heights in each row. The width of the left item will be the largest minimum width of all items in the first column whilst the second item in each row will expand to fill the space.
This layout is more typically used within the widget.</description>
    </item>
    
    <item>
      <title>Form</title>
      <link>https://darcybook.github.io/docs/widget/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/widget/form/</guid>
      <description>The form widget is used to lay out many input fields with labels and optional cancel and submit buttons. In its most bare form it aligns labels to the left of each input widget. By setting OnCancel or OnSubmit the form will add a button bar with the specified handlers called when appropriate.
The widget can be created with widget.NewForm(...) passing a list of widget.FormItems, or by using the &amp;amp;widget.Form{} syntax illustrated in the example.</description>
    </item>
    
    <item>
      <title>Image</title>
      <link>https://darcybook.github.io/docs/canvas/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/canvas/image/</guid>
      <description>A canvas.Image represents a scalable image resource in Fyne. It can be loaded from a resource (as shown in the example), from an image file, from a URI location containing an image, from an io.Reader, or from a Go image.Image in memory.
The default image fill mode is canvas.ImageFillStretch which will cause it to fill the space specified (through Resize() or layout). Alternatively you could use canvas.ImageFillContain to ensure that the aspect ratio is maintained and the image is within the bounds.</description>
    </item>
    
    <item>
      <title>List Data</title>
      <link>https://darcybook.github.io/docs/binding/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/binding/list/</guid>
      <description>To demonstrate how more complex types can be connected we will look at the List widget and how data binding can make it easier to use. Firstly we create a StringList data binding, which is a list of String data type. Once we have a data of list type we can connect this to the standard List widget. To do so we use the widget.NewListWithData constructor, much like other widgets.</description>
    </item>
    
    <item>
      <title>Writing a Custom Widget</title>
      <link>https://darcybook.github.io/docs/extend/custom-widget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/extend/custom-widget/</guid>
      <description>The standard widgets included with Fyne are designed to support standard user interactions and requirements. As a GUI often has to provide custom functionality it may be necessary to write a custom widget. This article outlines how.
A widget is split into two areas - each implementing a standard interface - the fyne.Widget and the fyne.WidgetRenderer. The widget defines behaviour and state, with the renderer being used to define how it should be drawn to screen.</description>
    </item>
    
    <item>
      <title>单元测试</title>
      <link>https://darcybook.github.io/docs/started/testing/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/testing/</guid>
      <description>测试图形应用# 一个好的测试组件应该时能快速写测试单元并定期运行。 Fyne 的 API非常容易写测试。将组件逻辑和渲染逻辑分离，我们可以加载程序的时候不用显示它们来进行测试功能。
示例#我们可以通过扩展我们的Hello World应用程序来演示单元测试，增加让用户输入他们姓名的控件。 我们用Label录入姓名，一个Entry来显示欢迎词。我们用container.NewVBox将一个显示在另一个上面。 更新的用户界面如下：
func makeUI() (*widget.Label, *widget.Entry) { 	return widget.NewLabel(&amp;#34;Hello world!&amp;#34;), 	widget.NewEntry() }  func main() { 	a := app.New() 	w := a.NewWindow(&amp;#34;Hello Person&amp;#34;)  	w.SetContent(container.NewVBox(makeUI())) 	w.ShowAndRun() } 为了测试此输入动作，我们创建一个包含TestGreeter测试函数的的新文件（名称结尾需要是_test.go，才会识别位测试文件）。
package main  import (  &amp;#34;testing&amp;#34; )  func TestGreeting(t *testing.T) { } 我们可以添加一个验证初始状态的初始测试，为此，我们断言Label的Text返回的字段，如果测试不正确，则抛出一个错误。将以下代码添加到测试方法中：
	out, in := makeUI()  	if out.</description>
    </item>
    
    <item>
      <title>快捷键</title>
      <link>https://darcybook.github.io/docs/explore/shortcuts/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/explore/shortcuts/</guid>
      <description>快捷键# 在应用上增加快捷键# 快捷键是利用组合键触发的常见任务。 快捷键和键盘事件非常相似，可以附加到一个触发的元素或者注册到Canvas使它在Window一直有效。
通过Canvas注册#有需要标准的快捷键和鼠标右键菜单已经定义了（例如fyne.ShortcutCopy）。 添加Shortcut的第一步就是定义一个shortcut。大多数用途是作为桌面扩展的快捷键。 我们用desktop.CustomShortcut去实现，比如用Tab键和Control你可以参照下面这样做：
	ctrlTab := desktop.CustomShortcut{KeyName: fyne.KeyTab, Modifier: desktop.ControlModifier} 要注意的是快捷键是可以重复使用的，这样你就可以将它增加到其它元素或菜单上。 比如说我们想要它一直有效，我们可以这样在Canvas上注册。
	ctrlTab := desktop.CustomShortcut{KeyName: fyne.KeyTab, Modifier: desktop.ControlModifier} 	w.Canvas().AddShortcut(&amp;amp;ctrlTab, func(shortcut fyne.Shortcut) { 	log.Println(&amp;#34;We tapped Ctrl+Tab&amp;#34;) 	}) 如你所见，这种方式注册快捷键有两个步骤 &amp;ndash; 快捷键定义和一个回调函数。 如果用户用户按下了快捷键，函数就会调用，并输出打印内容。
输入框增加快捷键#只有当前元素获得焦点时才触发快捷键也是很有用的。 任何可以聚焦的空间都可以使用，添加一个TypedShortcut扩展来管理快捷键。 和增加一个键盘时间很像，除了它的参数是一个fyne.Shortcut。
type myEntry struct { 	widget.Entry }  func (m *myEntry) TypedShortcut(s fyne.Shortcut) { 	if _, ok := s.</description>
    </item>
    
    <item>
      <title>Center</title>
      <link>https://darcybook.github.io/docs/container/center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/container/center/</guid>
      <description>layout.CenterLayout organises all items in its container to be centered in the available space. The objects will be drawn in the order they are passed to the container, with the last being drawn top-most.
package main  import ( 	&amp;#34;image/color&amp;#34;  	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.io/fyne/v2/canvas&amp;#34; 	&amp;#34;fyne.io/fyne/v2/container&amp;#34; 	&amp;#34;fyne.io/fyne/v2/layout&amp;#34; 	&amp;#34;fyne.io/fyne/v2/theme&amp;#34; )  func main() { 	myApp := app.New() 	myWindow := myApp.NewWindow(&amp;#34;Center Layout&amp;#34;)  	img := canvas.</description>
    </item>
    
    <item>
      <title>Numerical Entry</title>
      <link>https://darcybook.github.io/docs/extend/numerical-entry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/extend/numerical-entry/</guid>
      <description>In the traditional sense, GUI programs have used callbacks to customize actions for widgets. Fyne does not expose inserting custom callbacks to capture events on widgets, but it does not need to. The Go language is plenty extensible to make this work.
Instead we can simply use Type Embedding and extend the widget to only make it possible to enter numerical values.
First create a new type struct, we will call it numericalEntry.</description>
    </item>
    
    <item>
      <title>ProgressBar</title>
      <link>https://darcybook.github.io/docs/widget/progressbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/widget/progressbar/</guid>
      <description>The progress bar widget has two forms, the standard progress bar shows the user which Value has been reached, from Min to Max. The default min is 0.0 and the max defaults to 1.0. To use the default values just call widget.NewProgressBar(). After creating you can set the Value field.
To set up a custom range you can set Min and Max fields manually. The label will always show the percentage completion.</description>
    </item>
    
    <item>
      <title>Raster</title>
      <link>https://darcybook.github.io/docs/canvas/raster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/canvas/raster/</guid>
      <description>The canvas.Raster is like an image but draws exactly one spot for each pixel on the screen. This means that as a user interface scales or the image resizes more pixels will be requested to fill the space. To do this we use a Generator function as illustrated in this example - it will be used to return the colour of each pixel.
The generator functions can be pixel based (as in this example where we generate a new random colour for each pixel) or based on full images.</description>
    </item>
    
    <item>
      <title>打包</title>
      <link>https://darcybook.github.io/docs/started/packaging/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/packaging/</guid>
      <description>打包# 桌面程序打包# 打包图形应用程序以进行分发可能很复杂。图形应用程序通常具有与其关联的图标和元数据，以及与每个环境集成所需的特定格式。Windows可执行文件需要嵌入式图标，macOS应用程序是捆绑包，Linux应该安装各种元数据文件。真是麻烦！
值得庆幸的是，fyne应用程序具有可以自动处理此情况的package命令。只需指定目标操作系统和任何所需的元数据（如 icon）即可生成相应的程序包。图标转换将自动完成.icns或.ico因此只需提供.png文件 :) 即可。您所需要的只是已经为目标平台构建了应用程序&amp;hellip;
go install fyne.io/fyne/v2/cmd/fyne@latest fyne package -os darwin -icon myapp.png 如果您使用的是较旧版本的 Go （&amp;lt;1.16），则应使用go get命令安装
go get fyne.io/fyne/v2/cmd/fyne fyne package -os darwin -icon myapp.png 将创建 myapp.app，这是一个完整的捆绑包结构，用于分发给macOS用户。然后，您也可以构建Linux和Windows版本&amp;hellip;
fyne package -os linux -icon myapp.pngfyne package -os windows -icon myapp.png 这些命令将创建：
 myapp.tar.gz包含一个从 usr/local/ 开始的文件夹结构，Linux 用户可以扩展到其系统的根目录。 myapp.exe（在第二次生成之后，这是 windows 包所必需的）将嵌入图标和应用元数据。  如果您只想在自己的计算机上安装桌面应用程序，则可以使用有用的安装子命令。例如，要在系统范围内安装当前应用程序，您只需执行以下操作：
fyne install -icon myapp.png 所有这些命令还支持Icon.png的默认图标文件，以便您可以避免为每次执行键入参数。从Fyne 2.1开始，还有一个元数据文件文件，您可以在其中为项目设置默认选项。
当然，如果您愿意，您仍然可以使用标准的Go工具运行应用程序。</description>
    </item>
    
    <item>
      <title>首选项API</title>
      <link>https://darcybook.github.io/docs/explore/preferences/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/explore/preferences/</guid>
      <description>首选项API# 使用首选项API# 保存用户的配置是开发人员的常见任务，跨平台实现时非常复杂耗时。 为了简化这个工作，Fyne使用一个API可以简单易懂的方式在文件系统上保存值，同时接管比较复杂的部分。
让我们从API设置开始。 它时首选项界面的一部分，首选项是用来保存和加载以后的不同类型的值，值包括bool、浮点、整型和字符串。 它们每个都有三个不同函数：加载、带有回退值的加载和一个保存值。 下面可以看到字符串类型的三个函数和它使用示例：
// String looks up a string value for the key String(key string) string // StringWithFallback looks up a string value and returns the given fallback if not found StringWithFallback(key, fallback string) string // SetString saves a string value for the given key SetString(key string, value string) 创建应用变量和调用Preferences()可以访问这些函数。 注意有必要使用唯一ID（类似一个颠倒的url com.baidu.www）建立应用。 要使用app.NewWithID()来使用创建应用，以便申请应用存储位置。
a := app.NewWithID(&amp;#34;com.example.tutorial.preferences&amp;#34;) [...] a.Preferences().SetBool(&amp;#34;Boolean&amp;#34;, true) number := a.</description>
    </item>
    
    <item>
      <title>Animation</title>
      <link>https://darcybook.github.io/docs/canvas/animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/canvas/animation/</guid>
      <description>Fyne includes an animation framework that allows you to smoothly transition canvas properties from one value to another over time. An animation can contain any code which means that any types of object attributes can be managed, however there are builtin animations for size, position and color.
Animations are normally created using the builtin helpers of the canvas package, such as NewSizeAnimation, and calling Start() on the created animation. You can set animations to repeat or auto reverse, as we will see below.</description>
    </item>
    
    <item>
      <title>Gradient</title>
      <link>https://darcybook.github.io/docs/canvas/gradient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/canvas/gradient/</guid>
      <description>The last canvas primitive type is Gradient, available as canvas.LinearGradient and canvas.RadialGradient which is used to draw a gradient from one colour to another in various patterns. You can create gradients using NewHorizontalGradient(), NewVerticalGradient() or NewRadialGradient().
To create a gradient you need a start and end colour - every colour in between is calculated by the canvas. In this example we use color.Transparent to show how a gradient (or any other type) could use an alpha value to be semi-transparent over the content behind.</description>
    </item>
    
    <item>
      <title>Max</title>
      <link>https://darcybook.github.io/docs/container/max/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/container/max/</guid>
      <description>The layout.MaxLayout is the simplest layout, it sets all items in the container to be the same size as the container. This is not often useful in general containers but can be suitable when composing widgets.
The max layout will expand the container to be at least the size of the largest item&amp;rsquo;s minimum size. The objects will be drawn in the order the are passed to the container, with the last being drawn top-most.</description>
    </item>
    
    <item>
      <title>Toolbar</title>
      <link>https://darcybook.github.io/docs/widget/toolbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/widget/toolbar/</guid>
      <description>The toolbar widget creates a row of action buttons using icons to represent each. The widget.NewToolbar(...) constructor function takes a list of widget.ToolbarItem parameters. The builtin types of toolbar items are action, separator and spacer.
The most used item is an action that is created using the widget.NewToolbarItemAction(..) function. An action takes two parameters, first being the icon resource to draw and the latter is the func() to call when tapped.</description>
    </item>
    
    <item>
      <title>数据绑定</title>
      <link>https://darcybook.github.io/docs/explore/binding/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/explore/binding/</guid>
      <description>数据绑定# 数据绑定在Fyne v2.0.0中引入，这可以使组件和数据源更好的关联起来。 data/binding 包有许多有用的绑定，可以用来管理应用中用到的几乎所有标准类型。 数据绑定可以通过绑定API管理（例如NewString），也可以关联到外部的数据元素（BindInt(*int)）。
支持绑定的组件通常有一个...WithData构造函数，在创建组件时可以设置绑定的数据。 当然你还可以调用Bind()或者Unbind()来管理组件绑定的数据。
下面这个示例展示了如何String数据绑定到Label控件：
package main  import ( 	&amp;#34;time&amp;#34;  	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; 	&amp;#34;fyne.io/fyne/v2/widget&amp;#34; )  func main() { 	a := app.New() 	w := a.NewWindow(&amp;#34;Hello&amp;#34;)  	str := binding.NewString() 	go func() { 	dots := &amp;#34;.....&amp;#34; 	for i := 5; i &amp;gt;= 0; i-- { 	str.Set(&amp;#34;Count down&amp;#34; + dots[:i]) 	time.Sleep(time.Second) 	} 	str.</description>
    </item>
    
    <item>
      <title>移动端打包</title>
      <link>https://darcybook.github.io/docs/started/mobile/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/mobile/</guid>
      <description>移动端打包# 你的 Fyne 应用代码将作为移动应用开箱即用，就像它在桌面上一样。但是，打包代码以进行分发会稍微复杂一些。此页面将探讨执行此操作以在iOS和Android上获取应用程序的过程。
首先，您需要安装更多的开发工具才能完成移动打包。对于 Android 版本，您必须安装 Android SDK 和 NDK 并设置适当的环境，以便在命令行上找到这些工具（如adb）。要构建iOS应用程序，您需要在macOS计算机上安装Xcode以及命令行工具可选包。
一旦你有了一个工作开发环境，打包就很简单了。要为Android和iOS构建应用程序，以下命令将为您完成所有操作。请确保具有唯一的应用程序标识符，因为在首次发布后不要轻易更改这些标识符。
fyne package -os android -appID com.example.myapp -icon mobileIcon.pngfyne package -os ios -appID com.example.myapp -icon mobileIcon.png 完成这些命令后（首次编译可能需要一些时间），您将在目录中看到两个新文件，myapp.apk以及 myapp.app。您将看到后者与darwin应用程序包具有相同的名称 &amp;ndash; 不要被它们迷惑了，因为它们在darwin上不起作用。 要在手机或模拟器上安装Android应用程序，只需运行：
To install the android app on your phone or a simulator simply call:
adb install myapp.apk 要在设备上安装iOS，请打开Xcode，然后在“窗口”菜单中选择“设备和模拟器”菜单项。然后找到你的手机并将myapp.app图标拖到你的应用列表上。要在模拟器上安装，可以使用命令行工具，如下所示：
xcrun simctl install booted myapp.app </description>
    </item>
    
    <item>
      <title>编译选项</title>
      <link>https://darcybook.github.io/docs/explore/compiling/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/explore/compiling/</guid>
      <description>编译选项# Build tags#Fyne会选择驱动程序和设置来自动配置你的应用。 下面的build tags可以帮助。 例如，你希望在桌面计算机上模拟移动应用，可以使用下面命令：
	go run -tags mobile main.go    Tag Description     gles 强制使用嵌入式 OpenGL （GLES） 而不是完整的 OpenGL。这通常由目标设备控制，通常不需要。   hints 显示开发人员提示以进行改进或优化。使用hints运行，会记录您的应用程序不遵循材料设计或其他建议。   mobile 此标记在模拟的移动窗口中运行应用程序。当您想要在移动平台上预览应用程序而无需编译和安装到设备时非常有用。   no_native_menus 此标志专门用于 macOS，指示应用程序不应使用 macOS 本机菜单。相反，菜单将显示在应用程序窗口内。对于在 macOS 上测试应用程序以模拟 Windows 或 Linux 上的行为最有用。    </description>
    </item>
    
    <item>
      <title>AppTabs</title>
      <link>https://darcybook.github.io/docs/container/apptabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/container/apptabs/</guid>
      <description>The AppTabs container is used to allow the user to switch between different content panels. Tabs are either just text or text and an icon. It is recommended not to mix some tabs having icons and some without. A tab container is created using container.NewAppTabs(...) and passing container.TabItem items (that can be created using container.NewTabItem(...)).
The tab container can be configured by setting the location of tabs, one of container.TabLocationTop, container.</description>
    </item>
    
    <item>
      <title>List</title>
      <link>https://darcybook.github.io/docs/widget/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/widget/list/</guid>
      <description>The List widget is one of the toolkit&amp;rsquo;s collection widgets. These widgets are designed to help build really performant interfaces when lots of data is being presented. You can also see the Table and Tree widgets which have a similar API. Because of this design they are a little more complicated to use.
The List uses callback functions to ask for data when it is required. There are 3 main callbacks, Length, CreateItem and UpdateItem.</description>
    </item>
    
    <item>
      <title>分发到应用商店</title>
      <link>https://darcybook.github.io/docs/started/distribution/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/distribution/</guid>
      <description>分发# 分发到应用商店# 按照打包页面中所述打包图形应用程序可提供可直接共享或分发的文件或捆绑包。但是，签名并上传到应用商店和市场是需要特定于平台的配置的额外步骤，我们将在此页面中介绍。
在每个步骤中，我们将使用一个新工具，该工具是 fyne 命令行实用程序的一部分。该fyne release步骤处理每个商店的签名和准备工作，但参数因平台而异，如下所示。
macOS App Store (since fyne 1.4.2)#实现准备:
 运行 macOS 和 Xcode的Apple mac Apple 开发账号 Mac App Store 应用证书 Mac App Store 安装证书 App Store的Apple Transporter 程序    设置您的应用程序/版本，以便为在AppStore Connect上传构建版本做好准备。
  捆绑完成的应用程序以进行发布：
  $ fyne release -appID com.example.myapp -appVersion 1.0 -appBuild 1 -category games  将拖动到Deliver上，然后点击.pkg。
  返回 AppStore Connect 网站，选择您的版本以供发布，然后提交以供审核。</description>
    </item>
    
    <item>
      <title>Table</title>
      <link>https://darcybook.github.io/docs/widget/table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/widget/table/</guid>
      <description>The Table widget is like the List widget (another of the toolkit&amp;rsquo;s collection widgets) with a two-dimensional index. Like List this is designed to help build really performant interfaces when lots of data is being presented. Because of this the widget is not created with all the data embedded, but instead calls out to the data source when needed.
The Table uses callback functions to ask for data when it is required.</description>
    </item>
    
    <item>
      <title>元数据</title>
      <link>https://darcybook.github.io/docs/started/metadata/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/metadata/</guid>
      <description>元数据# App 元数据# fyne自v2.1.0 版本起，我们支持元数据文件，该文件允许您在存储库中存储有关应用程序的信息。此文件是可选的，但有助于避免必须记住每个包和 release 命令的特定生成参数。
文件需要命名为FyneApp.toml，目录为你运行的fyne目录，（通常是main包位置）。 文件内容如下所示：
Website = &amp;#34;https://example.com&amp;#34;  [Details] Icon = &amp;#34;Icon.png&amp;#34; Name = &amp;#34;My App&amp;#34; ID = &amp;#34;com.example.app&amp;#34; Version = &amp;#34;1.0.0&amp;#34; Build = 1 该文件的顶部是元数据，如果将应用上传到 https://apps.fyne.io 列表页面，将使用元数据，因此它是可选的。[详细信息] 部分包含其他应用商店和操作系统在发布过程中使用的有关应用程序的数据。如果找到此文件，fyne 工具将使用该文件，如果元数据存在，则不需要许多必需的命令参数。您仍然可以使用命令行参数覆盖这些值。</description>
    </item>
    
    <item>
      <title>交叉编译</title>
      <link>https://darcybook.github.io/docs/started/cross-compiling/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/cross-compiling/</guid>
      <description>交叉编译# 不同平台交叉编译# 使用Go进行交叉编译的设计很简单 &amp;ndash; 我们只需为目标操作系统设置环境变量GOOS（GOARCH如果面向不同的体系结构）。不幸的是，当使用原生图形的时候调用时，在Fyne中使用CGo会使这变得更加困难。
从开发计算机编译#要交叉编译Fyne应用程序，您还必须设置CGO_ENABLED=1告诉go启用C编译器（当目标平台与当前系统不同时，通常会关闭）。不幸的是，这样做意味着您必须为要编译的目标平台提供一个C编译器。安装适当的编译器后，您还需要设置环境变量CC以告知 Go 要使用哪个编译器。
有许多方法可以安装所需的工具 - 以及可以使用的不同工具。Fyne 开发人员推荐的配置是
   GOOS (target) CC provider download notes     darwin o32-clang osxcross from github.com 您还需要安装 macOS SDK (instructions at the download link)   windows x86_64-w64-mingw64-gcc mingw64 package manager 对于 macOS，请使用homebrew   linux gcc or x86_64-linux-musl-gcc gcc or musl-cross cygwin or package manager musl-cross 可以从 homebrew 获得，以提供 linux gcc。您还需要安装 X11 和 mesa 标头进行编译。    设置上述环境变量后，您应该能够以通常的方式进行编译。如果发生进一步的错误，则可能是由于缺少包。某些目标平台需要安装其他库或头文件才能成功编译。</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://darcybook.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://darcybook.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo#Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs#Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description>
    </item>
    
    <item>
      <title>app</title>
      <link>https://darcybook.github.io/docs/api/app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/app/</guid>
      <description>app# import &amp;#34;fyne.io/fyne/v2/app&amp;#34; Package app provides app implementations for working with Fyne graphical interfaces. The fastest way to get started is to call app.New() which will normally load a new desktop application. If the &amp;ldquo;ci&amp;rdquo; tag is passed to go (go run -tags ci myapp.go) it will run an in-memory application.
Usage#func New#func New() fyne.App New returns a new application instance with the default driver and no unique ID</description>
    </item>
    
    <item>
      <title>app.SettingsSchema</title>
      <link>https://darcybook.github.io/docs/api/app/settingsschema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/app/settingsschema/</guid>
      <description>app.SettingsSchema# import &amp;#34;fyne.io/fyne/v2/app&amp;#34; Usage#type SettingsSchema#type SettingsSchema struct { 	// these items are used for global settings load 	ThemeName string `json:&amp;#34;theme&amp;#34;` 	Scale float32 `json:&amp;#34;scale&amp;#34;` 	PrimaryColor string `json:&amp;#34;primary_color&amp;#34;` } SettingsSchema is used for loading and storing global settings
func (*SettingsSchema) StoragePath#func (sc *SettingsSchema) StoragePath() string StoragePath returns the location of the settings storage</description>
    </item>
    
    <item>
      <title>binding</title>
      <link>https://darcybook.github.io/docs/api/data/binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/</guid>
      <description>binding# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#types# Bool BoolList DataItem DataList DataListener DataMap ExternalBool ExternalBoolList ExternalFloat ExternalFloatList ExternalInt ExternalIntList ExternalRune ExternalRuneList ExternalString ExternalStringList ExternalURI ExternalURIList ExternalUntyped ExternalUntypedList ExternalUntypedMap Float FloatList Int IntList Rune RuneList String StringList Struct URI URIList Untyped UntypedList UntypedMap  </description>
    </item>
    
    <item>
      <title>binding.Bool</title>
      <link>https://darcybook.github.io/docs/api/data/binding/bool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/bool/</guid>
      <description>binding.Bool# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Bool#type Bool interface { 	DataItem 	Get() (bool, error) 	Set(bool) error } Bool supports binding a bool value.
Since: 2.0func BindPreferenceBool#func BindPreferenceBool(key string, p fyne.Preferences) Bool BindPreferenceBool returns a bindable bool value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.</description>
    </item>
    
    <item>
      <title>binding.BoolList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/boollist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/boollist/</guid>
      <description>binding.BoolList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type BoolList#type BoolList interface { 	DataList  	Append(value bool) error 	Get() ([]bool, error) 	GetValue(index int) (bool, error) 	Prepend(value bool) error 	Set(list []bool) error 	SetValue(index int, value bool) error } BoolList supports binding a list of bool values.
Since: 2.0func NewBoolList#func NewBoolList() BoolList NewBoolList returns a bindable list of bool values.</description>
    </item>
    
    <item>
      <title>binding.DataItem</title>
      <link>https://darcybook.github.io/docs/api/data/binding/dataitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/dataitem/</guid>
      <description>binding.DataItem# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type DataItem#type DataItem interface { 	// AddListener attaches a new change listener to this DataItem. 	// Listeners are called each time the data inside this DataItem changes. 	// Additionally the listener will be triggered upon successful connection to get the current value. 	AddListener(DataListener) 	// RemoveListener will detach the specified change listener from the DataItem.</description>
    </item>
    
    <item>
      <title>binding.DataList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/datalist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/datalist/</guid>
      <description>binding.DataList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type DataList#type DataList interface { 	DataItem 	GetItem(index int) (DataItem, error) 	Length() int } DataList is the base interface for all bindable data lists.
Since: 2.0</description>
    </item>
    
    <item>
      <title>binding.DataListener</title>
      <link>https://darcybook.github.io/docs/api/data/binding/datalistener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/datalistener/</guid>
      <description>binding.DataListener# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type DataListener#type DataListener interface { 	DataChanged() } DataListener is any object that can register for changes in a bindable DataItem. See NewDataListener to define a new listener using just an inline function.
Since: 2.0func NewDataListener#func NewDataListener(fn func()) DataListener NewDataListener is a helper function that creates a new listener type from a simple callback function.</description>
    </item>
    
    <item>
      <title>binding.DataMap</title>
      <link>https://darcybook.github.io/docs/api/data/binding/datamap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/datamap/</guid>
      <description>binding.DataMap# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type DataMap#type DataMap interface { 	DataItem 	GetItem(string) (DataItem, error) 	Keys() []string } DataMap is the base interface for all bindable data maps.
Since: 2.0</description>
    </item>
    
    <item>
      <title>binding.ExternalBool</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalbool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalbool/</guid>
      <description>binding.ExternalBool# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalBool#type ExternalBool interface { 	Bool 	Reload() error } ExternalBool supports binding a bool value to an external value.
Since: 2.0func BindBool#func BindBool(v *bool) ExternalBool BindBool returns a new bindable value that controls the contents of the provided bool variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalBoolList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalboollist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalboollist/</guid>
      <description>binding.ExternalBoolList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalBoolList#type ExternalBoolList interface { 	BoolList  	Reload() error } ExternalBoolList supports binding a list of bool values from an external variable.
Since: 2.0func BindBoolList#func BindBoolList(v *[]bool) ExternalBoolList BindBoolList returns a bound list of bool values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalFloat</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalfloat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalfloat/</guid>
      <description>binding.ExternalFloat# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalFloat#type ExternalFloat interface { 	Float 	Reload() error } ExternalFloat supports binding a float64 value to an external value.
Since: 2.0func BindFloat#func BindFloat(v *float64) ExternalFloat BindFloat returns a new bindable value that controls the contents of the provided float64 variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalFloatList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalfloatlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalfloatlist/</guid>
      <description>binding.ExternalFloatList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalFloatList#type ExternalFloatList interface { 	FloatList  	Reload() error } ExternalFloatList supports binding a list of float64 values from an external variable.
Since: 2.0func BindFloatList#func BindFloatList(v *[]float64) ExternalFloatList BindFloatList returns a bound list of float64 values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalInt</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalint/</guid>
      <description>binding.ExternalInt# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalInt#type ExternalInt interface { 	Int 	Reload() error } ExternalInt supports binding a int value to an external value.
Since: 2.0func BindInt#func BindInt(v *int) ExternalInt BindInt returns a new bindable value that controls the contents of the provided int variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalIntList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalintlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalintlist/</guid>
      <description>binding.ExternalIntList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalIntList#type ExternalIntList interface { 	IntList  	Reload() error } ExternalIntList supports binding a list of int values from an external variable.
Since: 2.0func BindIntList#func BindIntList(v *[]int) ExternalIntList BindIntList returns a bound list of int values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalRune</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalrune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalrune/</guid>
      <description>binding.ExternalRune# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalRune#type ExternalRune interface { 	Rune 	Reload() error } ExternalRune supports binding a rune value to an external value.
Since: 2.0func BindRune#func BindRune(v *rune) ExternalRune BindRune returns a new bindable value that controls the contents of the provided rune variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalRuneList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalrunelist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalrunelist/</guid>
      <description>binding.ExternalRuneList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalRuneList#type ExternalRuneList interface { 	RuneList  	Reload() error } ExternalRuneList supports binding a list of rune values from an external variable.
Since: 2.0func BindRuneList#func BindRuneList(v *[]rune) ExternalRuneList BindRuneList returns a bound list of rune values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalString</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalstring/</guid>
      <description>binding.ExternalString# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalString#type ExternalString interface { 	String 	Reload() error } ExternalString supports binding a string value to an external value.
Since: 2.0func BindString#func BindString(v *string) ExternalString BindString returns a new bindable value that controls the contents of the provided string variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalStringList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalstringlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalstringlist/</guid>
      <description>binding.ExternalStringList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalStringList#type ExternalStringList interface { 	StringList  	Reload() error } ExternalStringList supports binding a list of string values from an external variable.
Since: 2.0func BindStringList#func BindStringList(v *[]string) ExternalStringList BindStringList returns a bound list of string values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalUntyped</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externaluntyped/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externaluntyped/</guid>
      <description>binding.ExternalUntyped# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalUntyped#type ExternalUntyped interface { 	Untyped 	Reload() error } ExternalUntyped supports binding a interface{} value to an external value.
Since: 2.1func BindUntyped#func BindUntyped(v interface{}) ExternalUntyped BindUntyped returns a bindable interface{} value that is bound to an external type. The parameter must be a pointer to the type you wish to bind.</description>
    </item>
    
    <item>
      <title>binding.ExternalUntypedList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externaluntypedlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externaluntypedlist/</guid>
      <description>binding.ExternalUntypedList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalUntypedList#type ExternalUntypedList interface { 	UntypedList  	Reload() error } ExternalUntypedList supports binding a list of interface{} values from an external variable.
Since: 2.1func BindUntypedList#func BindUntypedList(v *[]interface{}) ExternalUntypedList BindUntypedList returns a bound list of interface{} values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalUntypedMap</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externaluntypedmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externaluntypedmap/</guid>
      <description>binding.ExternalUntypedMap# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalUntypedMap#type ExternalUntypedMap interface { 	UntypedMap 	Reload() error } ExternalUntypedMap is a map data binding with all values untyped (interface{}), connected to an external data source.
Since: 2.0func BindUntypedMap#func BindUntypedMap(d *map[string]interface{}) ExternalUntypedMap BindUntypedMap creates a new map binding of string to interface{} based on the data passed. If your code changes the content of the map this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalURI</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externaluri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externaluri/</guid>
      <description>binding.ExternalURI# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalURI#type ExternalURI interface { 	URI 	Reload() error } ExternalURI supports binding a fyne.URI value to an external value.
Since: 2.1func BindURI#func BindURI(v *fyne.URI) ExternalURI BindURI returns a new bindable value that controls the contents of the provided fyne.URI variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalURIList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/externalurilist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/externalurilist/</guid>
      <description>binding.ExternalURIList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalURIList#type ExternalURIList interface { 	URIList  	Reload() error } ExternalURIList supports binding a list of fyne.URI values from an external variable.
Since: 2.1func BindURIList#func BindURIList(v *[]fyne.URI) ExternalURIList BindURIList returns a bound list of fyne.URI values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.Float</title>
      <link>https://darcybook.github.io/docs/api/data/binding/float/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/float/</guid>
      <description>binding.Float# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Float#type Float interface { 	DataItem 	Get() (float64, error) 	Set(float64) error } Float supports binding a float64 value.
Since: 2.0func BindPreferenceFloat#func BindPreferenceFloat(key string, p fyne.Preferences) Float BindPreferenceFloat returns a bindable float64 value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.</description>
    </item>
    
    <item>
      <title>binding.FloatList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/floatlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/floatlist/</guid>
      <description>binding.FloatList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type FloatList#type FloatList interface { 	DataList  	Append(value float64) error 	Get() ([]float64, error) 	GetValue(index int) (float64, error) 	Prepend(value float64) error 	Set(list []float64) error 	SetValue(index int, value float64) error } FloatList supports binding a list of float64 values.
Since: 2.0func NewFloatList#func NewFloatList() FloatList NewFloatList returns a bindable list of float64 values.</description>
    </item>
    
    <item>
      <title>binding.Int</title>
      <link>https://darcybook.github.io/docs/api/data/binding/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/int/</guid>
      <description>binding.Int# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Int#type Int interface { 	DataItem 	Get() (int, error) 	Set(int) error } Int supports binding a int value.
Since: 2.0func BindPreferenceInt#func BindPreferenceInt(key string, p fyne.Preferences) Int BindPreferenceInt returns a bindable int value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.</description>
    </item>
    
    <item>
      <title>binding.IntList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/intlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/intlist/</guid>
      <description>binding.IntList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type IntList#type IntList interface { 	DataList  	Append(value int) error 	Get() ([]int, error) 	GetValue(index int) (int, error) 	Prepend(value int) error 	Set(list []int) error 	SetValue(index int, value int) error } IntList supports binding a list of int values.
Since: 2.0func NewIntList#func NewIntList() IntList NewIntList returns a bindable list of int values.</description>
    </item>
    
    <item>
      <title>binding.Rune</title>
      <link>https://darcybook.github.io/docs/api/data/binding/rune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/rune/</guid>
      <description>binding.Rune# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Rune#type Rune interface { 	DataItem 	Get() (rune, error) 	Set(rune) error } Rune supports binding a rune value.
Since: 2.0func NewRune#func NewRune() Rune NewRune returns a bindable rune value that is managed internally.
Since: 2.0</description>
    </item>
    
    <item>
      <title>binding.RuneList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/runelist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/runelist/</guid>
      <description>binding.RuneList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type RuneList#type RuneList interface { 	DataList  	Append(value rune) error 	Get() ([]rune, error) 	GetValue(index int) (rune, error) 	Prepend(value rune) error 	Set(list []rune) error 	SetValue(index int, value rune) error } RuneList supports binding a list of rune values.
Since: 2.0func NewRuneList#func NewRuneList() RuneList NewRuneList returns a bindable list of rune values.</description>
    </item>
    
    <item>
      <title>binding.String</title>
      <link>https://darcybook.github.io/docs/api/data/binding/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/string/</guid>
      <description>binding.String# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type String#type String interface { 	DataItem 	Get() (string, error) 	Set(string) error } String supports binding a string value.
Since: 2.0func BindPreferenceString#func BindPreferenceString(key string, p fyne.Preferences) String BindPreferenceString returns a bindable string value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.</description>
    </item>
    
    <item>
      <title>binding.StringList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/stringlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/stringlist/</guid>
      <description>binding.StringList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type StringList#type StringList interface { 	DataList  	Append(value string) error 	Get() ([]string, error) 	GetValue(index int) (string, error) 	Prepend(value string) error 	Set(list []string) error 	SetValue(index int, value string) error } StringList supports binding a list of string values.
Since: 2.0func NewStringList#func NewStringList() StringList NewStringList returns a bindable list of string values.</description>
    </item>
    
    <item>
      <title>binding.Struct</title>
      <link>https://darcybook.github.io/docs/api/data/binding/struct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/struct/</guid>
      <description>binding.Struct# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Struct#type Struct interface { 	DataMap 	GetValue(string) (interface{}, error) 	SetValue(string, interface{}) error 	Reload() error } Struct is the base interface for a bound struct type.
Since: 2.0func BindStruct#func BindStruct(i interface{}) Struct BindStruct creates a new map binding of string to interface{} using the struct passed as data. The key for each item is a string representation of each exported field with the value set as an interface{}.</description>
    </item>
    
    <item>
      <title>binding.Untyped</title>
      <link>https://darcybook.github.io/docs/api/data/binding/untyped/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/untyped/</guid>
      <description>binding.Untyped# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Untyped#type Untyped interface { 	DataItem 	Get() (interface{}, error) 	Set(interface{}) error } Untyped supports binding a interface{} value.
Since: 2.1func NewUntyped#func NewUntyped() Untyped NewUntyped returns a bindable interface{} value that is managed internally.
Since: 2.1</description>
    </item>
    
    <item>
      <title>binding.UntypedList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/untypedlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/untypedlist/</guid>
      <description>binding.UntypedList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type UntypedList#type UntypedList interface { 	DataList  	Append(value interface{}) error 	Get() ([]interface{}, error) 	GetValue(index int) (interface{}, error) 	Prepend(value interface{}) error 	Set(list []interface{}) error 	SetValue(index int, value interface{}) error } UntypedList supports binding a list of interface{} values.
Since: 2.1func NewUntypedList#func NewUntypedList() UntypedList NewUntypedList returns a bindable list of interface{} values.</description>
    </item>
    
    <item>
      <title>binding.UntypedMap</title>
      <link>https://darcybook.github.io/docs/api/data/binding/untypedmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/untypedmap/</guid>
      <description>binding.UntypedMap# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type UntypedMap#type UntypedMap interface { 	DataMap 	Delete(string) 	Get() (map[string]interface{}, error) 	GetValue(string) (interface{}, error) 	Set(map[string]interface{}) error 	SetValue(string, interface{}) error } UntypedMap is a map data binding with all values Untyped (interface{}).
Since: 2.0func NewUntypedMap#func NewUntypedMap() UntypedMap NewUntypedMap creates a new, empty map binding of string to interface{}.
Since: 2.</description>
    </item>
    
    <item>
      <title>binding.URI</title>
      <link>https://darcybook.github.io/docs/api/data/binding/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/uri/</guid>
      <description>binding.URI# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type URI#type URI interface { 	DataItem 	Get() (fyne.URI, error) 	Set(fyne.URI) error } URI supports binding a fyne.URI value.
Since: 2.1func NewURI#func NewURI() URI NewURI returns a bindable fyne.URI value that is managed internally.
Since: 2.1func StringToURI#func StringToURI(str String) URI StringToURI creates a binding that connects a String data item to a URI.</description>
    </item>
    
    <item>
      <title>binding.URIList</title>
      <link>https://darcybook.github.io/docs/api/data/binding/urilist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/binding/urilist/</guid>
      <description>binding.URIList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type URIList#type URIList interface { 	DataList  	Append(value fyne.URI) error 	Get() ([]fyne.URI, error) 	GetValue(index int) (fyne.URI, error) 	Prepend(value fyne.URI) error 	Set(list []fyne.URI) error 	SetValue(index int, value fyne.URI) error } URIList supports binding a list of fyne.URI values.
Since: 2.1func NewURIList#func NewURIList() URIList NewURIList returns a bindable list of fyne.</description>
    </item>
    
    <item>
      <title>canvas</title>
      <link>https://darcybook.github.io/docs/api/canvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/</guid>
      <description>canvas# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Package canvas contains all of the primitive CanvasObjects that make up a Fyne GUI
The types implemented in this package are used as building blocks in order to build higher order functionality. These types are designed to be non-interactive, by design. If additional functonality is required, it&amp;rsquo;s usually a sign that this type should be used as part of a custom Widget.
Usage#const ( 	// DurationStandard is the time a standard interface animation will run.</description>
    </item>
    
    <item>
      <title>canvas.Circle</title>
      <link>https://darcybook.github.io/docs/api/canvas/circle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/circle/</guid>
      <description>canvas.Circle# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Circle#type Circle struct { 	Position1 fyne.Position // The current top-left position of the Circle 	Position2 fyne.Position // The current bottomright position of the Circle 	Hidden bool // Is this circle currently hidden  	FillColor color.Color // The circle fill color 	StrokeColor color.Color // The circle stroke color 	StrokeWidth float32 // The stroke width of the circle } Circle describes a colored circle primitive in a Fyne canvas</description>
    </item>
    
    <item>
      <title>canvas.Image</title>
      <link>https://darcybook.github.io/docs/api/canvas/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/image/</guid>
      <description>canvas.Image# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Image#type Image struct {  	// one of the following sources will provide our image data 	File string // Load the image from a file 	Resource fyne.Resource // Load the image from an in-memory resource 	Image image.Image // Specify a loaded image to use in this canvas object  	Translucency float64 // Set a translucency value &amp;gt; 0.</description>
    </item>
    
    <item>
      <title>canvas.ImageFill</title>
      <link>https://darcybook.github.io/docs/api/canvas/imagefill/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/imagefill/</guid>
      <description>canvas.ImageFill# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type ImageFill#type ImageFill int ImageFill defines the different type of ways an image can stretch to fill its space.
const ( 	// ImageFillStretch will scale the image to match the Size() values. 	// This is the default and does not maintain aspect ratio. 	ImageFillStretch ImageFill = iota 	// ImageFillContain makes the image fit within the object Size(), 	// centrally and maintaining aspect ratio.</description>
    </item>
    
    <item>
      <title>canvas.ImageScale</title>
      <link>https://darcybook.github.io/docs/api/canvas/imagescale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/imagescale/</guid>
      <description>canvas.ImageScale# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type ImageScale#type ImageScale int32 ImageScale defines the different scaling filters used to scaling images
const ( 	// ImageScaleSmooth will scale the image using ApproxBiLinear filter (or GL equivalent) 	ImageScaleSmooth ImageScale = 0 	// ImageScalePixels will scale the image using NearestNeighbor filter (or GL equivalent) 	ImageScalePixels ImageScale = 1 	// ImageScaleFastest will scale the image using hardware GPU if available 	// 	// Since: 2.</description>
    </item>
    
    <item>
      <title>canvas.Line</title>
      <link>https://darcybook.github.io/docs/api/canvas/line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/line/</guid>
      <description>canvas.Line# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Line#type Line struct { 	Position1 fyne.Position // The current top-left position of the Line 	Position2 fyne.Position // The current bottomright position of the Line 	Hidden bool // Is this Line currently hidden  	StrokeColor color.Color // The line stroke color 	StrokeWidth float32 // The stroke width of the line } Line describes a colored line primitive in a Fyne canvas.</description>
    </item>
    
    <item>
      <title>canvas.LinearGradient</title>
      <link>https://darcybook.github.io/docs/api/canvas/lineargradient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/lineargradient/</guid>
      <description>canvas.LinearGradient# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type LinearGradient#type LinearGradient struct { 	StartColor color.Color // The beginning color of the gradient 	EndColor color.Color // The end color of the gradient 	Angle float64 // The angle of the gradient (0/180 for vertical; 90/270 for horizontal) } LinearGradient defines a Gradient travelling straight at a given angle. The only supported values for the angle are 0.</description>
    </item>
    
    <item>
      <title>canvas.RadialGradient</title>
      <link>https://darcybook.github.io/docs/api/canvas/radialgradient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/radialgradient/</guid>
      <description>canvas.RadialGradient# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type RadialGradient#type RadialGradient struct { 	StartColor color.Color // The beginning color of the gradient 	EndColor color.Color // The end color of the gradient 	// The offset of the center for generation of the gradient. 	// This is not a DP measure but relates to the width/height. 	// A value of 0.5 would move the center by the half width/height.</description>
    </item>
    
    <item>
      <title>canvas.Raster</title>
      <link>https://darcybook.github.io/docs/api/canvas/raster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/raster/</guid>
      <description>canvas.Raster# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Raster#type Raster struct {  	// Render the raster image from code 	Generator func(w, h int) image.Image  	// Set a translucency value &amp;gt; 0.0 to fade the raster 	Translucency float64 	// Specify the type of scaling interpolation applied to the raster if it is not full-size 	// Since: 1.4.1 	ScaleMode ImageScale } Raster describes a raster image area that can render in a Fyne canvas</description>
    </item>
    
    <item>
      <title>canvas.Rectangle</title>
      <link>https://darcybook.github.io/docs/api/canvas/rectangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/rectangle/</guid>
      <description>canvas.Rectangle# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Rectangle#type Rectangle struct { 	FillColor color.Color // The rectangle fill color 	StrokeColor color.Color // The rectangle stroke color 	StrokeWidth float32 // The stroke width of the rectangle } Rectangle describes a colored rectangle primitive in a Fyne canvas
func NewRectangle#func NewRectangle(color color.Color) *Rectangle NewRectangle returns a new Rectangle instance
func (*Rectangle) Hide#func (r *Rectangle) Hide() Hide will set this object to not be visible.</description>
    </item>
    
    <item>
      <title>canvas.Text</title>
      <link>https://darcybook.github.io/docs/api/canvas/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/text/</guid>
      <description>canvas.Text# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Text#type Text struct { 	Alignment fyne.TextAlign // The alignment of the text content  	Color color.Color // The main text draw color 	Text string // The string content of this Text 	TextSize float32 // Size of the text - if the Canvas scale is 1.0 this will be equivalent to point size 	TextStyle fyne.</description>
    </item>
    
    <item>
      <title>container</title>
      <link>https://darcybook.github.io/docs/api/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/container/</guid>
      <description>container# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Package container provides container widgets that are used to lay out and organise applications
Usage#const ( 	// ScrollBoth supports horizontal and vertical scrolling. 	ScrollBoth ScrollDirection = widget.ScrollBoth 	// ScrollHorizontalOnly specifies the scrolling should only happen left to right. 	ScrollHorizontalOnly = widget.ScrollHorizontalOnly 	// ScrollVerticalOnly specifies the scrolling should only happen top to bottom. 	ScrollVerticalOnly = widget.ScrollVerticalOnly 	// ScrollNone turns off scrolling for this container.</description>
    </item>
    
    <item>
      <title>container.AppTabs</title>
      <link>https://darcybook.github.io/docs/api/container/apptabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/container/apptabs/</guid>
      <description>container.AppTabs# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type AppTabs#type AppTabs struct { 	widget.BaseWidget  	Items []*TabItem  	// Deprecated: Use `OnSelected func(*TabItem)` instead. 	OnChanged func(*TabItem) 	OnSelected func(*TabItem) 	OnUnselected func(*TabItem) } AppTabs container is used to split your application into various different areas identified by tabs. The tabs contain text and/or an icon and allow the user to switch between the content specified in each TabItem.</description>
    </item>
    
    <item>
      <title>container.DocTabs</title>
      <link>https://darcybook.github.io/docs/api/container/doctabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/container/doctabs/</guid>
      <description>container.DocTabs# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type DocTabs#type DocTabs struct { 	widget.BaseWidget  	Items []*TabItem  	CreateTab func() *TabItem 	CloseIntercept func(*TabItem) 	OnClosed func(*TabItem) 	OnSelected func(*TabItem) 	OnUnselected func(*TabItem) } DocTabs container is used to display various pieces of content identified by tabs. The tabs contain text and/or an icon and allow the user to switch between the content specified in each TabItem.</description>
    </item>
    
    <item>
      <title>container.Scroll</title>
      <link>https://darcybook.github.io/docs/api/container/scroll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/container/scroll/</guid>
      <description>container.Scroll# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type Scroll#type Scroll = widget.Scroll Scroll defines a container that is smaller than the Content. The Offset is used to determine the position of the child widgets within the container.
Since: 1.4func NewHScroll#func NewHScroll(content fyne.CanvasObject) *Scroll NewHScroll create a scrollable parent wrapping the specified content. Note that this may cause the MinSize.Width to be smaller than that of the passed object.</description>
    </item>
    
    <item>
      <title>container.ScrollDirection</title>
      <link>https://darcybook.github.io/docs/api/container/scrolldirection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/container/scrolldirection/</guid>
      <description>container.ScrollDirection# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type ScrollDirection#type ScrollDirection = widget.ScrollDirection ScrollDirection represents the directions in which a Scroll container can scroll its child content.
Since: 1.4</description>
    </item>
    
    <item>
      <title>container.Split</title>
      <link>https://darcybook.github.io/docs/api/container/split/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/container/split/</guid>
      <description>container.Split# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type Split#type Split struct { 	widget.BaseWidget 	Offset float64 	Horizontal bool 	Leading fyne.CanvasObject 	Trailing fyne.CanvasObject } Split defines a container whose size is split between two children.
Since: 1.4func NewHSplit#func NewHSplit(leading, trailing fyne.CanvasObject) *Split NewHSplit creates a horizontally arranged container with the specified leading and trailing elements. A vertical split bar that can be dragged will be added between the elements.</description>
    </item>
    
    <item>
      <title>container.TabItem</title>
      <link>https://darcybook.github.io/docs/api/container/tabitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/container/tabitem/</guid>
      <description>container.TabItem# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type TabItem#type TabItem struct { 	Text string 	Icon fyne.Resource 	Content fyne.CanvasObject } TabItem represents a single view in a tab view. The Text and Icon are used for the tab button and the Content is shown when the corresponding tab is active.
Since: 1.4func NewTabItem#func NewTabItem(text string, content fyne.CanvasObject) *TabItem NewTabItem creates a new item for a tabbed widget - each item specifies the content and a label for its tab.</description>
    </item>
    
    <item>
      <title>container.TabLocation</title>
      <link>https://darcybook.github.io/docs/api/container/tablocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/container/tablocation/</guid>
      <description>container.TabLocation# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type TabLocation#type TabLocation int TabLocation is the location where the tabs of a tab container should be rendered
Since: 1.4const ( 	TabLocationTop TabLocation = iota 	TabLocationLeading 	TabLocationBottom 	TabLocationTrailing ) TabLocation values</description>
    </item>
    
    <item>
      <title>desktop</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/</guid>
      <description>desktop# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Package desktop provides desktop specific driver functionality.
Usage#const ( 	// KeyNone represents no key 	KeyNone fyne.KeyName = &amp;#34;&amp;#34; 	// KeyShiftLeft represents the left shift key 	KeyShiftLeft fyne.KeyName = &amp;#34;LeftShift&amp;#34; 	// KeyShiftRight represents the right shift key 	KeyShiftRight fyne.KeyName = &amp;#34;RightShift&amp;#34; 	// KeyControlLeft represents the left control key 	KeyControlLeft fyne.KeyName = &amp;#34;LeftControl&amp;#34; 	// KeyControlRight represents the right control key 	KeyControlRight fyne.</description>
    </item>
    
    <item>
      <title>desktop.Canvas</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/canvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/canvas/</guid>
      <description>desktop.Canvas# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Canvas#type Canvas interface { 	OnKeyDown() func(*fyne.KeyEvent) 	SetOnKeyDown(func(*fyne.KeyEvent)) 	OnKeyUp() func(*fyne.KeyEvent) 	SetOnKeyUp(func(*fyne.KeyEvent)) } Canvas defines the desktop specific extensions to a fyne.Canvas.</description>
    </item>
    
    <item>
      <title>desktop.Cursor</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/cursor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/cursor/</guid>
      <description>desktop.Cursor# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Cursor#type Cursor interface { 	// Image returns the image for the given cursor, or nil if none should be shown. 	// It also returns the x and y pixels that should act as the hot-spot (measured from top left corner). 	Image() (image.Image, int, int) } Cursor interface is used for objects that desire a specific cursor.</description>
    </item>
    
    <item>
      <title>desktop.Cursorable</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/cursorable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/cursorable/</guid>
      <description>desktop.Cursorable# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Cursorable#type Cursorable interface { 	Cursor() Cursor } Cursorable describes any CanvasObject that needs a cursor change</description>
    </item>
    
    <item>
      <title>desktop.CustomShortcut</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/customshortcut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/customshortcut/</guid>
      <description>desktop.CustomShortcut# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type CustomShortcut#type CustomShortcut struct { 	fyne.KeyName 	Modifier } CustomShortcut describes a shortcut desktop event.
func (*CustomShortcut) ShortcutName#func (cs *CustomShortcut) ShortcutName() string ShortcutName returns the shortcut name associated to the event</description>
    </item>
    
    <item>
      <title>desktop.Driver</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/driver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/driver/</guid>
      <description>desktop.Driver# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Driver#type Driver interface { 	// Create a new borderless window that is centered on screen 	CreateSplashWindow() fyne.Window } Driver represents the extended capabilities of a desktop driver</description>
    </item>
    
    <item>
      <title>desktop.Hoverable</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/hoverable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/hoverable/</guid>
      <description>desktop.Hoverable# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Hoverable#type Hoverable interface { 	// MouseIn is a hook that is called if the mouse pointer enters the element. 	MouseIn(*MouseEvent) 	// MouseMoved is a hook that is called if the mouse pointer moved over the element. 	MouseMoved(*MouseEvent) 	// MouseOut is a hook that is called if the mouse pointer leaves the element. 	MouseOut() } Hoverable is used when a canvas object wishes to know if a pointer device moves over it.</description>
    </item>
    
    <item>
      <title>desktop.Keyable</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/keyable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/keyable/</guid>
      <description>desktop.Keyable# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Keyable#type Keyable interface { 	fyne.Focusable  	KeyDown(*fyne.KeyEvent) 	KeyUp(*fyne.KeyEvent) } Keyable describes any focusable canvas object that can accept desktop key events. This is the traditional key down and up event that is not applicable to all devices.</description>
    </item>
    
    <item>
      <title>desktop.Modifier</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/modifier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/modifier/</guid>
      <description>desktop.Modifier# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Modifier#type Modifier int Modifier captures any key modifiers (shift etc) pressed during this key event
const ( 	// ShiftModifier represents a shift key being held 	ShiftModifier Modifier = 1 &amp;lt;&amp;lt; iota 	// ControlModifier represents the ctrl key being held 	ControlModifier 	// AltModifier represents either alt keys being held 	AltModifier 	// SuperModifier represents either super keys being held 	SuperModifier ) </description>
    </item>
    
    <item>
      <title>desktop.Mouseable</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/mouseable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/mouseable/</guid>
      <description>desktop.Mouseable# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Mouseable#type Mouseable interface { 	MouseDown(*MouseEvent) 	MouseUp(*MouseEvent) } Mouseable represents desktop mouse events that can be sent to CanvasObjects</description>
    </item>
    
    <item>
      <title>desktop.MouseButton</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/mousebutton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/mousebutton/</guid>
      <description>desktop.MouseButton# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type MouseButton#type MouseButton int MouseButton represents a single button in a desktop MouseEvent
const ( 	// MouseButtonPrimary is the most common mouse button - on some systems the only one. 	// This will normally be on the left side of a mouse. 	// 	// Since: 2.0 	MouseButtonPrimary MouseButton = 1 &amp;lt;&amp;lt; iota  	// MouseButtonSecondary is the secondary button on most mouse input devices.</description>
    </item>
    
    <item>
      <title>desktop.MouseEvent</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/mouseevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/mouseevent/</guid>
      <description>desktop.MouseEvent# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type MouseEvent#type MouseEvent struct { 	fyne.PointEvent 	Button MouseButton 	Modifier Modifier } MouseEvent contains data relating to desktop mouse events</description>
    </item>
    
    <item>
      <title>desktop.StandardCursor</title>
      <link>https://darcybook.github.io/docs/api/driver/desktop/standardcursor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/desktop/standardcursor/</guid>
      <description>desktop.StandardCursor# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type StandardCursor#type StandardCursor int StandardCursor represents a standard Fyne cursor. These values were previously of type fyne.Cursor.
Since: 2.0const ( 	// DefaultCursor is the default cursor typically an arrow 	DefaultCursor StandardCursor = iota 	// TextCursor is the cursor often used to indicate text selection 	TextCursor 	// CrosshairCursor is the cursor often used to indicate bitmaps 	CrosshairCursor 	// PointerCursor is the cursor often used to indicate a link 	PointerCursor 	// HResizeCursor is the cursor often used to indicate horizontal resize 	HResizeCursor 	// VResizeCursor is the cursor often used to indicate vertical resize 	VResizeCursor 	// HiddenCursor will cause the cursor to not be shown 	HiddenCursor ) func (StandardCursor) Image#func (d StandardCursor) Image() (image.</description>
    </item>
    
    <item>
      <title>dialog</title>
      <link>https://darcybook.github.io/docs/api/dialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/dialog/</guid>
      <description>dialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Package dialog defines standard dialog windows for application GUIs.
Usage#func ShowColorPicker#func ShowColorPicker(title, message string, callback func(c color.Color), parent fyne.Window) ShowColorPicker creates and shows a color dialog. The callback is triggered when the user selects a color.
Since: 1.4func ShowConfirm#func ShowConfirm(title, message string, callback func(bool), parent fyne.Window) ShowConfirm shows a dialog over the specified window for a user confirmation.</description>
    </item>
    
    <item>
      <title>dialog.ColorPickerDialog</title>
      <link>https://darcybook.github.io/docs/api/dialog/colorpickerdialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/dialog/colorpickerdialog/</guid>
      <description>dialog.ColorPickerDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type ColorPickerDialog#type ColorPickerDialog struct { 	Advanced bool } ColorPickerDialog is a simple dialog window that displays a color picker.
Since: 1.4func NewColorPicker#func NewColorPicker(title, message string, callback func(c color.Color), parent fyne.Window) *ColorPickerDialog NewColorPicker creates a color dialog and returns the handle. Using the returned type you should call Show() and then set its color through SetColor().</description>
    </item>
    
    <item>
      <title>dialog.ConfirmDialog</title>
      <link>https://darcybook.github.io/docs/api/dialog/confirmdialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/dialog/confirmdialog/</guid>
      <description>dialog.ConfirmDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type ConfirmDialog#type ConfirmDialog struct { } ConfirmDialog is like the standard Dialog but with an additional confirmation button
func NewConfirm#func NewConfirm(title, message string, callback func(bool), parent fyne.Window) *ConfirmDialog NewConfirm creates a dialog over the specified window for user confirmation. The title is used for the dialog window and message is the content. The callback is executed when the user decides.</description>
    </item>
    
    <item>
      <title>dialog.Dialog</title>
      <link>https://darcybook.github.io/docs/api/dialog/dialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/dialog/dialog/</guid>
      <description>dialog.Dialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type Dialog#type Dialog interface { 	Show() 	Hide() 	SetDismissText(label string) 	SetOnClosed(closed func()) 	Refresh() 	Resize(size fyne.Size)  	// Since: 2.1 	MinSize() fyne.Size } Dialog is the common API for any dialog window with a single dismiss button
func NewCustom#func NewCustom(title, dismiss string, content fyne.CanvasObject, parent fyne.Window) Dialog NewCustom creates and returns a dialog over the specified application using custom content.</description>
    </item>
    
    <item>
      <title>dialog.EntryDialog</title>
      <link>https://darcybook.github.io/docs/api/dialog/entrydialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/dialog/entrydialog/</guid>
      <description>dialog.EntryDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type EntryDialog#type EntryDialog struct { } EntryDialog is a variation of a dialog which prompts the user to enter some text.
Deprecated: Use dialog.NewFormDialog() or dialog.ShowFormDialog() with a widget.Entry inside instead.func NewEntryDialog#func NewEntryDialog(title, message string, onConfirm func(string), parent fyne.Window) *EntryDialog NewEntryDialog creates a dialog over the specified window for the user to enter a value.</description>
    </item>
    
    <item>
      <title>dialog.FileDialog</title>
      <link>https://darcybook.github.io/docs/api/dialog/filedialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/dialog/filedialog/</guid>
      <description>dialog.FileDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type FileDialog#type FileDialog struct { } FileDialog is a dialog containing a file picker for use in opening or saving files.
func NewFileOpen#func NewFileOpen(callback func(fyne.URIReadCloser, error), parent fyne.Window) *FileDialog NewFileOpen creates a file dialog allowing the user to choose a file to open. The callback function will run when the dialog closes. The URI will be nil when the user cancels or when nothing is selected.</description>
    </item>
    
    <item>
      <title>dialog.ProgressDialog</title>
      <link>https://darcybook.github.io/docs/api/dialog/progressdialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/dialog/progressdialog/</guid>
      <description>dialog.ProgressDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type ProgressDialog#type ProgressDialog struct { } ProgressDialog is a simple dialog window that displays text and a progress bar.
Deprecated: Create a new custom dialog with a widget.ProgressBar() inside.func NewProgress#func NewProgress(title, message string, parent fyne.Window) *ProgressDialog NewProgress creates a progress dialog and returns the handle. Using the returned type you should call Show() and then set its value through SetValue().</description>
    </item>
    
    <item>
      <title>dialog.ProgressInfiniteDialog</title>
      <link>https://darcybook.github.io/docs/api/dialog/progressinfinitedialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/dialog/progressinfinitedialog/</guid>
      <description>dialog.ProgressInfiniteDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type ProgressInfiniteDialog#type ProgressInfiniteDialog struct { } ProgressInfiniteDialog is a simple dialog window that displays text and a infinite progress bar.
Deprecated: Create a new custom dialog with a widget.ProgressBarInfinite() inside.func NewProgressInfinite#func NewProgressInfinite(title, message string, parent fyne.Window) *ProgressInfiniteDialog NewProgressInfinite creates a infinite progress dialog and returns the handle. Using the returned type you should call Show().</description>
    </item>
    
    <item>
      <title>Extending Widgets</title>
      <link>https://darcybook.github.io/docs/extend/extending-widgets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/extend/extending-widgets/</guid>
      <description>The standard Fyne widgets provide the minimum functionality and customisation to support most use-cases. It may be required at certain times to have more advanced functionality. Rather than have developers build their own widgets it is possible to extend the existing ones.
For example we will extend the icon widget to support being tapped. To do this we declare a new struct that embeds the widget.Icon type. We create a constructor function that calls the important ExtendBaseWidget function.</description>
    </item>
    
    <item>
      <title>Frequently Asked Questions</title>
      <link>https://darcybook.github.io/docs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/faq/</guid>
      <description>As the Fyne toolkit presents a different approach to the traditional design of GUI tookits in some ways we have compiled this selection of answers to frequently asked questions. The content is grouped into the following areas.
 Layout and widget size Theme and customisation   If you have more questions please get in touch.</description>
    </item>
    
    <item>
      <title>fyne</title>
      <link>https://darcybook.github.io/docs/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/</guid>
      <description>fyne# import &amp;#34;fyne.io/fyne/v2&amp;#34; Package fyne describes the objects and components available to any Fyne app. These can all be created, manipulated and tested without rendering (for speed). Your main package should use the app package to create an application with a default driver that will render your UI.
A simple application may look like this:
 package main   import &amp;#34;fyne.io/fyne/v2/app&amp;#34;  import &amp;#34;fyne.io/fyne/v2/container&amp;#34;  import &amp;#34;fyne.</description>
    </item>
    
    <item>
      <title>fyne.Animation</title>
      <link>https://darcybook.github.io/docs/api/animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/animation/</guid>
      <description>fyne.Animation# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Animation#type Animation struct { 	AutoReverse bool 	Curve AnimationCurve 	Duration time.Duration 	RepeatCount int 	Tick func(float32) } Animation represents an animated element within a Fyne canvas. These animations may control individual objects or entire scenes.
Since: 2.0func NewAnimation#func NewAnimation(d time.Duration, fn func(float32)) *Animation NewAnimation creates a very basic animation where the callback function will be called for every rendered frame between time.</description>
    </item>
    
    <item>
      <title>fyne.AnimationCurve</title>
      <link>https://darcybook.github.io/docs/api/animationcurve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/animationcurve/</guid>
      <description>fyne.AnimationCurve# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type AnimationCurve#type AnimationCurve func(float32) float32 AnimationCurve represents an animation algorithm for calculating the progress through a timeline. Custom animations can be provided by implementing the &amp;ldquo;func(float32) float32&amp;rdquo; definition. The input parameter will start at 0.0 when an animation starts and travel up to 1.0 at which point it will end. A linear animation would return the same output value as is passed in.</description>
    </item>
    
    <item>
      <title>fyne.App</title>
      <link>https://darcybook.github.io/docs/api/app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/app/</guid>
      <description>fyne.App# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type App#type App interface { 	// Create a new window for the application. 	// The first window to open is considered the &amp;#34;master&amp;#34; and when closed 	// the application will exit. 	NewWindow(title string) Window  	// Open a URL in the default browser application. 	OpenURL(url *url.URL) error  	// Icon returns the application icon, this is used in various ways 	// depending on operating system.</description>
    </item>
    
    <item>
      <title>fyne.BuildType</title>
      <link>https://darcybook.github.io/docs/api/buildtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/buildtype/</guid>
      <description>fyne.BuildType# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type BuildType#type BuildType int BuildType defines different modes that an application can be built using.
const ( 	// BuildStandard is the normal build mode - it is not debug, test or release mode. 	BuildStandard BuildType = iota 	// BuildDebug is used when a developer would like more information and visual output for app debugging. 	BuildDebug 	// BuildRelease is a final production build, it is like BuildStandard but will use distribution certificates.</description>
    </item>
    
    <item>
      <title>fyne.Canvas</title>
      <link>https://darcybook.github.io/docs/api/canvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvas/</guid>
      <description>fyne.Canvas# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Canvas#type Canvas interface { 	Content() CanvasObject 	SetContent(CanvasObject)  	Refresh(CanvasObject)  	// Focus makes the provided item focused. 	// The item has to be added to the contents of the canvas before calling this. 	Focus(Focusable) 	// FocusNext focuses the next focusable item. 	// If no item is currently focused, the first focusable item is focused.</description>
    </item>
    
    <item>
      <title>fyne.CanvasObject</title>
      <link>https://darcybook.github.io/docs/api/canvasobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/canvasobject/</guid>
      <description>fyne.CanvasObject# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type CanvasObject#type CanvasObject interface {  	// MinSize returns the minimum size this object needs to be drawn. 	MinSize() Size 	// Move moves this object to the given position relative to its parent. 	// This should only be called if your object is not in a container with a layout manager. 	Move(Position) 	// Position returns the current position of the object relative to its parent.</description>
    </item>
    
    <item>
      <title>fyne.Clipboard</title>
      <link>https://darcybook.github.io/docs/api/clipboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/clipboard/</guid>
      <description>fyne.Clipboard# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Clipboard#type Clipboard interface { 	// Content returns the clipboard content 	Content() string 	// SetContent sets the clipboard content 	SetContent(content string) } Clipboard represents the system clipboard interface</description>
    </item>
    
    <item>
      <title>fyne.Container</title>
      <link>https://darcybook.github.io/docs/api/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/container/</guid>
      <description>fyne.Container# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Container#type Container struct { 	Hidden bool // Is this Container hidden  	Layout Layout // The Layout algorithm for arranging child CanvasObjects 	Objects []CanvasObject // The set of CanvasObjects this container holds } Container is a CanvasObject that contains a collection of child objects. The layout of the children is set by the specified Layout.</description>
    </item>
    
    <item>
      <title>fyne.Delta</title>
      <link>https://darcybook.github.io/docs/api/delta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/delta/</guid>
      <description>fyne.Delta# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Delta#type Delta struct { 	DX, DY float32 } Delta is a generic X, Y coordinate, size or movement representation.
func NewDelta#func NewDelta(dx float32, dy float32) Delta NewDelta returns a newly allocated Delta representing a movement in the X and Y axis.
func (Delta) Components#func (v Delta) Components() (float32, float32) Components returns the X and Y elements of this Delta.</description>
    </item>
    
    <item>
      <title>fyne.Device</title>
      <link>https://darcybook.github.io/docs/api/device/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/device/</guid>
      <description>fyne.Device# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Device#type Device interface { 	Orientation() DeviceOrientation 	IsMobile() bool 	HasKeyboard() bool 	SystemScaleForWindow(Window) float32 } Device provides information about the devices the code is running on
func CurrentDevice#func CurrentDevice() Device CurrentDevice returns the device information for the current hardware (via the driver)</description>
    </item>
    
    <item>
      <title>fyne.DeviceOrientation</title>
      <link>https://darcybook.github.io/docs/api/deviceorientation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/deviceorientation/</guid>
      <description>fyne.DeviceOrientation# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type DeviceOrientation#type DeviceOrientation int DeviceOrientation represents the different ways that a mobile device can be held
const ( 	// OrientationVertical is the default vertical orientation 	OrientationVertical DeviceOrientation = iota 	// OrientationVerticalUpsideDown is the portrait orientation held upside down 	OrientationVerticalUpsideDown 	// OrientationHorizontalLeft is used to indicate a landscape orientation with the top to the left 	OrientationHorizontalLeft 	// OrientationHorizontalRight is used to indicate a landscape orientation with the top to the right 	OrientationHorizontalRight ) </description>
    </item>
    
    <item>
      <title>fyne.Disableable</title>
      <link>https://darcybook.github.io/docs/api/disableable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/disableable/</guid>
      <description>fyne.Disableable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Disableable#type Disableable interface { 	Enable() 	Disable() 	Disabled() bool } Disableable describes any CanvasObject that can be disabled. This is primarily used with objects that also implement the Tappable interface.</description>
    </item>
    
    <item>
      <title>fyne.DoubleTappable</title>
      <link>https://darcybook.github.io/docs/api/doubletappable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/doubletappable/</guid>
      <description>fyne.DoubleTappable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type DoubleTappable#type DoubleTappable interface { 	DoubleTapped(*PointEvent) } DoubleTappable describes any CanvasObject that can also be double tapped.</description>
    </item>
    
    <item>
      <title>fyne.DragEvent</title>
      <link>https://darcybook.github.io/docs/api/dragevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/dragevent/</guid>
      <description>fyne.DragEvent# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type DragEvent#type DragEvent struct { 	PointEvent 	Dragged Delta } DragEvent defines the parameters of a pointer or other drag event. The DraggedX and DraggedY fields show how far the item was dragged since the last event.</description>
    </item>
    
    <item>
      <title>fyne.Draggable</title>
      <link>https://darcybook.github.io/docs/api/draggable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/draggable/</guid>
      <description>fyne.Draggable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Draggable#type Draggable interface { 	Dragged(*DragEvent) 	DragEnd() } Draggable indicates that a CanvasObject can be dragged. This is used for any item that the user has indicated should be moved across the screen.</description>
    </item>
    
    <item>
      <title>fyne.Driver</title>
      <link>https://darcybook.github.io/docs/api/driver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/</guid>
      <description>fyne.Driver# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Driver#type Driver interface { 	// CreateWindow creates a new UI Window. 	CreateWindow(string) Window 	// AllWindows returns a slice containing all app windows. 	AllWindows() []Window  	// RenderedTextSize returns the size required to render the given string of specified 	// font size and style. It also returns the height to text baseline, measured from the top.</description>
    </item>
    
    <item>
      <title>fyne.Focusable&#34;</title>
      <link>https://darcybook.github.io/docs/api/focusable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/focusable/</guid>
      <description>fyne.Focusable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Focusable#type Focusable interface { 	// FocusGained is a hook called by the focus handling logic after this object gained the focus. 	FocusGained() 	// FocusLost is a hook called by the focus handling logic after this object lost the focus. 	FocusLost()  	// TypedRune is a hook called by the input handling logic on text input events if this object is focused.</description>
    </item>
    
    <item>
      <title>fyne.HardwareKey</title>
      <link>https://darcybook.github.io/docs/api/hardwarekey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/hardwarekey/</guid>
      <description>fyne.HardwareKey# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type HardwareKey#type HardwareKey struct { 	// ScanCode represents a hardware ID for (normally desktop) keyboard events. 	ScanCode int } HardwareKey contains information associated with physical key events Most applications should use KeyName for cross-platform compatibility.</description>
    </item>
    
    <item>
      <title>fyne.KeyEvent</title>
      <link>https://darcybook.github.io/docs/api/keyevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/keyevent/</guid>
      <description>fyne.KeyEvent# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type KeyEvent#type KeyEvent struct { 	// Name describes the keyboard event that is consistent across platforms. 	Name KeyName 	// Physical is a platform specific field that reports the hardware information of physical keyboard events. 	Physical HardwareKey } KeyEvent describes a keyboard input event.</description>
    </item>
    
    <item>
      <title>fyne.KeyName</title>
      <link>https://darcybook.github.io/docs/api/keyname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/keyname/</guid>
      <description>fyne.KeyName# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type KeyName#type KeyName string KeyName represents the name of a key that has been pressed
const ( 	// KeyEscape is the &amp;#34;esc&amp;#34; key 	KeyEscape KeyName = &amp;#34;Escape&amp;#34; 	// KeyReturn is the carriage return (main keyboard) 	KeyReturn KeyName = &amp;#34;Return&amp;#34; 	// KeyTab is the tab advance key 	KeyTab KeyName = &amp;#34;Tab&amp;#34; 	// KeyBackspace is the delete-before-cursor key 	KeyBackspace KeyName = &amp;#34;BackSpace&amp;#34; 	// KeyInsert is the insert mode key 	KeyInsert KeyName = &amp;#34;Insert&amp;#34; 	// KeyDelete is the delete-after-cursor key 	KeyDelete KeyName = &amp;#34;Delete&amp;#34; 	// KeyRight is the right arrow key 	KeyRight KeyName = &amp;#34;Right&amp;#34; 	// KeyLeft is the left arrow key 	KeyLeft KeyName = &amp;#34;Left&amp;#34; 	// KeyDown is the down arrow key 	KeyDown KeyName = &amp;#34;Down&amp;#34; 	// KeyUp is the up arrow key 	KeyUp KeyName = &amp;#34;Up&amp;#34; 	// KeyPageUp is the page up num-pad key 	KeyPageUp KeyName = &amp;#34;Prior&amp;#34; 	// KeyPageDown is the page down num-pad key 	KeyPageDown KeyName = &amp;#34;Next&amp;#34; 	// KeyHome is the line-home key 	KeyHome KeyName = &amp;#34;Home&amp;#34; 	// KeyEnd is the line-end key 	KeyEnd KeyName = &amp;#34;End&amp;#34;  	// KeyF1 is the first function key 	KeyF1 KeyName = &amp;#34;F1&amp;#34; 	// KeyF2 is the second function key 	KeyF2 KeyName = &amp;#34;F2&amp;#34; 	// KeyF3 is the third function key 	KeyF3 KeyName = &amp;#34;F3&amp;#34; 	// KeyF4 is the fourth function key 	KeyF4 KeyName = &amp;#34;F4&amp;#34; 	// KeyF5 is the fifth function key 	KeyF5 KeyName = &amp;#34;F5&amp;#34; 	// KeyF6 is the sixth function key 	KeyF6 KeyName = &amp;#34;F6&amp;#34; 	// KeyF7 is the seventh function key 	KeyF7 KeyName = &amp;#34;F7&amp;#34; 	// KeyF8 is the eighth function key 	KeyF8 KeyName = &amp;#34;F8&amp;#34; 	// KeyF9 is the ninth function key 	KeyF9 KeyName = &amp;#34;F9&amp;#34; 	// KeyF10 is the tenth function key 	KeyF10 KeyName = &amp;#34;F10&amp;#34; 	// KeyF11 is the eleventh function key 	KeyF11 KeyName = &amp;#34;F11&amp;#34; 	// KeyF12 is the twelfth function key 	KeyF12 KeyName = &amp;#34;F12&amp;#34;  	// KeyEnter is the enter/ return key (keypad) 	KeyEnter KeyName = &amp;#34;KP_Enter&amp;#34;  	// Key0 represents the key 0 	Key0 KeyName = &amp;#34;0&amp;#34; 	// Key1 represents the key 1 	Key1 KeyName = &amp;#34;1&amp;#34; 	// Key2 represents the key 2 	Key2 KeyName = &amp;#34;2&amp;#34; 	// Key3 represents the key 3 	Key3 KeyName = &amp;#34;3&amp;#34; 	// Key4 represents the key 4 	Key4 KeyName = &amp;#34;4&amp;#34; 	// Key5 represents the key 5 	Key5 KeyName = &amp;#34;5&amp;#34; 	// Key6 represents the key 6 	Key6 KeyName = &amp;#34;6&amp;#34; 	// Key7 represents the key 7 	Key7 KeyName = &amp;#34;7&amp;#34; 	// Key8 represents the key 8 	Key8 KeyName = &amp;#34;8&amp;#34; 	// Key9 represents the key 9 	Key9 KeyName = &amp;#34;9&amp;#34; 	// KeyA represents the key A 	KeyA KeyName = &amp;#34;A&amp;#34; 	// KeyB represents the key B 	KeyB KeyName = &amp;#34;B&amp;#34; 	// KeyC represents the key C 	KeyC KeyName = &amp;#34;C&amp;#34; 	// KeyD represents the key D 	KeyD KeyName = &amp;#34;D&amp;#34; 	// KeyE represents the key E 	KeyE KeyName = &amp;#34;E&amp;#34; 	// KeyF represents the key F 	KeyF KeyName = &amp;#34;F&amp;#34; 	// KeyG represents the key G 	KeyG KeyName = &amp;#34;G&amp;#34; 	// KeyH represents the key H 	KeyH KeyName = &amp;#34;H&amp;#34; 	// KeyI represents the key I 	KeyI KeyName = &amp;#34;I&amp;#34; 	// KeyJ represents the key J 	KeyJ KeyName = &amp;#34;J&amp;#34; 	// KeyK represents the key K 	KeyK KeyName = &amp;#34;K&amp;#34; 	// KeyL represents the key L 	KeyL KeyName = &amp;#34;L&amp;#34; 	// KeyM represents the key M 	KeyM KeyName = &amp;#34;M&amp;#34; 	// KeyN represents the key N 	KeyN KeyName = &amp;#34;N&amp;#34; 	// KeyO represents the key O 	KeyO KeyName = &amp;#34;O&amp;#34; 	// KeyP represents the key P 	KeyP KeyName = &amp;#34;P&amp;#34; 	// KeyQ represents the key Q 	KeyQ KeyName = &amp;#34;Q&amp;#34; 	// KeyR represents the key R 	KeyR KeyName = &amp;#34;R&amp;#34; 	// KeyS represents the key S 	KeyS KeyName = &amp;#34;S&amp;#34; 	// KeyT represents the key T 	KeyT KeyName = &amp;#34;T&amp;#34; 	// KeyU represents the key U 	KeyU KeyName = &amp;#34;U&amp;#34; 	// KeyV represents the key V 	KeyV KeyName = &amp;#34;V&amp;#34; 	// KeyW represents the key W 	KeyW KeyName = &amp;#34;W&amp;#34; 	// KeyX represents the key X 	KeyX KeyName = &amp;#34;X&amp;#34; 	// KeyY represents the key Y 	KeyY KeyName = &amp;#34;Y&amp;#34; 	// KeyZ represents the key Z 	KeyZ KeyName = &amp;#34;Z&amp;#34;  	// KeySpace is the space key 	KeySpace KeyName = &amp;#34;Space&amp;#34; 	// KeyApostrophe is the key &amp;#34;&amp;#39;&amp;#34; 	KeyApostrophe KeyName = &amp;#34;&amp;#39;&amp;#34; 	// KeyComma is the key &amp;#34;,&amp;#34; 	KeyComma KeyName = &amp;#34;,&amp;#34; 	// KeyMinus is the key &amp;#34;-&amp;#34; 	KeyMinus KeyName = &amp;#34;-&amp;#34; 	// KeyPeriod is the key &amp;#34;.</description>
    </item>
    
    <item>
      <title>fyne.Layout</title>
      <link>https://darcybook.github.io/docs/api/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/layout/</guid>
      <description>fyne.Layout# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Layout#type Layout interface { 	// Layout will manipulate the listed CanvasObjects Size and Position 	// to fit within the specified size. 	Layout([]CanvasObject, Size) 	// MinSize calculates the smallest size that will fit the listed 	// CanvasObjects using this Layout algorithm. 	MinSize(objects []CanvasObject) Size } Layout defines how CanvasObjects may be laid out in a specified Size.</description>
    </item>
    
    <item>
      <title>fyne.LegacyTheme</title>
      <link>https://darcybook.github.io/docs/api/legacytheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/legacytheme/</guid>
      <description>fyne.LegacyTheme# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type LegacyTheme#type LegacyTheme interface { 	BackgroundColor() color.Color 	ButtonColor() color.Color 	DisabledButtonColor() color.Color 	TextColor() color.Color 	DisabledTextColor() color.Color 	PlaceHolderColor() color.Color 	PrimaryColor() color.Color 	HoverColor() color.Color 	FocusColor() color.Color 	ScrollBarColor() color.Color 	ShadowColor() color.Color  	TextSize() int 	TextFont() Resource 	TextBoldFont() Resource 	TextItalicFont() Resource 	TextBoldItalicFont() Resource 	TextMonospaceFont() Resource  	Padding() int 	IconInlineSize() int 	ScrollBarSize() int 	ScrollBarSmallSize() int } LegacyTheme defines the requirements of any Fyne theme.</description>
    </item>
    
    <item>
      <title>fyne.Lifecycle</title>
      <link>https://darcybook.github.io/docs/api/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/lifecycle/</guid>
      <description>fyne.Lifecycle# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Lifecycle#type Lifecycle interface { 	// SetOnEnteredForeground hooks into the app becoming foreground and gaining focus. 	SetOnEnteredForeground(func()) 	// SetOnExitedForeground hooks into the app losing input focus and going into the background. 	SetOnExitedForeground(func()) 	// SetOnStarted hooks into an event that says the app is now running. 	SetOnStarted(func()) 	// SetOnStopped hooks into an event that says the app is no longer running.</description>
    </item>
    
    <item>
      <title>fyne.ListableURI</title>
      <link>https://darcybook.github.io/docs/api/listableuri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/listableuri/</guid>
      <description>fyne.ListableURI# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ListableURI#type ListableURI interface { 	URI  	// List returns a list of child URIs of this URI. 	List() ([]URI, error) } ListableURI represents a URI that can have child items, most commonly a directory on disk in the native filesystem.
Since: 1.4</description>
    </item>
    
    <item>
      <title>fyne.MainMenu</title>
      <link>https://darcybook.github.io/docs/api/mainmenu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/mainmenu/</guid>
      <description>fyne.MainMenu# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type MainMenu#type MainMenu struct { 	Items []*Menu } MainMenu defines the data required to show a menu bar (desktop) or other appropriate top level menu.
func NewMainMenu#func NewMainMenu(items ...*Menu) *MainMenu NewMainMenu creates a top level menu structure used by fyne.Window for displaying a menubar (or appropriate equivalent).</description>
    </item>
    
    <item>
      <title>fyne.Menu</title>
      <link>https://darcybook.github.io/docs/api/menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/menu/</guid>
      <description>fyne.Menu# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Menu#type Menu struct { 	Label string 	Items []*MenuItem } Menu stores the information required for a standard menu. A menu can pop down from a MainMenu or could be a pop out menu.
func NewMenu#func NewMenu(label string, items ...*MenuItem) *Menu NewMenu creates a new menu given the specified label (to show in a MainMenu) and list of items to display.</description>
    </item>
    
    <item>
      <title>fyne.MenuItem</title>
      <link>https://darcybook.github.io/docs/api/menuitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/menuitem/</guid>
      <description>fyne.MenuItem# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type MenuItem#type MenuItem struct { 	ChildMenu *Menu 	// Since: 2.1 	IsQuit bool 	IsSeparator bool 	Label string 	Action func() 	// Since: 2.1 	Disabled bool 	// Since: 2.1 	Checked bool } MenuItem is a single item within any menu, it contains a display Label and Action function that is called when tapped.</description>
    </item>
    
    <item>
      <title>fyne.Notification</title>
      <link>https://darcybook.github.io/docs/api/notification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/notification/</guid>
      <description>fyne.Notification# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Notification#type Notification struct { 	Title, Content string } Notification represents a user notification that can be sent to the operating system.
func NewNotification#func NewNotification(title, content string) *Notification NewNotification creates a notification that can be passed to App.SendNotification.</description>
    </item>
    
    <item>
      <title>fyne.OverlayStack</title>
      <link>https://darcybook.github.io/docs/api/overlaystack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/overlaystack/</guid>
      <description>fyne.OverlayStack# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type OverlayStack#type OverlayStack interface { 	// Add adds an overlay on the top of the overlay stack. 	Add(overlay CanvasObject) 	// List returns the overlays currently on the overlay stack. 	List() []CanvasObject 	// Remove removes the given object and all objects above it from the overlay stack. 	Remove(overlay CanvasObject) 	// Top returns the top-most object of the overlay stack.</description>
    </item>
    
    <item>
      <title>fyne.PointEvent</title>
      <link>https://darcybook.github.io/docs/api/pointevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/pointevent/</guid>
      <description>fyne.PointEvent# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type PointEvent#type PointEvent struct { 	AbsolutePosition Position // The absolute position of the event 	Position Position // The relative position of the event } PointEvent describes a pointer input event. The position is relative to the top-left of the CanvasObject this is triggered on.</description>
    </item>
    
    <item>
      <title>fyne.Position</title>
      <link>https://darcybook.github.io/docs/api/position/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/position/</guid>
      <description>fyne.Position# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Position#type Position struct { 	X float32 // The position from the parent&amp;#39;s left edge 	Y float32 // The position from the parent&amp;#39;s top edge } Position describes a generic X, Y coordinate relative to a parent Canvas or CanvasObject.
func NewPos#func NewPos(x float32, y float32) Position NewPos returns a newly allocated Position representing the specified coordinates.</description>
    </item>
    
    <item>
      <title>fyne.Preferences</title>
      <link>https://darcybook.github.io/docs/api/preferences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/preferences/</guid>
      <description>fyne.Preferences# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Preferences#type Preferences interface { 	// Bool looks up a boolean value for the key 	Bool(key string) bool 	// BoolWithFallback looks up a boolean value and returns the given fallback if not found 	BoolWithFallback(key string, fallback bool) bool 	// SetBool saves a boolean value for the given key 	SetBool(key string, value bool)  	// Float looks up a float64 value for the key 	Float(key string) float64 	// FloatWithFallback looks up a float64 value and returns the given fallback if not found 	FloatWithFallback(key string, fallback float64) float64 	// SetFloat saves a float64 value for the given key 	SetFloat(key string, value float64)  	// Int looks up an integer value for the key 	Int(key string) int 	// IntWithFallback looks up an integer value and returns the given fallback if not found 	IntWithFallback(key string, fallback int) int 	// SetInt saves an integer value for the given key 	SetInt(key string, value int)  	// String looks up a string value for the key 	String(key string) string 	// StringWithFallback looks up a string value and returns the given fallback if not found 	StringWithFallback(key, fallback string) string 	// SetString saves a string value for the given key 	SetString(key string, value string)  	// RemoveValue removes a value for the given key (not currently supported on iOS) 	RemoveValue(key string)  	// AddChangeListener allows code to be notified when some preferences change.</description>
    </item>
    
    <item>
      <title>fyne.Resource</title>
      <link>https://darcybook.github.io/docs/api/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/resource/</guid>
      <description>fyne.Resource# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Resource#type Resource interface { 	Name() string 	Content() []byte } Resource represents a single binary resource, such as an image or font. A resource has an identifying name and byte array content. The serialised path of a resource can be obtained which may result in a blocking filesystem write operation.
func LoadResourceFromPath#func LoadResourceFromPath(path string) (Resource, error) LoadResourceFromPath creates a new StaticResource in memory using the contents of the specified file.</description>
    </item>
    
    <item>
      <title>fyne.Scrollable</title>
      <link>https://darcybook.github.io/docs/api/scrollable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/scrollable/</guid>
      <description>fyne.Scrollable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Scrollable#type Scrollable interface { 	Scrolled(*ScrollEvent) } Scrollable describes any CanvasObject that can also be scrolled. This is mostly used to implement the widget.ScrollContainer.</description>
    </item>
    
    <item>
      <title>fyne.ScrollEvent</title>
      <link>https://darcybook.github.io/docs/api/scrollevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/scrollevent/</guid>
      <description>fyne.ScrollEvent# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ScrollEvent#type ScrollEvent struct { 	PointEvent 	Scrolled Delta } ScrollEvent defines the parameters of a pointer or other scroll event. The DeltaX and DeltaY represent how large the scroll was in two dimensions.</description>
    </item>
    
    <item>
      <title>fyne.SecondaryTappable</title>
      <link>https://darcybook.github.io/docs/api/secondarytappable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/secondarytappable/</guid>
      <description>fyne.SecondaryTappable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type SecondaryTappable#type SecondaryTappable interface { 	TappedSecondary(*PointEvent) } SecondaryTappable describes a CanvasObject that can be right-clicked or long-tapped.</description>
    </item>
    
    <item>
      <title>fyne.Settings</title>
      <link>https://darcybook.github.io/docs/api/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/settings/</guid>
      <description>fyne.Settings# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Settings#type Settings interface { 	Theme() Theme 	SetTheme(Theme) 	// ThemeVariant defines which preferred version of a theme should be used (i.e. light or dark) 	// 	// Since: 2.0 	ThemeVariant() ThemeVariant 	Scale() float32 	// PrimaryColor indicates a user preference for a named primary color 	// 	// Since: 1.4 	PrimaryColor() string  	AddChangeListener(chan Settings) 	BuildType() BuildType } Settings describes the application configuration available.</description>
    </item>
    
    <item>
      <title>fyne.Shortcut</title>
      <link>https://darcybook.github.io/docs/api/shortcut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/shortcut/</guid>
      <description>fyne.Shortcut# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Shortcut#type Shortcut interface { 	ShortcutName() string } Shortcut is the interface used to describe a shortcut action</description>
    </item>
    
    <item>
      <title>fyne.Shortcutable</title>
      <link>https://darcybook.github.io/docs/api/shortcutable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/shortcutable/</guid>
      <description>fyne.Shortcutable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Shortcutable#type Shortcutable interface { 	TypedShortcut(Shortcut) } Shortcutable describes any CanvasObject that can respond to shortcut commands (quit, cut, copy, and paste).</description>
    </item>
    
    <item>
      <title>fyne.ShortcutCopy</title>
      <link>https://darcybook.github.io/docs/api/shortcutcopy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/shortcutcopy/</guid>
      <description>fyne.ShortcutCopy# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ShortcutCopy#type ShortcutCopy struct { 	Clipboard Clipboard } ShortcutCopy describes a shortcut copy action.
func (*ShortcutCopy) ShortcutName#func (se *ShortcutCopy) ShortcutName() string ShortcutName returns the shortcut name</description>
    </item>
    
    <item>
      <title>fyne.ShortcutCut</title>
      <link>https://darcybook.github.io/docs/api/shortcutcut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/shortcutcut/</guid>
      <description>fyne.ShortcutCut# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ShortcutCut#type ShortcutCut struct { 	Clipboard Clipboard } ShortcutCut describes a shortcut cut action.
func (*ShortcutCut) ShortcutName#func (se *ShortcutCut) ShortcutName() string ShortcutName returns the shortcut name</description>
    </item>
    
    <item>
      <title>fyne.ShortcutHandler</title>
      <link>https://darcybook.github.io/docs/api/shortcuthandler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/shortcuthandler/</guid>
      <description>fyne.ShortcutHandler# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ShortcutHandler#type ShortcutHandler struct { } ShortcutHandler is a default implementation of the shortcut handler for the canvasObject
func (*ShortcutHandler) AddShortcut#func (sh *ShortcutHandler) AddShortcut(shortcut Shortcut, handler func(shortcut Shortcut)) AddShortcut register an handler to be executed when the shortcut action is triggered
func (*ShortcutHandler) RemoveShortcut#func (sh *ShortcutHandler) RemoveShortcut(shortcut Shortcut) RemoveShortcut removes a registered shortcut</description>
    </item>
    
    <item>
      <title>fyne.ShortcutPaste</title>
      <link>https://darcybook.github.io/docs/api/shortcutpaste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/shortcutpaste/</guid>
      <description>fyne.ShortcutPaste# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ShortcutPaste#type ShortcutPaste struct { 	Clipboard Clipboard } ShortcutPaste describes a shortcut paste action.
func (*ShortcutPaste) ShortcutName#func (se *ShortcutPaste) ShortcutName() string ShortcutName returns the shortcut name</description>
    </item>
    
    <item>
      <title>fyne.ShortcutSelectAll</title>
      <link>https://darcybook.github.io/docs/api/shortcutselectall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/shortcutselectall/</guid>
      <description>fyne.ShortcutSelectAll# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ShortcutSelectAll#type ShortcutSelectAll struct{} ShortcutSelectAll describes a shortcut selectAll action.
func (*ShortcutSelectAll) ShortcutName#func (se *ShortcutSelectAll) ShortcutName() string ShortcutName returns the shortcut name</description>
    </item>
    
    <item>
      <title>fyne.Size</title>
      <link>https://darcybook.github.io/docs/api/size/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/size/</guid>
      <description>fyne.Size# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Size#type Size struct { 	Width float32 // The number of units along the X axis. 	Height float32 // The number of units along the Y axis. } Size describes something with width and height.
func MeasureText#func MeasureText(text string, size float32, style TextStyle) Size MeasureText uses the current driver to calculate the size of text when rendered.</description>
    </item>
    
    <item>
      <title>fyne.StaticResource</title>
      <link>https://darcybook.github.io/docs/api/staticresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/staticresource/</guid>
      <description>fyne.StaticResource# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type StaticResource#type StaticResource struct { 	StaticName string 	StaticContent []byte } StaticResource is a bundled resource compiled into the application. These resources are normally generated by the fyne_bundle command included in the Fyne toolkit.
func NewStaticResource#func NewStaticResource(name string, content []byte) *StaticResource NewStaticResource returns a new static resource object with the specified name and content. Creating a new static resource in memory results in sharable binary data that may be serialised to the location returned by CachePath().</description>
    </item>
    
    <item>
      <title>fyne.Storage</title>
      <link>https://darcybook.github.io/docs/api/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/</guid>
      <description>fyne.Storage# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Storage#type Storage interface { 	RootURI() URI  	Create(name string) (URIWriteCloser, error) 	Open(name string) (URIReadCloser, error) 	Save(name string) (URIWriteCloser, error) 	Remove(name string) error  	List() []string } Storage is used to manage file storage inside an application sandbox. The files managed by this interface are unique to the current application.</description>
    </item>
    
    <item>
      <title>fyne.StringValidator</title>
      <link>https://darcybook.github.io/docs/api/stringvalidator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/stringvalidator/</guid>
      <description>fyne.StringValidator# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type StringValidator#type StringValidator func(string) error StringValidator is a function signature for validating string inputs.
Since: 1.4</description>
    </item>
    
    <item>
      <title>fyne.Tabbable</title>
      <link>https://darcybook.github.io/docs/api/tabbable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/tabbable/</guid>
      <description>fyne.Tabbable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Tabbable#type Tabbable interface { 	// AcceptsTab() is a hook called by the key press handling logic. 	// If it returns true then the Tab key events will be sent using TypedKey. 	AcceptsTab() bool } Tabbable describes any object that needs to accept the Tab key presses.
Since: 2.1</description>
    </item>
    
    <item>
      <title>fyne.Tappable</title>
      <link>https://darcybook.github.io/docs/api/tappable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/tappable/</guid>
      <description>fyne.Tappable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Tappable#type Tappable interface { 	Tapped(*PointEvent) } Tappable describes any CanvasObject that can also be tapped. This should be implemented by buttons etc that wish to handle pointer interactions.</description>
    </item>
    
    <item>
      <title>fyne.TextAlign</title>
      <link>https://darcybook.github.io/docs/api/textalign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/textalign/</guid>
      <description>fyne.TextAlign# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type TextAlign#type TextAlign int TextAlign represents the horizontal alignment of text within a widget or canvas object.
const ( 	// TextAlignLeading specifies a left alignment for left-to-right languages. 	TextAlignLeading TextAlign = iota 	// TextAlignCenter places the text centrally within the available space. 	TextAlignCenter 	// TextAlignTrailing will align the text right for a left-to-right language.</description>
    </item>
    
    <item>
      <title>fyne.TextStyle</title>
      <link>https://darcybook.github.io/docs/api/textstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/textstyle/</guid>
      <description>fyne.TextStyle# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type TextStyle#type TextStyle struct { 	Bold bool // Should text be bold 	Italic bool // Should text be italic 	Monospace bool // Use the system monospace font instead of regular  	// Since: 2.1 	TabWidth int // Width of tabs in spaces } TextStyle represents the styles that can be applied to a text canvas object or text based widget.</description>
    </item>
    
    <item>
      <title>fyne.TextWrap</title>
      <link>https://darcybook.github.io/docs/api/textwrap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/textwrap/</guid>
      <description>fyne.TextWrap# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type TextWrap#type TextWrap int TextWrap represents how text longer than the widget&amp;rsquo;s width will be wrapped.
const ( 	// TextWrapOff extends the widget&amp;#39;s width to fit the text, no wrapping is applied. 	TextWrapOff TextWrap = iota 	// TextTruncate trims the text to the widget&amp;#39;s width, no wrapping is applied. 	// If an entry is asked to truncate it will provide scrolling capabilities.</description>
    </item>
    
    <item>
      <title>fyne.Theme</title>
      <link>https://darcybook.github.io/docs/api/theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/theme/</guid>
      <description>fyne.Theme# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Theme#type Theme interface { 	Color(ThemeColorName, ThemeVariant) color.Color 	Font(TextStyle) Resource 	Icon(ThemeIconName) Resource 	Size(ThemeSizeName) float32 } Theme defines the method to look up colors, sizes and fonts that make up a Fyne theme.
Since: 2.0</description>
    </item>
    
    <item>
      <title>fyne.ThemeColorName</title>
      <link>https://darcybook.github.io/docs/api/themecolorname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/themecolorname/</guid>
      <description>fyne.ThemeColorName# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ThemeColorName#type ThemeColorName string ThemeColorName is used to look up a colour based on its name.
Since: 2.0</description>
    </item>
    
    <item>
      <title>fyne.ThemeIconName</title>
      <link>https://darcybook.github.io/docs/api/themeiconname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/themeiconname/</guid>
      <description>fyne.ThemeIconName# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ThemeIconName#type ThemeIconName string ThemeIconName is used to look up an icon based on its name.
Since: 2.0</description>
    </item>
    
    <item>
      <title>fyne.ThemeSizeName</title>
      <link>https://darcybook.github.io/docs/api/themesizename/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/themesizename/</guid>
      <description>fyne.ThemeSizeName# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ThemeSizeName#type ThemeSizeName string ThemeSizeName is used to look up a size based on its name.
Since: 2.0</description>
    </item>
    
    <item>
      <title>fyne.ThemeVariant</title>
      <link>https://darcybook.github.io/docs/api/themevariant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/themevariant/</guid>
      <description>fyne.ThemeVariant# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ThemeVariant#type ThemeVariant uint ThemeVariant indicates a variation of a theme, such as light or dark.
Since: 2.0</description>
    </item>
    
    <item>
      <title>fyne.URI</title>
      <link>https://darcybook.github.io/docs/api/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/uri/</guid>
      <description>fyne.URI# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type URI#type URI interface { 	fmt.Stringer  	// Extension should return the file extension of the resource 	// referenced by the URI. For example, the Extension() of 	// &amp;#39;file://foo/bar.baz&amp;#39; is &amp;#39;baz&amp;#39;. May return an empty string if the 	// referenced resource has none. 	Extension() string  	// Name should return the base name of the item referenced by the URI.</description>
    </item>
    
    <item>
      <title>fyne.URIReadCloser</title>
      <link>https://darcybook.github.io/docs/api/urireadcloser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/urireadcloser/</guid>
      <description>fyne.URIReadCloser# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type URIReadCloser#type URIReadCloser interface { 	io.ReadCloser  	URI() URI } URIReadCloser represents a cross platform data stream from a file or provider of data. It may refer to an item on a filesystem or data in another application that we have access to.</description>
    </item>
    
    <item>
      <title>fyne.URIWriteCloser</title>
      <link>https://darcybook.github.io/docs/api/uriwritecloser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/uriwritecloser/</guid>
      <description>fyne.URIWriteCloser# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type URIWriteCloser#type URIWriteCloser interface { 	io.WriteCloser  	URI() URI } URIWriteCloser represents a cross platform data writer for a file resource. This will normally refer to a local file resource.</description>
    </item>
    
    <item>
      <title>fyne.Validatable</title>
      <link>https://darcybook.github.io/docs/api/validatable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/validatable/</guid>
      <description>fyne.Validatable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Validatable#type Validatable interface { 	Validate() error  	// SetOnValidationChanged is used to set the callback that will be triggered when the validation state changes. 	// The function might be overwritten by a parent that cares about child validation (e.g. widget.Form). 	SetOnValidationChanged(func(error)) } Validatable is an interface for specifying if a widget is validatable.</description>
    </item>
    
    <item>
      <title>fyne.Vector2</title>
      <link>https://darcybook.github.io/docs/api/vector2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/vector2/</guid>
      <description>fyne.Vector2# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Vector2#type Vector2 interface { 	Components() (float32, float32) 	IsZero() bool } Vector2 marks geometry types that can operate as a coordinate vector.</description>
    </item>
    
    <item>
      <title>fyne.Widget</title>
      <link>https://darcybook.github.io/docs/api/widget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/</guid>
      <description>fyne.Widget# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Widget#type Widget interface { 	CanvasObject  	// CreateRenderer returns a new WidgetRenderer for this widget. 	// This should not be called by regular code, it is used internally to render a widget. 	CreateRenderer() WidgetRenderer } Widget defines the standard behaviours of any widget. This extends the CanvasObject - a widget behaves in the same basic way but will encapsulate many child objects to create the rendered widget.</description>
    </item>
    
    <item>
      <title>fyne.WidgetRenderer</title>
      <link>https://darcybook.github.io/docs/api/widgetrenderer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widgetrenderer/</guid>
      <description>fyne.WidgetRenderer# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type WidgetRenderer#type WidgetRenderer interface { 	// Destroy is for internal use. 	Destroy() 	// Layout is a hook that is called if the widget needs to be laid out. 	// This should never call Refresh. 	Layout(Size) 	// MinSize returns the minimum size of the widget that is rendered by this renderer. 	MinSize() Size 	// Objects returns all objects that should be drawn.</description>
    </item>
    
    <item>
      <title>fyne.Window</title>
      <link>https://darcybook.github.io/docs/api/window/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/window/</guid>
      <description>fyne.Window# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Window#type Window interface { 	// Title returns the current window title. 	// This is typically displayed in the window decorations. 	Title() string 	// SetTitle updates the current title of the window. 	SetTitle(string)  	// FullScreen returns whether or not this window is currently full screen. 	FullScreen() bool 	// SetFullScreen changes the requested fullScreen property 	// true for a fullScreen window and false to unset this.</description>
    </item>
    
    <item>
      <title>layout</title>
      <link>https://darcybook.github.io/docs/api/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/layout/</guid>
      <description>layout# import &amp;#34;fyne.io/fyne/v2/layout&amp;#34; Package layout defines the various layouts available to Fyne apps
Usage#func NewAdaptiveGridLayout#func NewAdaptiveGridLayout(rowcols int) fyne.Layout NewAdaptiveGridLayout returns a new grid layout which uses columns when horizontal but rows when vertical.
func NewBorderLayout#func NewBorderLayout(top, bottom, left, right fyne.CanvasObject) fyne.Layout NewBorderLayout creates a new BorderLayout instance with top, bottom, left and right objects set. All other items in the container will fill the centre space</description>
    </item>
    
    <item>
      <title>layout.Spacer</title>
      <link>https://darcybook.github.io/docs/api/layout/spacer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/layout/spacer/</guid>
      <description>layout.Spacer# import &amp;#34;fyne.io/fyne/v2/layout&amp;#34; Usage#type Spacer#type Spacer struct { 	FixHorizontal bool 	FixVertical bool } Spacer is any simple object that can be used in a box layout to space out child objects
func (*Spacer) ExpandHorizontal#func (s *Spacer) ExpandHorizontal() bool ExpandHorizontal returns whether or not this spacer expands on the horizontal axis
func (*Spacer) ExpandVertical#func (s *Spacer) ExpandVertical() bool ExpandVertical returns whether or not this spacer expands on the vertical axis</description>
    </item>
    
    <item>
      <title>layout.SpacerObject</title>
      <link>https://darcybook.github.io/docs/api/layout/spacerobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/layout/spacerobject/</guid>
      <description>layout.SpacerObject# import &amp;#34;fyne.io/fyne/v2/layout&amp;#34; Usage#type SpacerObject#type SpacerObject interface { 	ExpandVertical() bool 	ExpandHorizontal() bool } SpacerObject is any object that can be used to space out child objects</description>
    </item>
    
    <item>
      <title>mobile</title>
      <link>https://darcybook.github.io/docs/api/driver/mobile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/mobile/</guid>
      <description>mobile# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Package mobile provides mobile specific driver functionality.
Usage#types# Device KeyboardType Keyboardable TouchEvent Touchable  </description>
    </item>
    
    <item>
      <title>mobile.Device</title>
      <link>https://darcybook.github.io/docs/api/driver/mobile/device/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/mobile/device/</guid>
      <description>mobile.Device# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Usage#type Device#type Device interface { 	// Request that the mobile device show the touch screen keyboard (standard layout) 	ShowVirtualKeyboard() 	// Request that the mobile device show the touch screen keyboard (custom layout) 	ShowVirtualKeyboardType(KeyboardType) 	// Request that the mobile device dismiss the touch screen keyboard 	HideVirtualKeyboard() } Device describes functionality only available on mobile</description>
    </item>
    
    <item>
      <title>mobile.Keyboardable</title>
      <link>https://darcybook.github.io/docs/api/driver/mobile/keyboardable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/mobile/keyboardable/</guid>
      <description>mobile.Keyboardable# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Usage#type Keyboardable#type Keyboardable interface { 	fyne.Focusable  	Keyboard() KeyboardType } Keyboardable describes any CanvasObject that needs a keyboard</description>
    </item>
    
    <item>
      <title>mobile.KeyboardType</title>
      <link>https://darcybook.github.io/docs/api/driver/mobile/keyboardtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/mobile/keyboardtype/</guid>
      <description>mobile.KeyboardType# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Usage#type KeyboardType#type KeyboardType int32 KeyboardType represents a type of virtual keyboard
const ( 	// DefaultKeyboard is the keyboard with default input style and &amp;#34;return&amp;#34; return key 	DefaultKeyboard KeyboardType = iota 	// SingleLineKeyboard is the keyboard with default input style and &amp;#34;Done&amp;#34; return key 	SingleLineKeyboard 	// NumberKeyboard is the keyboard with number input style and &amp;#34;Done&amp;#34; return key 	NumberKeyboard 	// PasswordKeyboard is used to ensure that text is not leaked to 3rd party keyboard providers 	PasswordKeyboard ) </description>
    </item>
    
    <item>
      <title>mobile.Touchable</title>
      <link>https://darcybook.github.io/docs/api/driver/mobile/touchable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/mobile/touchable/</guid>
      <description>mobile.Touchable# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Usage#type Touchable#type Touchable interface { 	TouchDown(*TouchEvent) 	TouchUp(*TouchEvent) 	TouchCancel(*TouchEvent) } Touchable represents mobile touch events that can be sent to CanvasObjects</description>
    </item>
    
    <item>
      <title>mobile.TouchEvent</title>
      <link>https://darcybook.github.io/docs/api/driver/mobile/touchevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/mobile/touchevent/</guid>
      <description>mobile.TouchEvent# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Usage#type TouchEvent#type TouchEvent struct { 	fyne.PointEvent } TouchEvent contains data relating to mobile touch events</description>
    </item>
    
    <item>
      <title>repository.CopyableRepository&#34;</title>
      <link>https://darcybook.github.io/docs/api/storage/repository/copyablerepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/repository/copyablerepository/</guid>
      <description>repository.CopyableRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type CopyableRepository#type CopyableRepository interface { 	Repository  	// Copy will be used to implement calls to storage.Copy() for the 	// registered scheme of this repository. 	// 	// A generic implementation is provided by GenericCopy(). 	// 	// NOTE: the first parameter is the source, the second is the 	// destination. 	// 	// NOTE: if storage.</description>
    </item>
    
    <item>
      <title>repository.CustomURIRepository&#34;</title>
      <link>https://darcybook.github.io/docs/api/storage/repository/customurirepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/repository/customurirepository/</guid>
      <description>repository.CustomURIRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type CustomURIRepository#type CustomURIRepository interface { 	Repository  	// ParseURI will be used to implement calls to storage.ParseURI() 	// for the registered scheme of this repository. 	ParseURI(string) (fyne.URI, error) } CustomURIRepository is an extension of the repository interface which allows the behavior of storage.ParseURI to be overridden. This is only needed if you wish to generate custom URI types, rather than using Fyne&amp;rsquo;s URI implementation and net/url based parsing.</description>
    </item>
    
    <item>
      <title>repository.HierarchicalRepository&#34;</title>
      <link>https://darcybook.github.io/docs/api/storage/repository/hierarchicalrepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/repository/hierarchicalrepository/</guid>
      <description>repository.HierarchicalRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type HierarchicalRepository#type HierarchicalRepository interface { 	Repository  	// Parent will be used to implement calls to storage.Parent() for the 	// registered scheme of this repository. 	// 	// A generic implementation is provided in GenericParent(), which 	// is based on the RFC3986 definition of a URI parent. 	// 	// Since: 2.0 	Parent(fyne.</description>
    </item>
    
    <item>
      <title>repository.ListableRepository&#34;</title>
      <link>https://darcybook.github.io/docs/api/storage/repository/listablerepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/repository/listablerepository/</guid>
      <description>repository.ListableRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type ListableRepository#type ListableRepository interface { 	Repository  	// CanList will be used to implement calls to storage.Listable() for 	// the registered scheme of this repository. 	// 	// Since: 2.0 	CanList(u fyne.URI) (bool, error)  	// List will be used to implement calls to storage.List() for the 	// registered scheme of this repository.</description>
    </item>
    
    <item>
      <title>repository.MovableRepository&#34;</title>
      <link>https://darcybook.github.io/docs/api/storage/repository/movablerepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/repository/movablerepository/</guid>
      <description>repository.MovableRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type MovableRepository#type MovableRepository interface { 	Repository  	// Move will be used to implement calls to storage.Move() for the 	// registered scheme of this repository. 	// 	// A generic implementation is provided by GenericMove(). 	// 	// NOTE: the first parameter is the source, the second is the 	// destination. 	// 	// NOTE: if storage.</description>
    </item>
    
    <item>
      <title>repository.Repository&#34;</title>
      <link>https://darcybook.github.io/docs/api/storage/repository/repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/repository/repository/</guid>
      <description>repository.Repository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type Repository#type Repository interface {  	// Exists will be used to implement calls to storage.Exists() for the 	// registered scheme of this repository. 	// 	// Since: 2.0 	Exists(u fyne.URI) (bool, error)  	// Reader will be used to implement calls to storage.Reader() 	// for the registered scheme of this repository. 	// 	// Since: 2.</description>
    </item>
    
    <item>
      <title>repository.WritableRepository&#34;</title>
      <link>https://darcybook.github.io/docs/api/storage/repository/writablerepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/repository/writablerepository/</guid>
      <description>repository.WritableRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type WritableRepository#type WritableRepository interface { 	Repository  	// Writer will be used to implement calls to storage.WriterTo() for 	// the registered scheme of this repository. 	// 	// Since: 2.0 	Writer(u fyne.URI) (fyne.URIWriteCloser, error)  	// CanWrite will be used to implement calls to storage.CanWrite() for 	// the registered scheme of this repository.</description>
    </item>
    
    <item>
      <title>repository&#34;</title>
      <link>https://darcybook.github.io/docs/api/storage/repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/repository/</guid>
      <description>repository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#var ( 	// ErrOperationNotSupported may be thrown by certain functions in the storage 	// or repository packages which operate on URIs if an operation is attempted 	// that is not supported for the scheme relevant to the URI, normally because 	// the underlying repository has either not implemented the relevant function, 	// or has explicitly returned this error.</description>
    </item>
    
    <item>
      <title>software</title>
      <link>https://darcybook.github.io/docs/api/driver/software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/driver/software/</guid>
      <description>software# import &amp;#34;fyne.io/fyne/v2/driver/software&amp;#34; Usage#func NewCanvas#func NewCanvas() test.WindowlessCanvas NewCanvas creates a new canvas in memory that can render without hardware support
func Render#func Render(obj fyne.CanvasObject, t fyne.Theme) image.Image Render takes a canvas object and renders it to a regular Go image using the provided Theme. The returned image will be set to the object&amp;rsquo;s minimum size. Use the theme.LightTheme() or theme.</description>
    </item>
    
    <item>
      <title>storage</title>
      <link>https://darcybook.github.io/docs/api/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/</guid>
      <description>storage# import &amp;#34;fyne.io/fyne/v2/storage&amp;#34; Package storage provides storage access and management functionality.
Usage#var URIRootError = repository.ErrURIRoot URIRootError is a wrapper for repository.URIRootError
Deprecated - use repository.ErrURIRoot instead
func CanList#func CanList(u fyne.URI) (bool, error) CanList will determine if the URI is listable or not.
This method may fail in several ways:
 Different permissions or credentials are required to check if the   URI supports listing.</description>
    </item>
    
    <item>
      <title>storage.ExtensionFileFilter</title>
      <link>https://darcybook.github.io/docs/api/storage/extensionfilefilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/extensionfilefilter/</guid>
      <description>storage.ExtensionFileFilter# import &amp;#34;fyne.io/fyne/v2/storage&amp;#34; Usage#type ExtensionFileFilter#type ExtensionFileFilter struct { 	Extensions []string } ExtensionFileFilter represents a file filter based on the the ending of file names, for example &amp;ldquo;.txt&amp;rdquo; and &amp;ldquo;.png&amp;rdquo;.
func (*ExtensionFileFilter) Matches#func (e *ExtensionFileFilter) Matches(uri fyne.URI) bool Matches returns true if a file URI has one of the filtered extensions.</description>
    </item>
    
    <item>
      <title>storage.FileFilter</title>
      <link>https://darcybook.github.io/docs/api/storage/filefilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/filefilter/</guid>
      <description>storage.FileFilter# import &amp;#34;fyne.io/fyne/v2/storage&amp;#34; Usage#type FileFilter#type FileFilter interface { 	Matches(fyne.URI) bool } FileFilter is an interface that can be implemented to provide a filter to a file dialog.
func NewExtensionFileFilter#func NewExtensionFileFilter(extensions []string) FileFilter NewExtensionFileFilter takes a string slice of extensions with a leading . and creates a filter for the file dialog. Example: .jpg, .mp3, .txt, .sh
func NewMimeTypeFileFilter#func NewMimeTypeFileFilter(mimeTypes []string) FileFilter NewMimeTypeFileFilter takes a string slice of mimetypes, including globs, and creates a filter for the file dialog.</description>
    </item>
    
    <item>
      <title>storage.MimeTypeFileFilter</title>
      <link>https://darcybook.github.io/docs/api/storage/mimetypefilefilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/storage/mimetypefilefilter/</guid>
      <description>storage.MimeTypeFileFilter# import &amp;#34;fyne.io/fyne/v2/storage&amp;#34; Usage#type MimeTypeFileFilter#type MimeTypeFileFilter struct { 	MimeTypes []string } MimeTypeFileFilter represents a file filter based on the files mime type, for example &amp;ldquo;image/*&amp;rdquo;, &amp;ldquo;audio/mp3&amp;rdquo;.
func (*MimeTypeFileFilter) Matches#func (mt *MimeTypeFileFilter) Matches(uri fyne.URI) bool Matches returns true if a file URI has one of the filtered mimetypes.</description>
    </item>
    
    <item>
      <title>test</title>
      <link>https://darcybook.github.io/docs/api/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/test/</guid>
      <description>test# import &amp;#34;fyne.io/fyne/v2/test&amp;#34; Package test provides utility drivers for running UI tests without rendering
Usage#func ApplyTheme#func ApplyTheme(t *testing.T, theme fyne.Theme) ApplyTheme sets the given theme and waits for it to be applied to the current app.
func AssertCanvasTappableAt#func AssertCanvasTappableAt(t *testing.T, c fyne.Canvas, pos fyne.Position) bool AssertCanvasTappableAt asserts that the canvas is tappable at the given position.
func AssertImageMatches#func AssertImageMatches(t *testing.</description>
    </item>
    
    <item>
      <title>test.SoftwarePainter</title>
      <link>https://darcybook.github.io/docs/api/test/softwarepainter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/test/softwarepainter/</guid>
      <description>test.SoftwarePainter# import &amp;#34;fyne.io/fyne/v2/test&amp;#34; Usage#type SoftwarePainter#type SoftwarePainter interface { 	Paint(fyne.Canvas) image.Image } SoftwarePainter describes a simple type that can render canvases</description>
    </item>
    
    <item>
      <title>test.WindowlessCanvas</title>
      <link>https://darcybook.github.io/docs/api/test/windowlesscanvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/test/windowlesscanvas/</guid>
      <description>test.WindowlessCanvas# import &amp;#34;fyne.io/fyne/v2/test&amp;#34; Usage#type WindowlessCanvas#type WindowlessCanvas interface { 	fyne.Canvas  	Padded() bool 	Resize(fyne.Size) 	SetPadded(bool) 	SetScale(float32) } WindowlessCanvas provides functionality for a canvas to operate without a window
func NewCanvas#func NewCanvas() WindowlessCanvas NewCanvas returns a single use in-memory canvas used for testing
func NewCanvasWithPainter#func NewCanvasWithPainter(painter SoftwarePainter) WindowlessCanvas NewCanvasWithPainter allows creation of an in-memory canvas with a specific painter.</description>
    </item>
    
    <item>
      <title>theme</title>
      <link>https://darcybook.github.io/docs/api/theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/theme/</guid>
      <description>theme# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Package theme defines how a Fyne app should look when rendered
Usage#const ( 	// IconNameCancel is the name of theme lookup for cancel icon. 	// 	// Since: 2.0 	IconNameCancel fyne.ThemeIconName = &amp;#34;cancel&amp;#34;  	// IconNameConfirm is the name of theme lookup for confirm icon. 	// 	// Since: 2.0 	IconNameConfirm fyne.ThemeIconName = &amp;#34;confirm&amp;#34;  	// IconNameDelete is the name of theme lookup for delete icon.</description>
    </item>
    
    <item>
      <title>theme.DisabledResource</title>
      <link>https://darcybook.github.io/docs/api/theme/disabledresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/theme/disabledresource/</guid>
      <description>theme.DisabledResource# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Usage#type DisabledResource#type DisabledResource struct { } DisabledResource is a resource wrapper that will return an appropriate resource colorized by the current theme&amp;rsquo;s DisabledIconColor color.
func NewDisabledResource#func NewDisabledResource(res fyne.Resource) *DisabledResource NewDisabledResource creates a resource that adapts to the current theme&amp;rsquo;s DisabledIconColor setting.
func (*DisabledResource) Content#func (res *DisabledResource) Content() []byte Content returns the disabled style content of the correct resource for the current theme</description>
    </item>
    
    <item>
      <title>theme.ErrorThemedResource</title>
      <link>https://darcybook.github.io/docs/api/theme/errorthemedresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/theme/errorthemedresource/</guid>
      <description>theme.ErrorThemedResource# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Usage#type ErrorThemedResource#type ErrorThemedResource struct { } ErrorThemedResource is a resource wrapper that will return a version of the resource with the main color changed to indicate an error.
func NewErrorThemedResource#func NewErrorThemedResource(orig fyne.Resource) *ErrorThemedResource NewErrorThemedResource creates a resource that adapts to the error color for the current theme.
func (*ErrorThemedResource) Content#func (res *ErrorThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current background color.</description>
    </item>
    
    <item>
      <title>theme.InvertedThemedResource</title>
      <link>https://darcybook.github.io/docs/api/theme/invertedthemedresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/theme/invertedthemedresource/</guid>
      <description>theme.InvertedThemedResource# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Usage#type InvertedThemedResource#type InvertedThemedResource struct { } InvertedThemedResource is a resource wrapper that will return a version of the resource with the main color changed for use over highlighted elements.
func NewInvertedThemedResource#func NewInvertedThemedResource(orig fyne.Resource) *InvertedThemedResource NewInvertedThemedResource creates a resource that adapts to the current theme for use over highlighted elements.
func (*InvertedThemedResource) Content#func (res *InvertedThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current background color.</description>
    </item>
    
    <item>
      <title>theme.PrimaryThemedResource</title>
      <link>https://darcybook.github.io/docs/api/theme/primarythemedresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/theme/primarythemedresource/</guid>
      <description>theme.PrimaryThemedResource# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Usage#type PrimaryThemedResource#type PrimaryThemedResource struct { } PrimaryThemedResource is a resource wrapper that will return a version of the resource with the main color changed to the theme primary color.
func NewPrimaryThemedResource#func NewPrimaryThemedResource(orig fyne.Resource) *PrimaryThemedResource NewPrimaryThemedResource creates a resource that adapts to the primary color for the current theme.
func (*PrimaryThemedResource) Content#func (res *PrimaryThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current background color.</description>
    </item>
    
    <item>
      <title>theme.ThemedResource</title>
      <link>https://darcybook.github.io/docs/api/theme/themedresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/theme/themedresource/</guid>
      <description>theme.ThemedResource# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Usage#type ThemedResource#type ThemedResource struct { } ThemedResource is a resource wrapper that will return a version of the resource with the main color changed for the currently selected theme.
func NewThemedResource#func NewThemedResource(src fyne.Resource) *ThemedResource NewThemedResource creates a resource that adapts to the current theme setting.
func (*ThemedResource) Content#func (res *ThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current text color.</description>
    </item>
    
    <item>
      <title>Upgrading to v2.1</title>
      <link>https://darcybook.github.io/docs/api/upgrading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/upgrading/</guid>
      <description>The 2.1 release is fully backward compatible with 2.0.4 and earlier, so upgrading is as simple as updating the version of code you compile with. This is different depending on whether or not you use go modules.
Modules#If your project has a go.mod file then you can edit the require line to use version v2.1.0, or you can execute the following command inside the directory:
go get fyne.</description>
    </item>
    
    <item>
      <title>validation</title>
      <link>https://darcybook.github.io/docs/api/data/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/data/validation/</guid>
      <description>validation# import &amp;#34;fyne.io/fyne/v2/data/validation&amp;#34; Package validation provides validation for data inside widgets
Usage#func NewRegexp#func NewRegexp(regexpstr, reason string) fyne.StringValidator NewRegexp creates a new validator that uses regular expression parsing. The validator will return nil if valid, otherwise returns an error with a reason text.
Since: 1.4func NewTime#func NewTime(format string) fyne.StringValidator NewTime creates a new validator that verifies times using time.</description>
    </item>
    
    <item>
      <title>widget</title>
      <link>https://darcybook.github.io/docs/api/widget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/</guid>
      <description>widget# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Package widget defines the UI widgets within the Fyne toolkit
Usage#var ( 	// RichTextStyleBlockquote represents a quote presented in an indented block. 	// 	// Since: 2.1 	RichTextStyleBlockquote = RichTextStyle{ 	ColorName: theme.ColorNameForeground, 	Inline: false, 	SizeName: theme.SizeNameText, 	TextStyle: fyne.TextStyle{Italic: true}, 	} 	// RichTextStyleCodeBlock represents a code blog segment. 	// 	// Since: 2.</description>
    </item>
    
    <item>
      <title>widget.Accordion</title>
      <link>https://darcybook.github.io/docs/api/widget/accordion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/accordion/</guid>
      <description>widget.Accordion# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Accordion#type Accordion struct { 	BaseWidget 	Items []*AccordionItem 	MultiOpen bool } Accordion displays a list of AccordionItems. Each item is represented by a button that reveals a detailed view when tapped.
func NewAccordion#func NewAccordion(items ...*AccordionItem) *Accordion NewAccordion creates a new accordion widget.
func (*Accordion) Append#func (a *Accordion) Append(item *AccordionItem) Append adds the given item to this Accordion.</description>
    </item>
    
    <item>
      <title>widget.AccordionItem</title>
      <link>https://darcybook.github.io/docs/api/widget/accordionitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/accordionitem/</guid>
      <description>widget.AccordionItem# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type AccordionItem#type AccordionItem struct { 	Title string 	Detail fyne.CanvasObject 	Open bool } AccordionItem represents a single item in an Accordion.
func NewAccordionItem#func NewAccordionItem(title string, detail fyne.CanvasObject) *AccordionItem NewAccordionItem creates a new item for an Accordion.</description>
    </item>
    
    <item>
      <title>widget.BaseWidget</title>
      <link>https://darcybook.github.io/docs/api/widget/basewidget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/basewidget/</guid>
      <description>widget.BaseWidget# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type BaseWidget#type BaseWidget struct { 	Hidden bool } BaseWidget provides a helper that handles basic widget behaviours.
func (*BaseWidget) ExtendBaseWidget#func (w *BaseWidget) ExtendBaseWidget(wid fyne.Widget) ExtendBaseWidget is used by an extending widget to make use of BaseWidget functionality.
func (*BaseWidget) Hide#func (w *BaseWidget) Hide() Hide this widget so it is no longer visible</description>
    </item>
    
    <item>
      <title>widget.Button</title>
      <link>https://darcybook.github.io/docs/api/widget/button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/button/</guid>
      <description>widget.Button# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Button#type Button struct { 	DisableableWidget 	Text string 	Icon fyne.Resource 	// Specify how prominent the button should be, High will highlight the button and Low will remove some decoration. 	// 	// Since: 1.4 	Importance ButtonImportance 	Alignment ButtonAlign 	IconPlacement ButtonIconPlacement  	OnTapped func() `json:&amp;#34;-&amp;#34;` } Button widget has a text label and triggers an event func when clicked</description>
    </item>
    
    <item>
      <title>widget.ButtonAlign</title>
      <link>https://darcybook.github.io/docs/api/widget/buttonalign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/buttonalign/</guid>
      <description>widget.ButtonAlign# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ButtonAlign#type ButtonAlign int ButtonAlign represents the horizontal alignment of a button.
const ( 	// ButtonAlignCenter aligns the icon and the text centrally. 	ButtonAlignCenter ButtonAlign = iota 	// ButtonAlignLeading aligns the icon and the text with the leading edge. 	ButtonAlignLeading 	// ButtonAlignTrailing aligns the icon and the text with the trailing edge. 	ButtonAlignTrailing ) </description>
    </item>
    
    <item>
      <title>widget.ButtonIconPlacement</title>
      <link>https://darcybook.github.io/docs/api/widget/buttoniconplacement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/buttoniconplacement/</guid>
      <description>widget.ButtonIconPlacement# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ButtonIconPlacement#type ButtonIconPlacement int ButtonIconPlacement represents the ordering of icon &amp;amp; text within a button.
const ( 	// ButtonIconLeadingText aligns the icon on the leading edge of the text. 	ButtonIconLeadingText ButtonIconPlacement = iota 	// ButtonIconTrailingText aligns the icon on the trailing edge of the text. 	ButtonIconTrailingText ) </description>
    </item>
    
    <item>
      <title>widget.ButtonImportance</title>
      <link>https://darcybook.github.io/docs/api/widget/buttonimportance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/buttonimportance/</guid>
      <description>widget.ButtonImportance# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ButtonImportance#type ButtonImportance int ButtonImportance represents how prominent the button should appear
Since: 1.4const ( 	// MediumImportance applies a standard appearance. 	MediumImportance ButtonImportance = iota 	// HighImportance applies a prominent appearance. 	HighImportance 	// LowImportance applies a subtle appearance. 	LowImportance ) </description>
    </item>
    
    <item>
      <title>widget.ButtonStyle</title>
      <link>https://darcybook.github.io/docs/api/widget/buttonstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/buttonstyle/</guid>
      <description>widget.ButtonStyle# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ButtonStyle#type ButtonStyle int ButtonStyle determines the behaviour and rendering of a button.</description>
    </item>
    
    <item>
      <title>widget.Card</title>
      <link>https://darcybook.github.io/docs/api/widget/card/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/card/</guid>
      <description>widget.Card# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Card#type Card struct { 	BaseWidget 	Title, Subtitle string 	Image *canvas.Image 	Content fyne.CanvasObject } Card widget groups title, subtitle with content and a header image
Since: 1.4func NewCard#func NewCard(title, subtitle string, content fyne.CanvasObject) *Card NewCard creates a new card widget with the specified title, subtitle and content (all optional).</description>
    </item>
    
    <item>
      <title>widget.Check</title>
      <link>https://darcybook.github.io/docs/api/widget/check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/check/</guid>
      <description>widget.Check# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Check#type Check struct { 	DisableableWidget 	Text string 	Checked bool  	OnChanged func(bool) `json:&amp;#34;-&amp;#34;` } Check widget has a text label and a checked (or unchecked) icon and triggers an event func when toggled
func NewCheck#func NewCheck(label string, changed func(bool)) *Check NewCheck creates a new check widget with the set label and change handler</description>
    </item>
    
    <item>
      <title>widget.CheckGroup</title>
      <link>https://darcybook.github.io/docs/api/widget/checkgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/checkgroup/</guid>
      <description>widget.CheckGroup# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type CheckGroup#type CheckGroup struct { 	DisableableWidget 	Horizontal bool 	Required bool 	OnChanged func([]string) `json:&amp;#34;-&amp;#34;` 	Options []string 	Selected []string } CheckGroup widget has a list of text labels and checkbox icons next to each. Changing the selection (any number can be selected) will trigger the changed func.
Since: 2.1func NewCheckGroup#func NewCheckGroup(options []string, changed func([]string)) *CheckGroup NewCheckGroup creates a new check group widget with the set options and change handler</description>
    </item>
    
    <item>
      <title>widget.CustomTextGridStyle</title>
      <link>https://darcybook.github.io/docs/api/widget/customtextgridstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/customtextgridstyle/</guid>
      <description>widget.CustomTextGridStyle# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type CustomTextGridStyle#type CustomTextGridStyle struct { 	FGColor, BGColor color.Color } CustomTextGridStyle is a utility type for those not wanting to define their own style types.
func (*CustomTextGridStyle) BackgroundColor#func (c *CustomTextGridStyle) BackgroundColor() color.Color BackgroundColor is the color a cell should use for the background.
func (*CustomTextGridStyle) TextColor#func (c *CustomTextGridStyle) TextColor() color.Color TextColor is the color a cell should use for the text.</description>
    </item>
    
    <item>
      <title>widget.DisableableWidget</title>
      <link>https://darcybook.github.io/docs/api/widget/disableablewidget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/disableablewidget/</guid>
      <description>widget.DisableableWidget# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type DisableableWidget#type DisableableWidget struct { 	BaseWidget } DisableableWidget describes an extension to BaseWidget which can be disabled. Disabled widgets should have a visually distinct style when disabled, normally using theme.DisabledButtonColor.
func (*DisableableWidget) Disable#func (w *DisableableWidget) Disable() Disable this widget so that it cannot be interacted with, updating any style appropriately.
func (*DisableableWidget) Disabled#func (w *DisableableWidget) Disabled() bool Disabled returns true if this widget is currently disabled or false if it can currently be interacted with.</description>
    </item>
    
    <item>
      <title>widget.Entry</title>
      <link>https://darcybook.github.io/docs/api/widget/entry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/entry/</guid>
      <description>widget.Entry# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Entry#type Entry struct { 	DisableableWidget  	Text string 	// Since: 2.0 	TextStyle fyne.TextStyle 	PlaceHolder string 	OnChanged func(string) `json:&amp;#34;-&amp;#34;` 	// Since: 2.0 	OnSubmitted func(string) `json:&amp;#34;-&amp;#34;` 	Password bool 	MultiLine bool 	Wrapping fyne.TextWrap  	// Set a validator that this entry will check against 	// Since: 1.4 	Validator fyne.</description>
    </item>
    
    <item>
      <title>widget.FileIcon</title>
      <link>https://darcybook.github.io/docs/api/widget/fileicon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/fileicon/</guid>
      <description>widget.FileIcon# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type FileIcon#type FileIcon struct { 	BaseWidget  	Selected bool 	URI fyne.URI } FileIcon is an adaption of widget.Icon for showing files and folders
Since: 1.4func NewFileIcon#func NewFileIcon(uri fyne.URI) *FileIcon NewFileIcon takes a filepath and creates an icon with an overlaid label using the detected mimetype and extension
Since: 1.4func (*FileIcon) CreateRenderer#func (i *FileIcon) CreateRenderer() fyne.</description>
    </item>
    
    <item>
      <title>widget.Form</title>
      <link>https://darcybook.github.io/docs/api/widget/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/form/</guid>
      <description>widget.Form# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Form#type Form struct { 	BaseWidget  	Items []*FormItem 	OnSubmit func() 	OnCancel func() 	SubmitText string 	CancelText string } Form widget is two column grid where each row has a label and a widget (usually an input). The last row of the grid will contain the appropriate form control buttons if any should be shown.</description>
    </item>
    
    <item>
      <title>widget.FormItem</title>
      <link>https://darcybook.github.io/docs/api/widget/formitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/formitem/</guid>
      <description>widget.FormItem# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type FormItem#type FormItem struct { 	Text string 	Widget fyne.CanvasObject  	// Since: 2.0 	HintText string } FormItem provides the details for a row in a form
func NewFormItem#func NewFormItem(text string, widget fyne.CanvasObject) *FormItem NewFormItem creates a new form item with the specified label text and input widget</description>
    </item>
    
    <item>
      <title>widget.Hyperlink</title>
      <link>https://darcybook.github.io/docs/api/widget/hyperlink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/hyperlink/</guid>
      <description>widget.Hyperlink# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Hyperlink#type Hyperlink struct { 	BaseWidget 	Text string 	URL *url.URL 	Alignment fyne.TextAlign // The alignment of the Text 	Wrapping fyne.TextWrap // The wrapping of the Text 	TextStyle fyne.TextStyle // The style of the hyperlink text } Hyperlink widget is a text component with appropriate padding and layout. When clicked, the default web browser should open with a URL</description>
    </item>
    
    <item>
      <title>widget.HyperlinkSegment</title>
      <link>https://darcybook.github.io/docs/api/widget/hyperlinksegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/hyperlinksegment/</guid>
      <description>widget.HyperlinkSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type HyperlinkSegment#type HyperlinkSegment struct { 	Alignment fyne.TextAlign 	Text string 	URL *url.URL } HyperlinkSegment represents a hyperlink within a rich text widget.
Since: 2.1func (*HyperlinkSegment) Inline#func (h *HyperlinkSegment) Inline() bool Inline returns true as hyperlinks are inside other elements.
func (*HyperlinkSegment) Select#func (h *HyperlinkSegment) Select(begin, end fyne.Position) Select tells the segment that the user is selecting the content between the two positions.</description>
    </item>
    
    <item>
      <title>widget.Icon</title>
      <link>https://darcybook.github.io/docs/api/widget/icon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/icon/</guid>
      <description>widget.Icon# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Icon#type Icon struct { 	BaseWidget  	Resource fyne.Resource // The resource for this icon } Icon widget is a basic image component that load&amp;rsquo;s its resource to match the theme.
func NewIcon#func NewIcon(res fyne.Resource) *Icon NewIcon returns a new icon widget that displays a themed icon resource
func (*Icon) CreateRenderer#func (i *Icon) CreateRenderer() fyne.</description>
    </item>
    
    <item>
      <title>widget.Label</title>
      <link>https://darcybook.github.io/docs/api/widget/label/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/label/</guid>
      <description>widget.Label# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Label#type Label struct { 	BaseWidget 	Text string 	Alignment fyne.TextAlign // The alignment of the Text 	Wrapping fyne.TextWrap // The wrapping of the Text 	TextStyle fyne.TextStyle // The style of the label text } Label widget is a label component with appropriate padding and layout.
func NewLabel#func NewLabel(text string) *Label NewLabel creates a new label widget with the set text content</description>
    </item>
    
    <item>
      <title>widget.List</title>
      <link>https://darcybook.github.io/docs/api/widget/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/list/</guid>
      <description>widget.List# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type List#type List struct { 	BaseWidget  	Length func() int 	CreateItem func() fyne.CanvasObject 	UpdateItem func(id ListItemID, item fyne.CanvasObject) 	OnSelected func(id ListItemID) 	OnUnselected func(id ListItemID) } List is a widget that pools list items for performance and lays the items out in a vertical direction inside of a scroller. List requires that all items are the same size.</description>
    </item>
    
    <item>
      <title>widget.ListItemID</title>
      <link>https://darcybook.github.io/docs/api/widget/listitemid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/listitemid/</guid>
      <description>widget.ListItemID# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ListItemID#type ListItemID = int ListItemID uniquely identifies an item within a list.</description>
    </item>
    
    <item>
      <title>widget.ListSegment</title>
      <link>https://darcybook.github.io/docs/api/widget/listsegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/listsegment/</guid>
      <description>widget.ListSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ListSegment#type ListSegment struct { 	Items []RichTextSegment 	Ordered bool } ListSegment includes an itemised list with the content set using the Items field.
Since: 2.1func (*ListSegment) Inline#func (l *ListSegment) Inline() bool Inline returns false as a list should be in a block.
func (*ListSegment) Segments#func (l *ListSegment) Segments() []RichTextSegment Segments returns the segments required to draw bullets before each item</description>
    </item>
    
    <item>
      <title>widget.Menu</title>
      <link>https://darcybook.github.io/docs/api/widget/menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/menu/</guid>
      <description>widget.Menu# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Menu#type Menu struct { 	BaseWidget  	Items []fyne.CanvasObject 	OnDismiss func() } Menu is a widget for displaying a fyne.Menu.
func NewMenu#func NewMenu(menu *fyne.Menu) *Menu NewMenu creates a new Menu.
func (*Menu) ActivateLastSubmenu#func (m *Menu) ActivateLastSubmenu() bool ActivateLastSubmenu finds the last active menu item traversing through the open submenus and activates its submenu if any.</description>
    </item>
    
    <item>
      <title>widget.Orientation</title>
      <link>https://darcybook.github.io/docs/api/widget/orientation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/orientation/</guid>
      <description>widget.Orientation# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Orientation#type Orientation int Orientation controls the horizontal/vertical layout of a widget
const ( 	Horizontal Orientation = 0 	Vertical Orientation = 1 ) Orientation constants to control widget layout</description>
    </item>
    
    <item>
      <title>widget.ParagraphSegment</title>
      <link>https://darcybook.github.io/docs/api/widget/paragraphsegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/paragraphsegment/</guid>
      <description>widget.ParagraphSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ParagraphSegment#type ParagraphSegment struct { 	Texts []RichTextSegment } ParagraphSegment wraps a number of text elements in a paragraph. It is similar to using a list of text elements when the final style is RichTextStyleParagraph.
Since: 2.1func (*ParagraphSegment) Inline#func (p *ParagraphSegment) Inline() bool Inline returns false as a paragraph should be in a block.</description>
    </item>
    
    <item>
      <title>widget.PopUp</title>
      <link>https://darcybook.github.io/docs/api/widget/popup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/popup/</guid>
      <description>widget.PopUp# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type PopUp#type PopUp struct { 	BaseWidget  	Content fyne.CanvasObject 	Canvas fyne.Canvas } PopUp is a widget that can float above the user interface. It wraps any standard elements with padding and a shadow. If it is modal then the shadow will cover the entire canvas it hovers over and block interactions.
func NewModalPopUp#func NewModalPopUp(content fyne.</description>
    </item>
    
    <item>
      <title>widget.PopUpMenu</title>
      <link>https://darcybook.github.io/docs/api/widget/popupmenu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/popupmenu/</guid>
      <description>widget.PopUpMenu# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type PopUpMenu#type PopUpMenu struct { 	*Menu } PopUpMenu is a Menu which displays itself in an OverlayContainer.
func NewPopUpMenu#func NewPopUpMenu(menu *fyne.Menu, c fyne.Canvas) *PopUpMenu NewPopUpMenu creates a new, reusable popup menu. You can show it using ShowAtPosition.
Since: 2.0func (*PopUpMenu) FocusGained#func (p *PopUpMenu) FocusGained() FocusGained is triggered when the object gained focus.</description>
    </item>
    
    <item>
      <title>widget.ProgressBar</title>
      <link>https://darcybook.github.io/docs/api/widget/progressbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/progressbar/</guid>
      <description>widget.ProgressBar# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ProgressBar#type ProgressBar struct { 	BaseWidget  	Min, Max, Value float64  	// TextFormatter can be used to have a custom format of progress text. 	// If set, it overrides the percentage readout and runs each time the value updates. 	// 	// Since: 1.4 	TextFormatter func() string } ProgressBar widget creates a horizontal panel that indicates progress</description>
    </item>
    
    <item>
      <title>widget.ProgressBarInfinite</title>
      <link>https://darcybook.github.io/docs/api/widget/progressbarinfinite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/progressbarinfinite/</guid>
      <description>widget.ProgressBarInfinite# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ProgressBarInfinite#type ProgressBarInfinite struct { 	BaseWidget } ProgressBarInfinite widget creates a horizontal panel that indicates waiting indefinitely An infinite progress bar loops 0% -&amp;gt; 100% repeatedly until Stop() is called
func NewProgressBarInfinite#func NewProgressBarInfinite() *ProgressBarInfinite NewProgressBarInfinite creates a new progress bar widget that loops indefinitely from 0% -&amp;gt; 100% SetValue() is not defined for infinite progress bar To stop the looping progress and set the progress bar to 100%, call ProgressBarInfinite.</description>
    </item>
    
    <item>
      <title>widget.RadioGroup</title>
      <link>https://darcybook.github.io/docs/api/widget/radiogroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/radiogroup/</guid>
      <description>widget.RadioGroup# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type RadioGroup#type RadioGroup struct { 	DisableableWidget 	Horizontal bool 	Required bool 	OnChanged func(string) `json:&amp;#34;-&amp;#34;` 	Options []string 	Selected string } RadioGroup widget has a list of text labels and checks check icons next to each. Changing the selection (only one can be selected) will trigger the changed func.
Since: 1.4func NewRadioGroup#func NewRadioGroup(options []string, changed func(string)) *RadioGroup NewRadioGroup creates a new radio group widget with the set options and change handler</description>
    </item>
    
    <item>
      <title>widget.RichText</title>
      <link>https://darcybook.github.io/docs/api/widget/richtext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/richtext/</guid>
      <description>widget.RichText# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type RichText#type RichText struct { 	BaseWidget 	Segments []RichTextSegment 	Wrapping fyne.TextWrap 	Scroll widget.ScrollDirection } RichText represents the base element for a rich text-based widget.
Since: 2.1func NewRichText#func NewRichText(segments ...RichTextSegment) *RichText NewRichText returns a new RichText widget that renders the given text and segments. If no segments are specified it will be converted to a single segment using the default text settings.</description>
    </item>
    
    <item>
      <title>widget.RichTextBlock</title>
      <link>https://darcybook.github.io/docs/api/widget/richtextblock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/richtextblock/</guid>
      <description>widget.RichTextBlock# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type RichTextBlock#type RichTextBlock interface { 	Segments() []RichTextSegment } RichTextBlock is an extension of a text segment that contains other segments
Since: 2.1</description>
    </item>
    
    <item>
      <title>widget.RichTextSegment</title>
      <link>https://darcybook.github.io/docs/api/widget/richtextsegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/richtextsegment/</guid>
      <description>widget.RichTextSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type RichTextSegment#type RichTextSegment interface { 	Inline() bool 	Textual() string 	Update(fyne.CanvasObject) 	Visual() fyne.CanvasObject  	Select(pos1, pos2 fyne.Position) 	SelectedText() string 	Unselect() } RichTextSegment describes any element that can be rendered in a RichText widget.
Since: 2.1</description>
    </item>
    
    <item>
      <title>widget.RichTextStyle</title>
      <link>https://darcybook.github.io/docs/api/widget/richtextstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/richtextstyle/</guid>
      <description>widget.RichTextStyle# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type RichTextStyle#type RichTextStyle struct { 	Alignment fyne.TextAlign 	ColorName fyne.ThemeColorName 	Inline bool 	SizeName fyne.ThemeSizeName 	TextStyle fyne.TextStyle } RichTextStyle describes the details of a text object inside a RichText widget.
Since: 2.1</description>
    </item>
    
    <item>
      <title>widget.Select</title>
      <link>https://darcybook.github.io/docs/api/widget/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/select/</guid>
      <description>widget.Select# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Select#type Select struct { 	DisableableWidget  	// Alignment sets the text alignment of the select and its list of options. 	// 	// Since: 2.1 	Alignment fyne.TextAlign 	Selected string 	Options []string 	PlaceHolder string 	OnChanged func(string) `json:&amp;#34;-&amp;#34;` } Select widget has a list of options, with the current one shown, and triggers an event func when clicked</description>
    </item>
    
    <item>
      <title>widget.SelectEntry</title>
      <link>https://darcybook.github.io/docs/api/widget/selectentry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/selectentry/</guid>
      <description>widget.SelectEntry# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type SelectEntry#type SelectEntry struct { 	Entry } SelectEntry is an input field which supports selecting from a fixed set of options.
func NewSelectEntry#func NewSelectEntry(options []string) *SelectEntry NewSelectEntry creates a SelectEntry.
func (*SelectEntry) CreateRenderer#func (e *SelectEntry) CreateRenderer() fyne.WidgetRenderer CreateRenderer returns a new renderer for this select entry.
Implements: fyne.Widgetfunc (*SelectEntry) Disable#func (e *SelectEntry) Disable() Disable this widget so that it cannot be interacted with, updating any style appropriately.</description>
    </item>
    
    <item>
      <title>widget.Separator</title>
      <link>https://darcybook.github.io/docs/api/widget/separator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/separator/</guid>
      <description>widget.Separator# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Separator#type Separator struct { 	BaseWidget } Separator is a widget for displaying a separator with themeable color.
Since: 1.4func NewSeparator#func NewSeparator() *Separator NewSeparator creates a new separator.
Since: 1.4func (*Separator) CreateRenderer#func (s *Separator) CreateRenderer() fyne.WidgetRenderer CreateRenderer returns a new renderer for the separator.
Implements: fyne.Widgetfunc (*Separator) MinSize#func (s *Separator) MinSize() fyne.</description>
    </item>
    
    <item>
      <title>widget.SeparatorSegment</title>
      <link>https://darcybook.github.io/docs/api/widget/separatorsegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/separatorsegment/</guid>
      <description>widget.SeparatorSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type SeparatorSegment#type SeparatorSegment struct { } SeparatorSegment includes a horizontal separator in a rich text widget.
Since: 2.1func (*SeparatorSegment) Inline#func (s *SeparatorSegment) Inline() bool Inline returns false as a separator should be full width.
func (*SeparatorSegment) Select#func (s *SeparatorSegment) Select(_, _ fyne.Position) Select does nothing for a separator.
func (*SeparatorSegment) SelectedText#func (s *SeparatorSegment) SelectedText() string SelectedText returns the empty string for this separator.</description>
    </item>
    
    <item>
      <title>widget.Slider</title>
      <link>https://darcybook.github.io/docs/api/widget/slider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/slider/</guid>
      <description>widget.Slider# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Slider#type Slider struct { 	BaseWidget  	Value float64 	Min float64 	Max float64 	Step float64  	Orientation Orientation 	OnChanged func(float64) } Slider is a widget that can slide between two fixed values.
func NewSlider#func NewSlider(min, max float64) *Slider NewSlider returns a basic slider.
func NewSliderWithData#func NewSliderWithData(min, max float64, data binding.</description>
    </item>
    
    <item>
      <title>widget.Table</title>
      <link>https://darcybook.github.io/docs/api/widget/table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/table/</guid>
      <description>widget.Table# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Table#type Table struct { 	BaseWidget  	Length func() (int, int) 	CreateCell func() fyne.CanvasObject 	UpdateCell func(id TableCellID, template fyne.CanvasObject) 	OnSelected func(id TableCellID) 	OnUnselected func(id TableCellID) } Table widget is a grid of items that can be scrolled and a cell selected. It&amp;rsquo;s performance is provided by caching cell templates created with CreateCell and re-using them with UpdateCell.</description>
    </item>
    
    <item>
      <title>widget.TableCellID</title>
      <link>https://darcybook.github.io/docs/api/widget/tablecellid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/tablecellid/</guid>
      <description>widget.TableCellID# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TableCellID#type TableCellID struct { 	Row int 	Col int } TableCellID is a type that represents a cell&amp;rsquo;s position in a table based on it&amp;rsquo;s row and column location.</description>
    </item>
    
    <item>
      <title>widget.TextGrid</title>
      <link>https://darcybook.github.io/docs/api/widget/textgrid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/textgrid/</guid>
      <description>widget.TextGrid# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TextGrid#type TextGrid struct { 	BaseWidget 	Rows []TextGridRow  	ShowLineNumbers bool 	ShowWhitespace bool 	TabWidth int // If set to 0 the fyne.DefaultTabWidth is used } TextGrid is a monospaced grid of characters. This is designed to be used by a text editor, code preview or terminal emulator.
func NewTextGrid#func NewTextGrid() *TextGrid NewTextGrid creates a new empty TextGrid widget.</description>
    </item>
    
    <item>
      <title>widget.TextGridCell</title>
      <link>https://darcybook.github.io/docs/api/widget/textgridcell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/textgridcell/</guid>
      <description>widget.TextGridCell# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TextGridCell#type TextGridCell struct { 	Rune rune 	Style TextGridStyle } TextGridCell represents a single cell in a text grid. It has a rune for the text content and a style associated with it.</description>
    </item>
    
    <item>
      <title>widget.TextGridRow</title>
      <link>https://darcybook.github.io/docs/api/widget/textgridrow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/textgridrow/</guid>
      <description>widget.TextGridRow# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TextGridRow#type TextGridRow struct { 	Cells []TextGridCell 	Style TextGridStyle } TextGridRow represents a row of cells cell in a text grid. It contains the cells for the row and an optional style.</description>
    </item>
    
    <item>
      <title>widget.TextGridStyle</title>
      <link>https://darcybook.github.io/docs/api/widget/textgridstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/textgridstyle/</guid>
      <description>widget.TextGridStyle# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TextGridStyle#type TextGridStyle interface { 	TextColor() color.Color 	BackgroundColor() color.Color } TextGridStyle defines a style that can be applied to a TextGrid cell.
var ( 	// TextGridStyleDefault is a default style for test grid cells 	TextGridStyleDefault TextGridStyle 	// TextGridStyleWhitespace is the style used for whitespace characters, if enabled 	TextGridStyleWhitespace TextGridStyle ) </description>
    </item>
    
    <item>
      <title>widget.TextSegment</title>
      <link>https://darcybook.github.io/docs/api/widget/textsegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/textsegment/</guid>
      <description>widget.TextSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TextSegment#type TextSegment struct { 	Style RichTextStyle 	Text string } TextSegment represents the styling for a segment of rich text.
Since: 2.1func (*TextSegment) Inline#func (t *TextSegment) Inline() bool Inline should return true if this text can be included within other elements, or false if it creates a new block.
func (*TextSegment) Select#func (t *TextSegment) Select(begin, end fyne.</description>
    </item>
    
    <item>
      <title>widget.Toolbar</title>
      <link>https://darcybook.github.io/docs/api/widget/toolbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/toolbar/</guid>
      <description>widget.Toolbar# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Toolbar#type Toolbar struct { 	BaseWidget 	Items []ToolbarItem } Toolbar widget creates a horizontal list of tool buttons
func NewToolbar#func NewToolbar(items ...ToolbarItem) *Toolbar NewToolbar creates a new toolbar widget.
func (*Toolbar) Append#func (t *Toolbar) Append(item ToolbarItem) Append a new ToolbarItem to the end of this Toolbar
func (*Toolbar) CreateRenderer#func (t *Toolbar) CreateRenderer() fyne.</description>
    </item>
    
    <item>
      <title>widget.ToolbarAction</title>
      <link>https://darcybook.github.io/docs/api/widget/toolbaraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/toolbaraction/</guid>
      <description>widget.ToolbarAction# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ToolbarAction#type ToolbarAction struct { 	Icon fyne.Resource 	OnActivated func() `json:&amp;#34;-&amp;#34;` } ToolbarAction is push button style of ToolbarItem
func (*ToolbarAction) ToolbarObject#func (t *ToolbarAction) ToolbarObject() fyne.CanvasObject ToolbarObject gets a button to render this ToolbarAction</description>
    </item>
    
    <item>
      <title>widget.ToolbarItem</title>
      <link>https://darcybook.github.io/docs/api/widget/toolbaritem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/toolbaritem/</guid>
      <description>widget.ToolbarItem# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ToolbarItem#type ToolbarItem interface { 	ToolbarObject() fyne.CanvasObject } ToolbarItem represents any interface element that can be added to a toolbar
func NewToolbarAction#func NewToolbarAction(icon fyne.Resource, onActivated func()) ToolbarItem NewToolbarAction returns a new push button style ToolbarItem
func NewToolbarSeparator#func NewToolbarSeparator() ToolbarItem NewToolbarSeparator returns a new separator item for a Toolbar to assist with ToolbarItem grouping</description>
    </item>
    
    <item>
      <title>widget.ToolbarSeparator</title>
      <link>https://darcybook.github.io/docs/api/widget/toolbarseparator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/toolbarseparator/</guid>
      <description>widget.ToolbarSeparator# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ToolbarSeparator#type ToolbarSeparator struct { } ToolbarSeparator is a thin, visible divide that can be added to a Toolbar. This is typically used to assist visual grouping of ToolbarItems.
func (*ToolbarSeparator) ToolbarObject#func (t *ToolbarSeparator) ToolbarObject() fyne.CanvasObject ToolbarObject gets the visible line object for this ToolbarSeparator</description>
    </item>
    
    <item>
      <title>widget.ToolbarSpacer</title>
      <link>https://darcybook.github.io/docs/api/widget/toolbarspacer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/toolbarspacer/</guid>
      <description>widget.ToolbarSpacer# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ToolbarSpacer#type ToolbarSpacer struct { } ToolbarSpacer is a blank, stretchable space for a toolbar. This is typically used to assist layout if you wish some left and some right aligned items. Space will be split evebly amongst all the spacers on a toolbar.
func (*ToolbarSpacer) ToolbarObject#func (t *ToolbarSpacer) ToolbarObject() fyne.CanvasObject ToolbarObject gets the actual spacer object for this ToolbarSpacer</description>
    </item>
    
    <item>
      <title>widget.Tree</title>
      <link>https://darcybook.github.io/docs/api/widget/tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/tree/</guid>
      <description>widget.Tree# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Tree#type Tree struct { 	BaseWidget 	Root TreeNodeID  	ChildUIDs func(uid TreeNodeID) (c []TreeNodeID) // Return a sorted slice of Children TreeNodeIDs for the given Node TreeNodeID 	CreateNode func(branch bool) (o fyne.CanvasObject) // Return a CanvasObject that can represent a Branch (if branch is true), or a Leaf (if branch is false) 	IsBranch func(uid TreeNodeID) (ok bool) // Return true if the given TreeNodeID represents a Branch 	OnBranchClosed func(uid TreeNodeID) // Called when a Branch is closed 	OnBranchOpened func(uid TreeNodeID) // Called when a Branch is opened 	OnSelected func(uid TreeNodeID) // Called when the Node with the given TreeNodeID is selected.</description>
    </item>
    
    <item>
      <title>widget.TreeNodeID</title>
      <link>https://darcybook.github.io/docs/api/widget/treenodeid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/api/widget/treenodeid/</guid>
      <description>widget.TreeNodeID# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TreeNodeID#type TreeNodeID = string TreeNodeID represents the unique id of a tree node.</description>
    </item>
    
  </channel>
</rss>
