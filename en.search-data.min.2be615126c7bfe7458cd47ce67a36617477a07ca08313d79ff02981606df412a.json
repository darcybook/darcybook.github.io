[{"id":0,"href":"/docs/binding/introduction/","title":"介绍","section":"数据绑定","content":"数据绑定\r#\r\r 数据绑定是 Fyne 工具包的强大新增功能，该工具包在版本中引入。通过使用数据绑定，我们可以避免手动管理许多标准对象，如s，s和s。\n数据绑定是Fyne v2.0.0引入的强大功能。 使用数据绑定，我们可以省去手动管理一些标准对象，例如：Labels、Buttons 和 Lists。\n内建的绑定支持许多基本类型（Int、String、Float 等），数组、Map和结构体一样支持。 每个类型都可以通过简单构造函数建立。 例如用binding.NewString()建立一个空新字符串绑定。 可以用Get 和 Set方法操作它的值。\n也可以用Bind开头函数绑定已有的变更了，接受一个指向类型的指针。 例如用binding.BindInt(\u0026amp;myInt)绑定有已有的整形。\n使用指定类型指针而不是原始的变量，我们可以设置组件和函数在数据变化时自动做出反应。 如果你直接改变了外部变量，调用Reload()确保绑定功能正常读取到值。\npackage main  import ( \t\u0026#34;log\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; )  func main() { \tboundString := binding.NewString() \ts, _ := boundString.Get() \tlog.Printf(\u0026#34;Bound = \u0026#39;%s\u0026#39;\u0026#34;, s)  \tmyInt := 5 \tboundInt := binding.BindInt(\u0026amp;myInt) \ti, _ := boundInt.Get() \tlog.Printf(\u0026#34;Source = %d, bound = %d\u0026#34;, myInt, i) } 下面我面学习组件怎么绑定\r简单值。\n"},{"id":1,"href":"/docs/explore/canvas/","title":"Canvas 和 CanvasObject","section":"探索 Fyne","content":"Canvas 和 CanvasObject\r#\r\r 在 Fyne 中，Canvas是绘制应用程序的区域。每个窗口都有一个画布，您可以使用Window.Canvas()进行访问，但通常您会在Window上找到避免直接访问画布的功能。\n在Fyne中可以绘制的所有内容都是一种CanvasObject。 下面这个示例通过在canvas设置原始图形元素的却别。\n可以通过多种方式自定义每种类型的对象，如文本和圆圈示例所示。 就像Canvas.SetContent()改变content显示，它也会改变当前看视图。你可以将FillColour改为rectangle，你可以使用rect.Refresh()请求刷新。\npackage main  import ( \t\u0026#34;image/color\u0026#34; \t\u0026#34;time\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Canvas\u0026#34;) \tmyCanvas := myWindow.Canvas()  \tblue := color.NRGBA{R: 0, G: 0, B: 180, A: 255} \trect := canvas.NewRectangle(blue) \tmyCanvas.SetContent(rect)  \tgo func() { \ttime.Sleep(time.Second) \tgreen := color.NRGBA{R: 0, G: 180, B: 0, A: 255} \trect.FillColor = green \trect.Refresh() \t}()  \tmyWindow.Resize(fyne.NewSize(100, 100)) \tmyWindow.ShowAndRun() } 我们可以用相同的方式绘制许多不同的绘图元素，例如圆形和文本。\nfunc setContentToText(c fyne.Canvas) { \tgreen := color.NRGBA{R: 0, G: 180, B: 0, A: 255} \ttext := canvas.NewText(\u0026#34;Text\u0026#34;, green) \ttext.TextStyle.Bold = true \tc.SetContent(text) }  func setContentToCircle(c fyne.Canvas) { \tred := color.NRGBA{R: 0xff, G: 0x33, B: 0x33, A: 0xff} \tcircle := canvas.NewCircle(color.White) \tcircle.StrokeWidth = 4 \tcircle.StrokeColor = red \tc.SetContent(circle) } Widget\r#\r\rfyne.Widget是一种特殊类型的画布对象，它具有相关的交互式元素。在widgets中，逻辑与它的外观（也称为WidgetRenderer）是分开的。\n小部件也是CanvasObject的类型，因此我们可以将窗口的内容设置为单个小部件。在此示例中，请参阅我们如何创建一个新的窗口并widget.Entry将其设置为窗口的内容。\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Widget\u0026#34;)  \tmyWindow.SetContent(widget.NewEntry()) \tmyWindow.ShowAndRun() } "},{"id":2,"href":"/docs/started/introduction/","title":"介绍","section":"入门","content":"入门\r#\r\r使用Fyne工具包构建跨平台应用程序非常简单，但在开始之前确实需要安装一些工具。如果您的计算机设置为使用Go进行开发，则可能不需要以下步骤，但我们建议您阅读操作系统的提示以防万一。如果本教程中的后续步骤失败，则应重新访问以下先决条件。\n事前准备\r#\r\rFyne 需要 3 个基本元素，即 Go 工具（至少 1.12 版）、C 编译器（用于连接系统图形驱动程序）和系统图形驱动。说明因操作系统而异，请选择下面的相应选项卡以获取安装说明。\n请注意，这些步骤只是开发所必需的 - 您的Fyne应用程序不需要为最终用户进行任何设置或依赖项安装！\nwindows\r#\r\r 从下载\r下载页面Go并按照说明进行操作 为Windows安装一个可用的C编译器，下面已经经过Go和Fyne测试：  MSYS2 with MingW-w64 - msys2.org TDM-GCC - tdm-gcc.tdragon.net Cygwin - cygwin.com   在 Windows 中，您的图形驱动程序已经安装，但建议确保它们是最新的。  使用 MSYS2（推荐）进行安装的步骤如下：\n 从 msys2.org 安装 MSYS2 安装后，请勿使用打开的 MSYS 终端 从开始菜单打开\u0026quot;MSYS2 MinGW 64-bit\u0026quot; 执行以下命令（如果要求提供安装选项，请确保选择“全部”）：   $ pacman -Syu  $ pacman -S git mingw-w64-x86_64-toolchain  您需要将 /c/Program\\Files/Go/bin 和 ~/Go/bin 添加到 PATH 中，对于 MSYS2，您可以将以下命令粘贴到终端中：   $ echo \u0026#34;export PATH=$PATH:/c/Program\\ Files/Go/bin:~/Go/bin\u0026#34; \u0026gt;\u0026gt; ~/.bashrc macos\r#\r\r 从下载\r下载页面Go并按照说明进行操作 从\rMac App Store安装Xcode 通过打开终端窗口并键入以下内容来设置 Xcode 命令行工具： xcode-select --install 在 macOS 中，图形驱动程序已经安装。  linux\r#\r\r 您需要使用包管理器安装Go，gcc和图形库头文件，以下命令之一可能会起作用。 Debian / Ubuntu: sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev Fedora: sudo dnf install golang gcc libXcursor-devel libXrandr-devel mesa-libGL-devel libXi-devel libXinerama-devel libXxf86vm-devel Arch Linux: sudo pacman -S go xorg-server-devel libxcursor libxrandr libxinerama libxi Solus: sudo eopkg it -c system.devel golang mesalib-devel libxrandr-devel libxcursor-devel libxi-devel libxinerama-devel openSUSE: sudo zypper install go gcc libXcursor-devel libXrandr-devel Mesa-libGL-devel libXi-devel libXinerama-devel libXxf86vm-devel Void Linux: sudo xbps-install -S go base-devel xorg-server-devel libXrandr-devel libXcursor-devel libXinerama-devel  树莓派\r#\r\r 您需要使用包管理器安装 Go、gcc 和图形库头文件。 sudo apt-get install golang gcc libegl1-mesa-dev xorg-dev  bsd\r#\r\r 您需要使用包管理器安装 Go、gcc 和图形库头文件。 FreeBSD: sudo pkg install go gcc xorg pkgconf  安卓\r#\r\r 要为Android开发应用程序，您首先需要为当前计算机（Windows，macOS或Linux）安装工具 完成后，您将需要安装Android SDK和Android NDK - 推荐的方法是安装Android Studio，然后转到工具\u0026gt; SDK管理器，然后从SDK工具安装NDK包。  ios\r#\r\r 要开发适用于iOS的应用程序，您需要访问根据上面的macOS选项卡配置的Apple Mac计算机。 你还需要创建一个\rApple 开发账号并注册开发人员计划（需要付费），以获取在任何设备上运行应用所需的证书。  下载\r#\r\r使用 Go 模块（Go 1.16 及更高版本需要）时，您需要先设置module，然后才能使用包。如果您没有使用模块或已经初始化了模块，则可以将其跳到下一步。运行以下命令并替换MODULE_NAME为模块名称（名称在你调用本地包时会使用）。\n $ cd myapp  $ go mod init MODULE_NAME 您现在需要下载 Fyne 模块。这将使用以下命令完成：\n$ go get fyne.io/fyne/v2\r 要完成模块的设置，您现在需要整理模块文件以正确引用 Fyne 作为依赖项。通过使用以下命令执行此操作（如果未使用模块，则可以跳过）：\n $ go mod tidy 如果您不确定 Go 模块的工作原理，请考虑阅读\r教程：创建 Go 模块。\n运行demo\r#\r\r如果您想在开始编写自己的应用程序代码之前查看Fyne工具包的运行情况，可以通过执行以下命令来查看我们的演示应用程序在您的计算机上运行：\n$ go run fyne.io/fyne/v2/cmd/fyne_demo\r 请注意，第一次运行必须编译一些C代码，因此可能需要比平时更长的时间。后续构建会重用缓存，并且速度会快得多。\n安装\r#\r\r如果需要，也可以使用以下命令安装演示版（需要 Go 1.16 或更高版本）：\n $ go install fyne.io/fyne/v2/cmd/fyne_demo@latest 对于早期版本的 Go，您需要改用以下命令：\n $ go get fyne.io/fyne/v2/cmd/fyne_demo 如果您的GOBIN环境已添加到 path（在 macOS 和 Windows 上应为默认），则可以运行该演示：\n $ fyne_demo 这就是它的全部内容！现在，您可以在所选的 IDE 中编写自己的 Fyne 应用程序。如果你想看到一些Fyne代码在运行，那么你可以阅读你的\r你的第一个程序。\n"},{"id":3,"href":"/docs/architecture/geometry/","title":"Geometry","section":"Architecture","content":"Fyne apps are based on 1 canvas per window. Each canvas has a root CanvasObject which can be a single widget or a Container for many sub-objects whose size and position are controlled by a Layout.\nPosition\r#\r\r Each canvas has its origin at the top left (0, 0) every element of the UI may be scaled depending on the output device and so the API does not describe pixels or exact measurements. The position (10, 10) may be 10 pixels right and down from the origin on, for example, a 120DPI monitor but on a HiDPI (or \u0026ldquo;Retina\u0026rdquo;) display this will probably be closer to 20 pixels.\nEvery position referenced by a CanvasObject is relative to it\u0026rsquo;s parent. This is important for layout algorithms but also for developers in situations such as the Tappable.Tapped(PointEvent) handlers. Here the the X/Y coordinates will be calculated from the top left of the button not the overall canvas. This is designed to allow code to be as self-contained as possible.\nPixel size\r#\r\r Like other vector based GUI libraries the Fyne coordinates need to be based on some baseline monitor resolution. All scaling is relative to this value. For fyne that resolution is 120DPI. This means that the sizes referred to in fyne.Size will be 1=1px when your monitor is 120DPI and scale values are all set to 1. For a HiDPI screen, as mentioned above, the actual DPI may be closer to 240 and on mobile devices it could even be 360 or higher. To manage handle this complexity the toolkit manages scaling internally so your apps will always look the right size. If a user sets the scale to be smaller then their apps will always have smaller than normal fonts, buttons etc, and when they specify larger then your app will scale up to suit.\nWhen compared to Material Design we can see that their baseline DPI is 160, although the maths is similar the actual numbers will be different. This means that device-independent sizes in Fyne use a smaller number to represent the same physical size. For example an icon that is 18 tall in Fyne would be sized at 24 in a standard material design (for example Android) app. This does not matter when building your application, but may be important when working with designers or experts with Material Design.\nOne time that pixel sizes will matter is if you start loading bitmaps images. Normally these scale appropriately, but if you specify FillMode=fyne.FillOriginal then the actual image size will be different on different devices, due to the pixel density. Normally this feature would be used inside a Scroll container. Fyne also defines a canvas.Raster primitive which will draw pixels exactly at the pixel density of the output device. This enables your code to draw at the highest possible output resolution without knowing details of the device you are running on. If for some reason you need \u0026ldquo;pixel perfect\u0026rdquo; positioning you need to multiply CanvasObject.Size() by Canvas.Scale().\n"},{"id":4,"href":"/docs/faq/layout/","title":"Layout and Widget Size","section":"Frequently Asked Questions","content":"Intro\nMove and Resize\r#\r\rQ: How can I move my widget to a different position or resize it?\nA: The position and size of elements in a Fyne app are controlled by the layout of the container that they are within. If the elements of your UI are too small consider using a different layout or container.\nA new Window will expand whatever element is passed to SetContent() to fill it\u0026rsquo;s size. Each time you add a container to this it will divide up the available space according to the layout. Layouts like HBox and VBox will shrink content to it\u0026rsquo;s MinSize() in one dimension or another to pack contents in. Layouts like Max or Border will expand content to fill the space. By writing a custom layout you could fully controll the items within a container.\nQ: Why is my image so small?\nA: One of the difficulties in using a fully scalable user interface toolkit such as Fyne is that the coordinate system is device independent. This allows apps to draw at the right resolution or pixel density to get the best results based on the hardware connected. What this means for pixel based images is that their size could vary based on details not known at compile time.\nDue to this complication an image loaded using canvas.NewImageFromFile() or similar calls will not have a size set, leading to it being very small or appearing to be hidden by default. When placed in an appropriate layout the image will stretch according to it\u0026rsquo;s FillMode property. If you desire the image to always be set to a certain size (or larger) you can call Image.SetMinSize() and specify a device independent size for the image.\nContainers and Layout\r#\r\rQ: How can I manually control the position of elements\nA: In some situations you may want to have complete control over the position and size of elements in a container. To do this you create a container without a layout. The container.NewWithoutLayout() function will create a container for manual positioning - you should pass to that constructor a list of the graphical elements that you want to manage in this container.\nOnce set up then you can use Move() and Resize() on each element to position it as desired. When doing this be careful to note that it will not adjust as the available space changes - and it does not have an explicit minimum size either. To add either of those features you should replace your manual positioning with a custom layout.\n"},{"id":5,"href":"/docs/widget/label/","title":"标签","section":"组件","content":"组件是Fyne应用程序GUI的主要组件，它们可以在基本可以fyne.CanvasObject的任何地方使用。它们管理用户交互，并将始终与当前主题匹配。fyne.CanvasObject\n标签组件是其中最简单的 \u0026ndash; 它向用户显示文本。 和canvas.Text不同，它可以处理一些转义（such as \\n）和一些换行（通过Wrapping设置）。 你可以通过调用widget.NewLabel(\u0026quot;some text\u0026quot;)来创建标签，可以分配一个变量或者直接传给容器。\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Label Widget\u0026#34;)  \tcontent := widget.NewLabel(\u0026#34;text\u0026#34;)  \tmyWindow.SetContent(content) \tmyWindow.ShowAndRun() } "},{"id":6,"href":"/docs/container/box/","title":"盒布局","section":"容器和布局","content":"盒布局\r#\r\r 如\r容器和布局的描述一样，容器内的元素可以使用布局进行排列。本节探讨内置布局以及如何使用它们。\n最常用的布局是layout.BoxLayout，它有两种变体，水平和垂直。Box局将所有元素排列在单个行或列中，并带有可选空间以帮助对齐。\n水平Box布局，使用layout.NewHBoxLayout()创建单行中的项排列。Box中每个项目的宽度都将设置为MinSize().Width宽度，并且所有项目的高度都相等 \u0026ndash; MinSize().Height中最大的值。 布局可以在容器中使用，或者你可以使用widget.NewHBox()box控件。\n垂直框布局类似，但它在列中排列项目。每个项目的高度将设置为最小值，并且所有宽度将相等，设置为最小宽度中的最大宽度。\n添加一个layout.NewSpacer()在元素之前创建一个可扩展空间（例如，是某些元素左对齐，其他）。 一个间隔将会填充所有可用的空间。 在一个垂直box开始增加一个间隔会导致所有元素底对齐。你可以在水平Box的开始和结束添加一个间隔创建一个居中布局。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/layout\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Box Layout\u0026#34;)  \ttext1 := canvas.NewText(\u0026#34;Hello\u0026#34;, color.White) \ttext2 := canvas.NewText(\u0026#34;There\u0026#34;, color.White) \ttext3 := canvas.NewText(\u0026#34;(right)\u0026#34;, color.White) \tcontent := container.New(layout.NewHBoxLayout(), text1, text2, layout.NewSpacer(), text3)  \ttext4 := canvas.NewText(\u0026#34;centered\u0026#34;, color.White) \tcentered := container.New(layout.NewHBoxLayout(), layout.NewSpacer(), text4, layout.NewSpacer()) \tmyWindow.SetContent(container.New(layout.NewVBoxLayout(), content, centered)) \tmyWindow.ShowAndRun() } "},{"id":7,"href":"/docs/canvas/rectangle/","title":"矩形","section":"绘制和动画","content":"矩形\r#\r\r canvas.Rectangle是Fyne中最简单的画布对象。 它显示一个指定颜色的区域，您还可以使用FillColor设置颜色。 在下面示例中，只有一个矩形，它会填充整个窗口。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; )  func main() { \tmyApp := app.New() \tw := myApp.NewWindow(\u0026#34;Rectangle\u0026#34;)  \trect := canvas.NewRectangle(color.White) \tw.SetContent(rect)  \tw.Resize(fyne.NewSize(150, 100)) \tw.ShowAndRun() } 其它fyne.CanvaObject类型有更多设置，\r下一步查看。\n其他类型有更多配置，下一步。\nOther fyne.CanvaObject types have more configuration, let us look next at canvas.Text.\n"},{"id":8,"href":"/docs/extend/custom-layout/","title":"自定义布局","section":"Fyne扩展","content":"自定义布局\r#\r\r 在 Fyne 应用程序中，每个元素都使用简单的布局算法排列其子元素。Fyne 定义了包中可用的许多布局。如果你看一下代码，你会发现它们都实现了接口。 Fyne每个容器都使用简单的布局算法排列元素。 fyne.io/fyne/v2/layout包中定义了需要布局变量。 如果你看了源码会发现它们都实现了Layout接口。\ntype Layout interface { \tLayout([]CanvasObject, Size) \tMinSize(objects []CanvasObject) Size } 为了说明这一点，我们将创建一个新的布局，该布局以对角线排列元素，并排列在其容器的左下角\n首先，我们将定义一个新类型，并定义它的最小大小。要计算这一点，我们只需将所有子元素的宽度和高度（指定为 参数）\n任何应用都可以用自定义布局用非标准方式排列组件，实现上面接口就可以自定义。 为了说明这一点，我们将创建一个新的布局，该布局以对角线排列元素，并排列在其容器的左下角\n首先顶一个一个新类型diagonal，定义它的最小尺寸。 要计算尺寸，我们只需要给所有子元素增加宽和高（指定[]fyne.CanvasObject为MinSize参数）。\nimport \u0026#34;fyne.io/fyne/v2\u0026#34;  type diagonal struct { }  func (d *diagonal) MinSize(objects []fyne.CanvasObject) fyne.Size { \tw, h := float32(0), float32(0) \tfor _, o := range objects { \tchildSize := o.MinSize()  \tw += childSize.Width \th += childSize.Height \t} \treturn fyne.NewSize(w, h) } 对于此类型，我们添加一个Layout()函数，该函数应将所有指定的对象移动到第二个参数中指定的fyne.Size中。\n在我们的实现中，我们计算小部件的左上角（这是0x 参数，y位置是容器高度减去所有子项高度的总和）。从顶部位置开始，我们只需按照前一个子项的大小推进每个项目的位置。\nfunc (d *diagonal) Layout(objects []fyne.CanvasObject, containerSize fyne.Size) { \tpos := fyne.NewPos(0, containerSize.Height - d.MinSize(objects).Height) \tfor _, o := range objects { \tsize := o.MinSize() \to.Resize(size) \to.Move(pos)  \tpos = pos.Add(fyne.NewPos(size.Width, size.Height)) \t} } 这就是创建自定义布局的全部内容。 现在代码已经全部编写完毕，我们可以将其用作container.New的layout参数。 下面的代码设置了3个Label组件，并将它们放置在具有新布局的容器中。 如果运行此应用程序，您将看到对角线窗口小部件的排列，并且在调整窗口大小时，它们将与可用空间的左下角对齐。\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \ta := app.New() \tw := a.NewWindow(\u0026#34;Diagonal\u0026#34;)  \ttext1 := widget.NewLabel(\u0026#34;topleft\u0026#34;) \ttext2 := widget.NewLabel(\u0026#34;Middle Label\u0026#34;) \ttext3 := widget.NewLabel(\u0026#34;bottomright\u0026#34;)  \tw.SetContent(container.New(\u0026amp;diagonal{}, text1, text2, text3)) \tw.ShowAndRun() } "},{"id":9,"href":"/docs/started/helloworld/","title":"Hello World","section":"入门","content":"开始你的第一个app\r#\r\r 完成\r入门文档中的步骤后，即可开始构建您的第一个应用。为了说明这个过程，我们将构建一个简单的 hello world 应用程序。\n用app.New()建立一个简单的app，然后用app.NewWindow()打开一个窗口。用SetContent()将控件数添加到窗口上。最后利用ShowAndRun()运行你的app UI就会显示了\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \ta := app.New() \tw := a.NewWindow(\u0026#34;Hello World\u0026#34;)  \tw.SetContent(widget.NewLabel(\u0026#34;Hello World!\u0026#34;)) \tw.ShowAndRun() } ShowAndRun()可以使用该命令生成上述代码，然后通过运行go build .该命令或双击图标来执行该代码。您也可以绕过编译步骤，直接使用go run .运行代码。\n这两种方法都会显示一个窗口，如下所示：\n\r如果您更喜欢浅色主题，那么只需设置环境变量FYNE_THEME=light，您将获得：\n\r这就是入门的全部内容。要了解更多信息，您可以阅读完整的\rAPI文档。\n"},{"id":10,"href":"/docs/explore/container/","title":"容器和布局","section":"探索 Fyne","content":"容器和布局\r#\r\r 在前面的示例中，我们看到了如何将CanvasObject设置为Canvas的内容，但通常我们不仅需要显示一个视图。要显示多个项目，我们使用类型Container（容器）。\n由于fyne.Container也是一个fyne.CanvasObject，我们可以将其设置为fyne.Canvas的content。 在此示例中，我们创建 3 个文本对象，然后使用该函数将它们放在Container中。由于没有布局，我们可以像您看到text2.Move()的那样移动元素。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t//\u0026#34;fyne.io/fyne/v2/layout\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Container\u0026#34;) \tgreen := color.NRGBA{R: 0, G: 180, B: 0, A: 255}  \ttext1 := canvas.NewText(\u0026#34;Hello\u0026#34;, green) \ttext2 := canvas.NewText(\u0026#34;There\u0026#34;, green) \ttext2.Move(fyne.NewPos(20, 20)) \tcontent := container.NewWithoutLayout(text1, text2) \t// content := container.New(layout.NewGridLayout(2), text1, text2)  \tmyWindow.SetContent(content) \tmyWindow.ShowAndRun() } fyne.Layout是将元素组织在container的工具。 取消对示例的注释，可以将容器改为包含2列的网格布局。 运行此代码并调整窗口尺寸，可以验证布局如何自适应尺寸。 另外需要注意，布局代码会覆盖text2指定位置。\n要了解更多信息，您可以查看\rLayout 清单.\n"},{"id":11,"href":"/docs/architecture/scaling/","title":"Scaling","section":"Architecture","content":"Fyne is built entirely using vector graphics, which means applications written with Fyne will scale to any size beautifully (not just whole number increments). This is a great benefit to the rising popularity of high density displays on mobile devices and high-end computers. The default scale value is calculated to match your operating system - on some systems this is user configuration and on others from your screen\u0026rsquo;s pixel density (DPI - dots per inch). If a Fyne window is moved to another screen it will re-scale and adjust the window size accordingly! We call this \u0026ldquo;auto scaling\u0026rdquo;, and it is designed to keep an app user interface the same size as you change monitor.\nYou can adjust the size of applications using the fyne_settings app or by setting a specific scale using the FYNE_SCALE environment variable. These values can make content larger or smaller than the system settings, using \u0026ldquo;1.5\u0026rdquo; will make things 50% larger or setting 0.8 will make it 20% smaller.\n\rStandard size\rFYNE_SCALE=0.5\rFYNE_SCALE=2.5\r\r"},{"id":12,"href":"/docs/faq/theme/","title":"Theme and Customisation","section":"Frequently Asked Questions","content":"In this page we answer some common questions about the design of Fyne themes and widgets.\nCustomisation\r#\r\rQ: How can I change the colour of text for a Label widget?\nA: All of the standard widgets use the current Theme definition to set the colour, font and sizes. To make changes to your application consider using a custom theme.\nIf your application requires text that is a different colour you can use the canvas.Text type instead. That allows directly setting the colour and size of the text. Be careful when doing this because a user can choose between light or dark theme variations, so you should test with both.\nQ: How can I remove the background colour from my Entry widget?\nA: The input background is set by the theme InputBackground color. You can change that to color.Transparent to remove all input background boxes. It is not possible to edit the style of a single input element - the theme API is designed to give a customisable, but consistent, design.\nTheme API\r#\r\rQ: How can I use my custom theme written before v2.0.0?\nA: Over time you should consider updating to use the new theme API. However it is possible to use a simple adapter that was included to allow the usage of old themes during the transition time. You will find theme.FromLegacy function that can adapt an old theme instance to the new API.\nmyTheme := \u0026amp;myOldThemeType{} updated := theme.FromLegacy(myTheme) app.Settings().SetTheme(updated) There are no performance penalties when using a theme in this mode, but in a future release this API will be removed.\n"},{"id":13,"href":"/docs/widget/button/","title":"按钮","section":"组件","content":"按钮\r#\r\r 按钮组件可以包含文本，图标或者都有，可通过widget.NewButton()和widget.NewButtonWithIcon()构造。 创建一个文本按钮许哟啊2个参数，一个string 内容额一个没有参数的回调函数，点击按钮时会调用此函数。\n带图标按钮构造函数包括一个额外参数fyne.Resource，参数从包含图标资料。 theme包中有内建的图标，在切换主题时候会自动切换。你可以传递自己的图片 \u0026ndash; 通过fyne.LoadResourceFromPath()可以帮助加载为resource资源，尽可能的打包资源。\nwidget.NewButtonWithIcon()只传递空字符串，可以建立一个只有图标的按钮。\npackage main  import ( \t\u0026#34;log\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; \t//\u0026#34;fyne.io/fyne/v2/theme\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Button Widget\u0026#34;)  \tcontent := widget.NewButton(\u0026#34;click me\u0026#34;, func() { \tlog.Println(\u0026#34;tapped\u0026#34;) \t})  \t//content := widget.NewButtonWithIcon(\u0026#34;Home\u0026#34;, theme.HomeIcon(), func() { \t//\tlog.Println(\u0026#34;tapped home\u0026#34;) \t//})  \tmyWindow.SetContent(content) \tmyWindow.ShowAndRun() } "},{"id":14,"href":"/docs/canvas/text/","title":"文本","section":"绘制和动画","content":"文本\r#\r\rFyne所有文本都用canvas.Text呈现。创建时需要指定文本和颜色。 文本由当前主题默认字体呈现。\n文本对象允许设置Alignment和TextStyle这些值。 例如下列示例，指定了等宽字体fyne.TextStyle{Monospace: true}：\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; )  func main() { \tmyApp := app.New() \tw := myApp.NewWindow(\u0026#34;Text\u0026#34;)  \ttext := canvas.NewText(\u0026#34;Text Object\u0026#34;, color.White) \ttext.Alignment = fyne.TextAlignTrailing \ttext.TextStyle = fyne.TextStyle{Italic: true} \tw.SetContent(text)  \tw.ShowAndRun() } 通过FYNE_FONT可以设定环境变量字体。 使用此方式设定一个.ttf文件，替代Fyne工具包或当前主题提供的字体。\n"},{"id":15,"href":"/docs/binding/simple/","title":"绑定简单组件","section":"数据绑定","content":"绑定简单组件\r#\r\r 绑定小部件的最简单形式使用绑定元素而不是静态值。 许多组件提供WithData构造函数接受一个数据类型绑定。 要设置绑定，您需要做的就是传入正确的类型。\n尽管这在初始代码中可能看起来不是很大的好处，但您可以看到它如何确保显示的内容始终与数据源保持同步。您会注意到我们不需要调用小部件，甚至不需要保留对它的引用，但它会相应地更新。\n一开始可能在代码中看它没有什么用处，但你能看到显示内容怎么和数据源保持同步的。 你可以看到我们不需要用Refresh()刷新Label，label可以自己更新。\npackage main  import ( \t\u0026#34;time\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tw := myApp.NewWindow(\u0026#34;Simple\u0026#34;)  \tstr := binding.NewString() \tstr.Set(\u0026#34;Initial value\u0026#34;)  \ttext := widget.NewLabelWithData(str) \tw.SetContent(text)  \tgo func() { \ttime.Sleep(time.Second * 2) \tstr.Set(\u0026#34;A new string\u0026#34;) \t}()  \tw.ShowAndRun() } 下一步我们介绍如何设置\r双向绑定。\nIn the next step we look at how to set up widgets that edit values through binding.\n"},{"id":16,"href":"/docs/container/grid/","title":"网格布局","section":"容器和布局","content":"网格布局\r#\r\r 网格布局以网格模式对容器的元素进行布局，网格模式具有固定数量的列。项将填充一行，直到达到列数，在此之后将创建一个新行。垂直空间将在每行对象之间平均分配。\n用layout.NewGridLayout(cols)建立网格布局，你希望每行的列数。 这将作为container.New(...)的第一个参数。\n如果调整容器的尺寸，则每个单元格都将平均调整大小共享空间。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/layout\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Grid Layout\u0026#34;)  \ttext1 := canvas.NewText(\u0026#34;1\u0026#34;, color.White) \ttext2 := canvas.NewText(\u0026#34;2\u0026#34;, color.White) \ttext3 := canvas.NewText(\u0026#34;3\u0026#34;, color.White) \tgrid := container.New(layout.NewGridLayout(2), text1, text2, text3) \tmyWindow.SetContent(grid) \tmyWindow.ShowAndRun() } "},{"id":17,"href":"/docs/started/apprun/","title":"应用程序与循环运行","section":"入门","content":"应用程序与循环运行\r#\r\r 要使 GUI 应用程序正常工作，它需要运行一个事件循环（有时称为 runloop）来处理用户交互和绘制事件。在 Fyne 中，这是使用App.Run()或 Window.ShowAndRun()函数启动的。这两个命令只能再你的设置代码main()函数中调用。 一个应用只能由一个事件循环，所以你的代码中只能调用一次Run()，调用第二次会导致错误。\npackage main  import ( \t\u0026#34;fmt\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Hello\u0026#34;) \tmyWindow.SetContent(widget.NewLabel(\u0026#34;Hello\u0026#34;))  \tmyWindow.Show() \tmyApp.Run() \ttidyUp() }  func tidyUp() { \tfmt.Println(\u0026#34;Exited\u0026#34;) } 对于桌面运行时，可以通过调用直接退出应用（移动应用不支持此功能） - 通常开发人员代码中不需要写。关闭所有窗口后，应用程序也将退出。 所以说Run()之后执行的安徽念书,再应用退出前不会调用。\n"},{"id":18,"href":"/docs/explore/widgets/","title":"组件清单","section":"探索 Fyne","content":"组件清单\r#\r\r 标准组件 (widget包中)\r#\r\r Accordion\r#\r\r可折叠控件（Accordion）显示项目列表，每个项目都由一个按钮表示，点击该按钮时会显示详细视图。\n\rButton\r#\r\r按钮空间由有一个文本和图标，两者都是可选的。\n\rCard\r#\r\r卡片控件是标题副标题的合计，都是可选的。\n\rCheck\r#\r\r单选框 有一个文本和单选（未选中）按钮。\n\rEntry\r#\r\r输入框空间触发时允许录入简单文本。\n\r密码输入框隐藏输入内容，还有一个控制它显示的按钮。\n\rFileIcon\r#\r\r文件图标未不同文件提供标准图标。 将文件显示未不同的图标，并显示文件的扩展名。\n\rForm\r#\r\r表单是两列网格，其中每行都有一个标签和一个小部件（通常是输入）。网格的最后一行将包含相应的窗体控件按钮（如果有）。\n\rHyperlink\r#\r\r超链接构件是具有适当填充和布局的文本组件。单击后，URL 将在默认 Web 浏览器中打开。\n\rIcon\r#\r\r图标小部件是一个基本的图像组件，可加载其资源以匹配主题。\n\rLabel\r#\r\r标签是具有适当填充和布局的标签组件。\n\rProgress bar\r#\r\r进度条提供一个横条，显示进度。\n\r无限进度条，提供一个横条，一直循环0%-100%，知道条用stop()。\n\rRadioGroup\r#\r\r多选框控件有一个可选的标签列表，每个文本旁都有一个多选图标。\n\rSelect\r#\r\r下拉框有一个可选清单，显示当前选中的，单击出发。\n\rSelectEntry\r#\r\r可选输入框，用户可以输入或者选择一个选项。\n\rSeparator\r#\r\r分隔符，将不同组件分割开。\n\rSlider\r#\r\r滑块可在固定的值之前滑动选择。\n\rTextGrid\r#\r\r文本域是一个等宽的文字输入框，被设计用来文本输入，代码预览或者终端仿真。\n\rToolbar\r#\r\r工具栏可创建工具按钮的水平列表。\n\rCollection Widgets (在widget包中)\r#\r\r集合小组件提供高级缓存功能，以提供海量数据的高性能呈现。 这确实会需要更复杂的构造函数，但对于它所展示的结果来说是一个很好的平衡。 这些小部件中的每一个都使用一系列回调函数，最小集由其构造函数定义，其中包括数据大小，可以重用的模板项的创建，以及最后将数据应用于小部件的函数，因为它即将被添加到显示中。\nList\r#\r\r列表提供了大量子元素的高性能垂直方向滚动。\n\rTable\r#\r\r表格提供大量数据二维方向高性能展示。\n\rTree\r#\r\r树控件提供了子元素垂直滚动，并且点击可以展开子元素。\n\rContainer Widgets (在container中)\r#\r\r容器小部件类似于常规容器，但它们另外提供了一些附加功能。\nAppTabs\r#\r\r应用选项卡，允许切换显示内容。每个项目由顶部的按钮表示。\n\rScroll\r#\r\rScrollContainer 滚动条实现了一个比Content小的container。\n\rSplit\r#\r\rSplitContainer 拆分容器实现了内部子元素大小拆分的container。\n\r"},{"id":19,"href":"/docs/architecture/widgets/","title":"Widgets","section":"Architecture","content":"Widgets in the Fyne toolkit are designed for a clean and pleasant user interaction, following a standard theme and supporting rapid app development, solid testing and easy maintenance. There are various design considerations that promote that ambition, we explore them in this page.\nBehaviour API\r#\r\r One thing that you will notice about the standard widgets is that the API is all about behaviour and state - but very little that controls the actual look of an element. This is by design. It enables our code, and that of app developers, to focus on the behaviour of a widget so that it\u0026rsquo;s rendering process can be left to other code. This makes it much easier to test, in fact full applications can be run through unit tests in memory without ever having to render the app.\nYou can extend an existing widget to add new behaviours without needing to worry about how it is rendered. It is also possible to write your own components, an application is not limited to using the provided widget set. When building your own widget you will notice that the rendering details are completely separate from the state - this is part of the design mentioned above. A WidgetRenderer (the code that renders a Widget) typically holds a reference to the widget that it will be rendering to access state or other information. When a widget state changes then Refresh() is called - the renderer will then be asked to refresh and it should update the display to reflect the new state. Custom widgets are recommended to use the current Theme but can choose to specify thier own sizes, colours and icons where that seems desirable.\nContent Padding\r#\r\r The standard widgets use the theme specified padding to make appropriate space around their graphical components. In the v2.0.0 release the height and baseline of most widgets was standardised to ensure that standard layouts will align well by default. If you are building a custom widget it is recommended to follow these guidelines.\nThe value of theme.Padding() is used in layouts to space elements of a container, it creates a standardised space around the various parts of an application. Some widgets, however, have content that should be inset from the edges of the extents. Consider Entry, It has a background and an underline that go out to the edges, but it\u0026rsquo;s content should be inset. And so we have standardised the amount of spacing used to inset so that alignment matches.\nThe standard inset, or content padding, of a widget is currently defined as 2*theme.Padding(). The standard value of padding is 4 which means the standard inset is 8. You can see in Label and Entry how the (text) content is inset by this much so that their content will align horizontally and vertically when placed next to each other.\n![](/images/architecture/widget-inset.png)\rIt is recommended that custom widgets include similar dimensions so that they fit well alongside the standard widgets.\n"},{"id":20,"href":"/docs/binding/twoway/","title":"双向绑定","section":"数据绑定","content":"双向绑定\r#\r\r 目前为止，我们看到用户界面可以随着数据绑定保持最新。 更常见的是，需要让变量保持和UI组件的值保持一致。 幸好Fyne提供了双向绑定功能，可以将值推送到变量中读取。 数据的改变自动传达到所有连接的代码，而无需增加代码。\n实现这个我们建立一个包含Label和Entry的应用，并绑定到同一个值。 修改输入框的值会看到标签同样改变，我们也没有在代码中调用刷新或引用组件。\n将代码迁移到数据绑定，所有组件的指针可以不再保存。 取而代之，使用到绑定值，你的用户界面可以完全分离。 更易读和管理。\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tw := myApp.NewWindow(\u0026#34;Two Way\u0026#34;)  \tstr := binding.NewString() \tstr.Set(\u0026#34;Hi!\u0026#34;)  \tw.SetContent(container.NewVBox( \twidget.NewLabelWithData(str), \twidget.NewEntryWithData(str), \t))  \tw.ShowAndRun() } 下一步，将介绍如何为数据增加\rconversions\n"},{"id":21,"href":"/docs/canvas/line/","title":"线","section":"绘制和动画","content":"线\r#\r\r canvas.Line对象从Position1（默认top,left）到Position1（默认bottom,right）绘制一条线。 你可以指定它的颜色和笔画粗细，默认粗细为1。\n线的位置可以通过Position1或Position2或者通过Move()和Resize()函数操作。 例如宽度为0的区域会显示一条垂直线，0高度将显示水平线。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; )  func main() { \tmyApp := app.New() \tw := myApp.NewWindow(\u0026#34;Line\u0026#34;)  \tline := canvas.NewLine(color.White) \tline.StrokeWidth = 5 \tw.SetContent(line)  \tw.Resize(fyne.NewSize(100, 100)) \tw.ShowAndRun() } 线条通常在自定义布局中使用或手动控制。与文本不同，它们没有自然（最小）大小，但可以在复杂的布局中使用。\n"},{"id":22,"href":"/docs/container/gridwrap/","title":"网格环绕","section":"容器和布局","content":"Grid Wrap\r#\r\r 与网格布局一样，网格环绕布局在表格布局中排列元素。 但是网格环绕没有固定列数，用固定大小确认每个单元格的宽，然后在构建的时候指定所需行数。\n用layout.NewGridWrapLayout(size)命令建立网格环绕布局，并指定所有元素的尺寸，并作为container.New(...)的第一个参数传递。 行列数会根据当前的容器自动进行计算。\n一开始，网格环绕布局只有一列，如果调整尺寸（如下面示例），子元素将自动排列。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/layout\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Grid Wrap Layout\u0026#34;)  \ttext1 := canvas.NewText(\u0026#34;1\u0026#34;, color.White) \ttext2 := canvas.NewText(\u0026#34;2\u0026#34;, color.White) \ttext3 := canvas.NewText(\u0026#34;3\u0026#34;, color.White) \tgrid := container.New(layout.NewGridWrapLayout(fyne.NewSize(50, 50)), \ttext1, text2, text3) \tmyWindow.SetContent(grid)  \t// myWindow.Resize(fyne.NewSize(180, 75)) \tmyWindow.ShowAndRun() } "},{"id":23,"href":"/docs/extend/bundle/","title":"资源绑定","section":"Fyne扩展","content":"资源绑定\r#\r\r 基于 Go 的应用程序通常构建为单个二进制可执行文件，对于 Fyne 应用程序也是如此。单个文件可以更轻松地分发安装我们的软件。遗憾的是，GUI 应用程序通常需要额外的资源来呈现用户界面。为了管理这一挑战，Go应用程序可以将资产捆绑到二进制文件本身中。Fyne 工具包更喜欢使用“fyne 捆绑包”，因为它具有各种好处，我们将在下面探讨。\n和go的其它应用一样，Fyne也通常打包为一个二进制可执行文件。 单个文件可以简单的分发我们的软件，但是一个GUI应用需要额外的资源显示用户界面。 go应用可以将资源绑定到二进制文件中。Fyne可以使用\u0026quot;fyne bundle\u0026quot;，因为它有很多好处，下面我们会探讨一下。\n绑定资源的基础命令时\u0026quot;fyne bundle\u0026quot;。 这个工具用各种参数可以自定义输出，下面基本命令，可以将文件转化为go源代码。\n$ ls image.png\tmain.go $ fyne bundle image.png \u0026gt;\u0026gt; bundled.go $ ls bundled.go\timage.png\tmain.go $ bundled.go 中有一个资源变量的数组，我们可以在代码中使用这些变量。 例如上面的代码中会产生类型下面的文件：\nvar resourceImagePng = \u0026amp;fyne.StaticResource{ \tStaticName: \u0026#34;image.png\u0026#34;, \tStaticContent: []byte{ ... \t}} 如你所见默认的名称时\u0026quot;resource\u0026lt;Name\u0026gt;.\u0026lt;Ext\u0026gt;\u0026quot;。文件和包的名称也可以自定义。 之后我们就可以在画布中加载图像：\nimg := canvas.NewImageFromResource(resourceImagePng) fyne 资源只是具有唯一名称的字节的集合，因此这可能是字体、声音文件或您希望加载的任何其他数据。您还可以使用该参数将许多资源捆绑到单个文件中。如果要捆绑许多文件，建议将命令保存在shell脚本中，例如此文件：\nfyne资源只是唯一标识的字节集合，因此它可以时一个字体、声音文件或者任何你需要加载的文件。 -append 参数允许你将多个资源绑定到单一文件。\n如果你要绑定多个资源建议将命令写到脚本中，例如下面的gen.sh：\n#!/bin/bash fyne bundle image1.png \u0026gt; bundled.go fyne bundle -append image2.png \u0026gt;\u0026gt; bundled.go 如果您随后更改任何资产或添加新资产，则可以更新此文件并运行一次以更新文件。然后，您应该添加到版本控制中，以便其他人可以构建您的应用程序，而无需运行“fyne捆绑包”。添加也是一个好主意，以便其他人可以根据需要重新生成捆绑的资源。\n后面你要更改资源或者增加资源，你可以运行这个脚本更新bundled.go文件。 你应该将bundled.go加入到版本控制中，否则其他人运行时还需要运行fyne bundle. 将你写好的脚本放到版本控制中也是一个好主意，这样别人就可以重新生产这个文件。\n"},{"id":24,"href":"/docs/widget/entry/","title":"输入框","section":"组件","content":"输入框\r#\r\r用户通过输入可以输入一些简单的文本内容。 widget.NewEntry()可以建立一个输入框。 当你建立组件时要记住名称，方便之后访问Text属性。 OnChanged回调函数，可以在每次内容修改后触发。\n输入空间还可以验证输入的内容类型 \u0026ndash; Validator属性设置一个fyne.StringValidator。PlaceHolder、MultiLine都是可以设置的。\npackage main  import ( \t\u0026#34;log\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Entry Widget\u0026#34;)  \tinput := widget.NewEntry() \tinput.SetPlaceHolder(\u0026#34;Enter text...\u0026#34;)  \tcontent := container.NewVBox(input, widget.NewButton(\u0026#34;Save\u0026#34;, func() { \tlog.Println(\u0026#34;Content was:\u0026#34;, input.Text) \t}))  \tmyWindow.SetContent(content) \tmyWindow.ShowAndRun() } NewPasswordEntry()可以设置一个密码输入框（输入的内容会遮蔽）。\n"},{"id":25,"href":"/docs/explore/layouts/","title":"布局清单","section":"探索 Fyne","content":"布局清单\r#\r\r 标准布局\r#\r\r Horizontal Box (HBox)\r#\r\rHBox在水平行排列子元素。 每个子元素有相同的高（容器中最高的元素）并保持最小宽度左对齐。\n\rVertical Box (VBox)\r#\r\rVBox在垂直列排列子元素。 每个子元素有相同的宽（容器中最宽的元素）并保持最小高度，顶对齐。\n\rCenter\r#\r\r居中布局将所有元素放在容器中心。 每个对象设置为最小尺寸。\n\rForm\r#\r\r表单布局按对进行布局，第一列宽度最小。 对在表单中标签很有用，标签位于第一列，其它对象位于第二列。 此布局需要每次添加偶数个元素。\n\rGrid\r#\r\r网格布局在可用空间内平局排列元素。 元素水平排放，直到达到指定的列数后自动换行。 所有对象都有相同的尺寸，宽度为宽/列数，高度为高/所需行数。上述计算需要减去padding。\n\rGridWrap\r#\r\r网格环绕布局横向排列元素，如果空间不足，就换行。 所有对象都将设置为相同尺寸。 此布局可能不遵循MinSize来管理此统一布局。通常用于文件管理器或图像缩略图列表。\n\rBorder\r#\r\r边框布局支持将元素定位在可用空间外部。\n\rMax\r#\r\r最大布局将所有容器元素填充可用空间。 所有对象都是全尺寸的，并按照添加顺序绘制（最后一个在顶部）。\n\rPadded\r#\r\r填充布局定位所有容器元素类似最大布局，但在外部哟一个padding填充。\n\rCombining Layouts\r#\r\r通过使用不同布局可以构建更为复杂的布局结构。 每个容器可以拥有不同的布局，且每一个可以嵌套不同的标准布局。 例如，一个水平HBox作为header，一个垂直VBox作为左侧边栏面板，一个网格布局作为内容域 \u0026ndash; 所有容器都使用边框布局。如下图所示的结果：\n\r"},{"id":26,"href":"/docs/started/updating/","title":"更新 content","section":"入门","content":"更新 content\r#\r\r 完成\rhello world教程或其他示例后，您将创建一个基本的用户界面。在此页面中，我们将了解如何从代码中更新 GUI 的content。\n第一步是将要更新的小部件分配给变量。在 hello world 教程中，我们直接传入 widget.NewLabel 到 SetContent()，为了更新它，我们将其更改为两行不同的行，例如：\n\tclock := widget.NewLabel(\u0026#34;\u0026#34;) \tw.SetContent(clock) 只要content被分配给变量，我们就可以调用类似SetText(\u0026quot;new text\u0026quot;)。对于我们的示例，我们将在Time.Format的帮助下将标签的content设置为当前时间。\n\tformatted := time.Now().Format(\u0026#34;Time: 03:04:05\u0026#34;) \tclock.SetText(formatted) 这就是我们需要去改变可见元素的content的全部操作（有关完整代码，请参见下文）。 但是,我们可以更进一步的定期更新content。\n后台背景执行\r#\r\r大多数应用程序都需要具有在后台运行的进程，例如下载数据或响应事件。为了模拟这一点，我们将扩展上面的代码以每秒运行一次。\n与大多数go代码一样，我们可以创建一个goroutine（使用go关键字）并在那里运行我们的代码。如果我们将文本更新代码移动到新函数，则可以在初始显示和计时器上调用它以进行定期更新。通过将 goroutine 和内部time.Tick 循环组合在一起，我们可以每秒更新一次label。\n\tgo func() { \tfor range time.Tick(time.Second) { \tupdateTime(clock) \t} \t}() 注意,将此代码放在ShowAndRun 或 Run调用之前，因为它们在应用程序关闭之前不会return。最终运行结果，代码将每秒运行并更新用户界面，从而创建一个基本的时钟小部件。完整代码如下：\npackage main  import ( \t\u0026#34;time\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func updateTime(clock *widget.Label) { \tformatted := time.Now().Format(\u0026#34;Time: 03:04:05\u0026#34;) \tclock.SetText(formatted) }  func main() { \ta := app.New() \tw := a.NewWindow(\u0026#34;Clock\u0026#34;)  \tclock := widget.NewLabel(\u0026#34;\u0026#34;) \tupdateTime(clock)  \tw.SetContent(clock) \tgo func() { \tfor range time.Tick(time.Second) { \tupdateTime(clock) \t} \t}() \tw.ShowAndRun() } "},{"id":27,"href":"/docs/container/border/","title":"Border","section":"容器和布局","content":"Border\r#\r\rBorder 框布局可能是在构建用户界面时最长使用的方式，它可以将项目定位在中央元素周围，中央元素会扩展填充空间。 使用fyne.CanvasObject建立框布局，它需要指定边框位置（就像往常一样）。\n语法和其他布局有些不一样，但是基本layout.NewBorderLayout(top, bottom, left, right)和下面示例一下。\n传递到布局且没有指定位置的项目都会排列到中心区域，并自动填充。 还可以将nil传给布局，让位置为空。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/layout\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Border Layout\u0026#34;)  \ttop := canvas.NewText(\u0026#34;top bar\u0026#34;, color.White) \tleft := canvas.NewText(\u0026#34;left\u0026#34;, color.White) \tmiddle := canvas.NewText(\u0026#34;content\u0026#34;, color.White) \tcontent := container.New(layout.NewBorderLayout(top, nil, left, nil), \ttop, left, middle) \tmyWindow.SetContent(content) \tmyWindow.ShowAndRun() } 请注意，中心中的所有项目都将展开以填充空间（就像它们在布局中一样\rlayout.MaxLayout）。要自己管理该区域，您可以创建一个新的fyne.Container（使用container.New()）并使用您想要的任何布局。\n"},{"id":28,"href":"/docs/architecture/organisation/","title":"Organisation and Packages","section":"Architecture","content":"The Fyne project is split into many packages, each providing different types of functionality. They are as follows:\n fyne.io/fyne/v2 This import provides the basic definitions common to all Fyne code including data types and interfaces. fyne.io/fyne/v2/app The app package provides the APIs that start a new application. Normally you only require app.New() or app.NewWithID(). fyne.io/fyne/v2/canvas The canvas package provides all of the drawing APIs within Fyne. The complete Fyne toolkit is made up of these primitive graphical types. fyne.io/fyne/v2/container The container package provides containers that are used to lay out and organise applications. fyne.io/fyne/v2/data/binding The binding package contains ways of binding data sources to widgets. fyne.io/fyne/v2/data/validation The validation package provides tolling for validating data inside widgets. fyne.io/fyne/v2/dialog The dialog package contains dialogs such as confirm, error and file save/open. fyne.io/fyne/v2/layout The layout package provides various layout implementations for use with containers (discussed in a later tutorial). fyne.io/fyne/v2/storage The storage package provides storage access and management functionality. fyne.io/fyne/v2/test Applications can be tested more easily using the tools within the test package. fyne.io/fyne/v2/widget Most graphical applications are created using a collection of widgets. All the widgets and interactive elements within Fyne are in this package.  "},{"id":29,"href":"/docs/extend/custom-theme/","title":"创建自定义主题","section":"Fyne扩展","content":"创建自定义主题\r#\r\r 应用可以自己加载自定义主题，这些主题可能修改一个小部分，也可能完全不一样。主题需要实现fyne.Theme接口：\ntype Theme interface { \tColor(ThemeColorName, ThemeVariant) color.Color \tFont(TextStyle) Resource \tIcon(ThemeIconName) Resource \tSize(ThemeSizeName) float32 } 要应用我们的主题更改，我们将首先定义一个实现此接口的新类型。\n定义主题\r#\r\r我们首先定义一个新类型，它将是我们的主题，一个简单的空结构就可以了：\ntype myTheme struct {} 最好断言我们实现了一个接口，这样编译器错误就更靠近类型定义。\nvar _ fyne.Theme = (*myTheme)(nil) 在这里你可以看到编译错误，因为我们还没实现接口，我们从颜色开始改变。\n自定义颜色\r#\r\r接口中定义的函数要求我们定义命名颜色，并为用户所需的变体（例如或 ）提供提示。在我们的主题中，我们将返回自定义背景颜色 - 使用不同的浅色和深色值。 Theme接口中定义了一个Color函数，我们可以定义一个客户想要的颜色（例如theme.VariantLight或theme.VariantDark）。在我们的主题中，我们返回一个自定义的颜色 \u0026ndash; 区分light和dark。\nfunc (m myTheme) Color(name fyne.ThemeColorName, variant fyne.ThemeVariant) color.Color { \tif name == theme.ColorNameBackground { \tif variant == theme.VariantLight { \treturn color.White \t} \treturn color.Black \t}  \treturn theme.DefaultTheme().Color(name, variant) } 您将看到此处的最后一行引用了theme.DefaultTheme()查找标准值。这使我们能够提供自定义值，但在我们未提供自定义值时回退到标准主题。\n当然颜色比资源简单，我们看一下自定义图标。\n覆盖默认图标\r#\r\r图标（和字体）使用fyne.Resource而不是基本数据类型。 使用fyne.NewStaticResource我们可以新建立自己的资源，或者你可以传递通过\r资源嵌入建立的资源。\nfunc (m myTheme) Icon(name fyne.ThemeIconName) fyne.Resource { \tif name == theme.IconNameHome { \tfyne.NewStaticResource(\u0026#34;myHome\u0026#34;, homeBytes) \t} \t\treturn theme.DefaultTheme().Icon(name) } 如果我们不想提供指定的覆盖值，我们直接返回默认主题的图标。\n加载主题\r#\r\r在我们加载主题之前，您还需要实现Size和Font方法。如果您愿意使用默认值，则可以只使用这些空实现。\nfunc (m myTheme) Font(style fyne.TextStyle) fyne.Resource { \treturn theme.DefaultTheme().Font(style) }  func (m myTheme) Size(name fyne.ThemeSizeName) float32 { \treturn theme.DefaultTheme().Size(name) } 若要设置应用的主题，需要添加以下代码行：\napp.Settings().SetTheme(\u0026amp;myTheme{}) 通过这些更改，您可以应用自己的样式，进行小的调整或提供完全自定义的外观应用程序！\n"},{"id":30,"href":"/docs/canvas/circle/","title":"圆","section":"绘制和动画","content":"圆\r#\r\r canvas.Circle定义一个指定颜色的圆形。 你可以设置一个StrokeWidth或者StrokeColor设置不同的圆形。\n圆形通过Resize()调整填充的小时。 由于该示例将圆圈设置为窗口content，因此它将填充真个窗口，有一个基础padding（由主题控制）。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; )  func main() { \tmyApp := app.New() \tw := myApp.NewWindow(\u0026#34;Circle\u0026#34;)  \tcircle := canvas.NewCircle(color.White) \tcircle.StrokeColor = color.Gray{0x99} \tcircle.StrokeWidth = 5 \tw.SetContent(circle)  \tw.Resize(fyne.NewSize(100, 100)) \tw.ShowAndRun() } 所有这些都是基本类型，可以由我们的驱动程序呈现，而无需其他信息。接下来，我们将从 Image 开始查看更复杂的类型。\n"},{"id":31,"href":"/docs/binding/conversion/","title":"数据转换","section":"数据绑定","content":"数据转换\r#\r\r 目前，我们已经用到了一些输出类型的数据绑定（String 和 Label 或 Entry）。 通常我们希望展现的不是实际的格式。因此binding包提供了一系列转换的函数。\n在代码中查看如何将 a 转换为 using 。可以通过移动滑块来编辑原始值。每次数据更改时，它都会运行转换代码并更新任何连接的小部件。 最常见的是将不同数据类型转化为字符串再Label或Entry显示。 下面示例用binding.FloatToString将Float转化为String。 原始的数据通过滑块调整，每次值改变都会自动转化并关联组件。\n还可以格式化字符串让用户界面看起来更自然。 你可以看下使用WithFormat可以传递一个字符串格式化后（类似fmt包）再输出。\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tw := myApp.NewWindow(\u0026#34;Conversion\u0026#34;)  \tf := binding.NewFloat() \tstr := binding.FloatToString(f) \tshort := binding.FloatToStringWithFormat(f, \u0026#34;%0.0f%%\u0026#34;) \tf.Set(25.0)  \tw.SetContent(container.NewVBox( \twidget.NewSliderWithData(0, 100.0, f), \twidget.NewLabelWithData(str), \twidget.NewLabelWithData(short), \t))  \tw.ShowAndRun() } 下面介绍，\rlist数据 Lastly in this section we will look at list data.\n"},{"id":32,"href":"/docs/widget/choices/","title":"选择组件","section":"组件","content":"选择组件\r#\r\r 有各种不同组件可以让客户进行一个选择，例如单选框、多选框、和下拉框。\nwidget.Check 单选框创建时使用一个字符串标签，提供一个是/否选择。 每一个组件都有一个\u0026quot;changed\u0026quot;func(...)有对应的参数。 widget.NewCheck(..)有一个string参数，有一个func(bool)参数作为改变监听事件。 你还可以使用Checked字段获取当前值。\n多选框也是类似的，但是第一个参数是一个string数组，用来标识每个子元素。 更改函数要求这次有一个string参数返回当前选定的值。调用widget.NewRadioGroup(...)以构造单选按钮组小部件，以后可以使用此引用来读取Selected字段，而不是使用更改回调。\n下拉框组件和多选框有相同的参数。调用widget.NewSelect(...)会显示一个按钮，点击时出现弹窗，用户可以从中选择。 对于列表使用这个更好。\npackage main  import ( \t\u0026#34;log\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Choice Widgets\u0026#34;)  \tcheck := widget.NewCheck(\u0026#34;Optional\u0026#34;, func(value bool) { \tlog.Println(\u0026#34;Check set to\u0026#34;, value) \t}) \tradio := widget.NewRadioGroup([]string{\u0026#34;Option 1\u0026#34;, \u0026#34;Option 2\u0026#34;}, func(value string) { \tlog.Println(\u0026#34;Radio set to\u0026#34;, value) \t}) \tcombo := widget.NewSelect([]string{\u0026#34;Option 1\u0026#34;, \u0026#34;Option 2\u0026#34;}, func(value string) { \tlog.Println(\u0026#34;Select set to\u0026#34;, value) \t})  \tmyWindow.SetContent(container.NewVBox(check, radio, combo)) \tmyWindow.ShowAndRun() } "},{"id":33,"href":"/docs/explore/dialogs/","title":"对话框","section":"探索 Fyne","content":"对话框\r#\r\r 标准对话框\r#\r\r Color\r#\r\r允许用户从标准集中选择颜色（或在高级模式下选择任何颜色）。\n\rConfirm\r#\r\r要求去确认一个动作。\n\rFileOpen\r#\r\r用户在应用内询问选择一个文件。 实际的对话框显示，根据当前的操作系统有所不同。\n\rForm\r#\r\r对话框中可以输入不容的元素，进行验证。\n\rInformation\r#\r\r一个向用户展示消息的简单途径。\n\rCustom\r#\r\r展示可以放在对话容器中的所有内容。\n\r"},{"id":34,"href":"/docs/started/windows/","title":"窗口处理","section":"入门","content":"窗口处理\r#\r\r Windows 是使用App.NewWindow()函数创建的，需要使用Show()函数进行显示。fyne.Window上ShowAndRun()的协助你同时显示并运行你的应用。\n默认情况下，在通过MinSize()函数，窗口大小是正好可以显示content。\n窗口的尺寸将是正确的，可以通过检查函数来显示其内容（后面的示例可以了解更多）。通过Window.Resize()可以设置一个更大的尺寸。函数需要传递具有长宽属性（基于设备无关像素，它在不同设备上将是相同的）的fyne.Size，例如默认情况下，要使用正方形，我们可以：\n\tw.Resize(fyne.NewSize(100, 100)) 要注意的是，桌面环境可能会显示窗口导致比实际的小。移动设备通常会忽略这一点，一般以全屏显示。\n如果你向显示第二个窗口，你只需调用Show()。如果你的应用程序启动时，要打开多个窗口，那么将Window.Show() 和App.Run()分开是个不错的选择。下面的例子，介绍了怎么运行时打开两个窗口：\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \ta := app.New() \tw := a.NewWindow(\u0026#34;Hello World\u0026#34;)  \tw.SetContent(widget.NewLabel(\u0026#34;Hello World!\u0026#34;)) \tw.Show()  \tw2 := a.NewWindow(\u0026#34;Larger\u0026#34;) \tw2.SetContent(widget.NewLabel(\u0026#34;More content\u0026#34;)) \tw2.Resize(fyne.NewSize(100, 100)) \tw2.Show()  \ta.Run() } 上述应用程序将在两个窗口都关闭时退出。 如果你向将应用设为一个主窗口，一个是附属窗口，你可以将主窗口设置master，这样主窗口关闭时，其它窗口也会关闭。在Window上调用SetMaster()，可以完成设置。\nWindows可以随时创建，我们可以修改上面的代码，新增一个窗口（w2），点击一个按钮可以打开新窗口。你可以从更复杂的工作流中加载窗口，但要注意新窗口通常显示在当前活动content的上方。\n\tw2.SetContent(widget.NewButton(\u0026#34;Open new\u0026#34;, func() { \tw3 := a.NewWindow(\u0026#34;Third\u0026#34;) \tw3.SetContent(widget.NewLabel(\u0026#34;Third\u0026#34;)) \tw3.Show() \t})) "},{"id":35,"href":"/docs/extend/custom-widget/","title":"Writing a Custom Widget","section":"Fyne扩展","content":"The standard widgets included with Fyne are designed to support standard user interactions and requirements. As a GUI often has to provide custom functionality it may be necessary to write a custom widget. This article outlines how.\nA widget is split into two areas - each implementing a standard interface - the fyne.Widget and the fyne.WidgetRenderer. The widget defines behaviour and state, with the renderer being used to define how it should be drawn to screen.\nfyne.Widget\r#\r\rA widget in Fyne is simply a stateful canvas object that has its rendering definition separated from the main logic. As you can see from the fyne.Widget interface there is not much that must be implemented.\ntype Widget interface { \tCanvasObject  \tCreateRenderer() WidgetRenderer } As a widget needs to be used like any other canvas item we inherit from the same interface. To save writing all the functions required we can make use of the widget.BaseWidget type which handles the basics.\nEach widget definition will contain much more than the interface requires. It is standard in a Fyne widget to export the fields which define behaviour (just like the primitives defined in the canvas package).\nFor example, look at the widget.Button type:\ntype Button struct { \tBaseWidget \tText string \tStyle ButtonStyle \tIcon fyne.Resource  \tOnTapped func() } You can see how each of these items store state about the widget behaviour but nothing about how it is rendered.\nfyne.WidgetRenderer\r#\r\rThe widget renderer is responsible for managing a list of fyne.CanvasObject primitives that come together to create the design of our widget. It is much like a fyne.Container with a custom layout and some additional theme handling.\nEvery widget must provide a renderer, but it is entirely possible to re-use a renderer from another widget - especially if your widget is a lightweight wrapper around another standard control.\ntype WidgetRenderer interface { \tLayout(Size) \tMinSize() Size  \tRefresh() \tObjects() []CanvasObject \tDestroy() } As you can see the Layout(Size) and MinSize() functions are similar to the fyne.Layout interface, without the []fyne.CanvasObject parameter - this is because a widget does need to be laid out but it controls which objects will be included.\nThe Refresh() method is triggered when the widget this renderer draws has changed or if the theme is altered. In either situation we may need to make adjustments to how it looks. Lastly the Destroy() method is called when this renderer is no longer needed so it should clear any resources that would otherwise leak.\nCompare again with the button widget - it\u0026rsquo;s fyne.WidgetRenderer implementation is based on the following type:\ntype buttonRenderer struct { \ticon *canvas.Image \tlabel *canvas.Text \tshadow *fyne.CanvasObject  \tobjects []fyne.CanvasObject \tbutton *Button } As you can see it has fields to cache the actual image, text and shadow canvas objects for drawing. It keeps track of the slice of objects required by fyne.WidgetRenderer as a convenience.\nLastly it keeps a reference to the widget.Button for all state information. In the Refresh() method it will update the graphical state based on any changes in the underlying widget.Button type.\nBring it together\r#\r\rA basic widget will extend the widget.BaseWidget type and declare any state that the widget holds. The CreateRenderer() function must exist and return a new fyne.WidgetRenderer instance. The widget and driver code in Fyne will ensure that this is cached accordingly - this method may be called many times (for example if a widget is hidden and then shown). If CreateRenderer() is called again you should return a new renderer instance as the old one may have been destroyed.\nTake care not to keep any important state in your renderer - animation tickers are well suited to that location but user state would not be. A widget that is hidden may have it\u0026rsquo;s renderer destroyed and if it is shown again the new renderer must be able to reflect the same widget state.\n"},{"id":36,"href":"/docs/canvas/image/","title":"图形","section":"绘制和动画","content":"图形\r#\r\r canvas.Image是Fyne中可缩放的图形资源。 它可以从资源（像示例中一样）、图像文件、包含图像的url，或者从内存中的io.Reader对象或image.Image。\n默认图形填充方式是canvas.ImageFillStretch，可以让它填充指定的空间（通过Resize()或者layout布局）。 或者，可以使用canvas.ImageFillContain来确保图形的纵横比例在指定范围内。 进一步，可以使用canvas.ImageFillOriginal（例如下例），确保纵横比例的同时确保一个最小尺寸。\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; \t\u0026#34;fyne.io/fyne/v2/theme\u0026#34; )  func main() { \tmyApp := app.New() \tw := myApp.NewWindow(\u0026#34;Image\u0026#34;)  \timage := canvas.NewImageFromResource(theme.FyneLogo()) \t// image := canvas.NewImageFromURI(uri) \t// image := canvas.NewImageFromImage(src) \t// image := canvas.NewImageFromReader(reader, name) \t// image := canvas.NewImageFromFile(fileName) \timage.FillMode = canvas.ImageFillOriginal \tw.SetContent(image)  \tw.ShowAndRun() } 图像可以基于位图（如 PNG 和 JPEG）或基于矢量（如 SVG）。 在可能的情况下，我们建议使用矢量图像，因为它们会随着尺寸的变化而继续很好地呈现。 使用原始图像大小时要小心，因为它们在使用不同的用户界面比例时可能无法完全按照预期运行。由于Fyne允许整个用户界面缩放25px图像文件，因此可能与25高度fyne对象的高度不同。\n"},{"id":37,"href":"/docs/binding/list/","title":"数组","section":"数据绑定","content":"数组\r#\r\r 我们用列表组件演示怎么能更简单绑定一个复杂类型。 我们先创建一个字符串数组的数据绑定。 有个数组类型我们可以关联到标准列表组件，像其它组件一样，widget.NewListWithData可以绑定数据。\n使用此回调结构时，我们应该使用模板标签小部件，而不是调用 。这意味着，如果数据源中的任何字符串发生更改，则表的每个受影响的行都将刷新。\n和\rlist教程比较一下，主要有2个地方变了，第一个是我们第一个参数传递数组而不是长度回调函数。 第二个是最后参数UpdateItem回调函数。 改进的版本使用binding.DataItem而不是widget.ListIndexID。\n当我们使用回调结构时，我们Bind模板标签组件而不是调用SetText。 这意味着，如果数据源中任何字符串改变，表中每个受到影响的行都会刷新。\npackage main  import ( \t\u0026#34;fmt\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;List Data\u0026#34;)  \tdata := binding.BindStringList( \t\u0026amp;[]string{\u0026#34;Item 1\u0026#34;, \u0026#34;Item 2\u0026#34;, \u0026#34;Item 3\u0026#34;}, \t)  \tlist := widget.NewListWithData(data, \tfunc() fyne.CanvasObject { \treturn widget.NewLabel(\u0026#34;template\u0026#34;) \t}, \tfunc(i binding.DataItem, o fyne.CanvasObject) { \to.(*widget.Label).Bind(i.(binding.String)) \t})  \tadd := widget.NewButton(\u0026#34;Append\u0026#34;, func() { \tval := fmt.Sprintf(\u0026#34;Item %d\u0026#34;, data.Length()+1) \tdata.Append(val) \t}) \tmyWindow.SetContent(container.NewBorder(nil, add, nil, nil, list)) \tmyWindow.ShowAndRun() } 在示例代码中有一个\u0026quot;Append\u0026quot;按钮，点击的时候数据会增加一行。 列表组件会自动显示增加的数据。\n"},{"id":38,"href":"/docs/widget/form/","title":"表单","section":"组件","content":"表单\r#\r\r 表单组件可以展示需要带有标签的输入框，并提供一个可选的取消或提交按钮。 没有修饰的表单，每个标签对其到输入框左侧。 设置OnCancel或OnSubmit可以增加一个按钮栏，并可以通过回调函数触发。\n使用多个widget.FormItem参数传给widget.NewForm(...)建立一个表单，或者示例中\u0026amp;widget.Form{}方式。 Form.Append(label, widget)也可以用来构造表单。\n在下面示例中，我们建立了两个输入框，其中一个是多行的（类似HTML中的TextArea）。 有一个提交事件去在应用关闭前打印信息（）。\npackage main  import ( \t\u0026#34;log\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Form Widget\u0026#34;)  \tentry := widget.NewEntry() \ttextArea := widget.NewMultiLineEntry()  \tform := \u0026amp;widget.Form{ \tItems: []*widget.FormItem{ // we can specify items in the constructor \t{Text: \u0026#34;Entry\u0026#34;, Widget: entry}}, \tOnSubmit: func() { // optional, handle form submission \tlog.Println(\u0026#34;Form submitted:\u0026#34;, entry.Text) \tlog.Println(\u0026#34;multiline:\u0026#34;, textArea.Text) \tmyWindow.Close() \t}, \t}  \t// we can also append items \tform.Append(\u0026#34;Text\u0026#34;, textArea)  \tmyWindow.SetContent(form) \tmyWindow.ShowAndRun() } "},{"id":39,"href":"/docs/container/form/","title":"表单布局","section":"容器和布局","content":"表单布局\r#\r\r layout.FormLayout表单布局类似一个两列的\r表格布局，调整成一个适合表单的样式。 每个元素的高是每两者最小高度中最高的，左侧的宽度是第一列中每项的最小宽度中最大的，第二列的元素展开自动填充。\n这个布局通常用在widget.Form部件，但也可以利用layout.NewFormLayout()传给container.New(...)。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/layout\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Form Layout\u0026#34;)  \tlabel1 := canvas.NewText(\u0026#34;Label 1\u0026#34;, color.Black) \tvalue1 := canvas.NewText(\u0026#34;Value\u0026#34;, color.White) \tlabel2 := canvas.NewText(\u0026#34;Label 2\u0026#34;, color.Black) \tvalue2 := canvas.NewText(\u0026#34;Something\u0026#34;, color.White) \tgrid := container.New(layout.NewFormLayout(), label1, value1, label2, value2) \tmyWindow.SetContent(grid) \tmyWindow.ShowAndRun() } "},{"id":40,"href":"/docs/started/testing/","title":"单元测试","section":"入门","content":"测试图形应用\r#\r\r 一个好的测试组件应该时能快速写测试单元并定期运行。 Fyne 的 API非常容易写测试。将组件逻辑和渲染逻辑分离，我们可以加载程序的时候不用显示它们来进行测试功能。\n示例\r#\r\r我们可以通过扩展我们的\rHello World应用程序来演示单元测试，增加让用户输入他们姓名的控件。 我们用Label录入姓名，一个Entry来显示欢迎词。我们用container.NewVBox将一个显示在另一个上面。 更新的用户界面如下：\nfunc makeUI() (*widget.Label, *widget.Entry) { \treturn widget.NewLabel(\u0026#34;Hello world!\u0026#34;), \twidget.NewEntry() }  func main() { \ta := app.New() \tw := a.NewWindow(\u0026#34;Hello Person\u0026#34;)  \tw.SetContent(container.NewVBox(makeUI())) \tw.ShowAndRun() } 为了测试此输入动作，我们创建一个包含TestGreeter测试函数的的新文件（名称结尾需要是_test.go，才会识别位测试文件）。\npackage main  import (  \u0026#34;testing\u0026#34; )  func TestGreeting(t *testing.T) { } 我们可以添加一个验证初始状态的初始测试，为此，我们断言Label的Text返回的字段，如果测试不正确，则抛出一个错误。将以下代码添加到测试方法中：\n\tout, in := makeUI()  \tif out.Text != \u0026#34;Hello world!\u0026#34; { \tt.Error(\u0026#34;Incorrect initial greeting\u0026#34;) \t} 此测试将通过 \u0026ndash; 接下来我们新增测试区验证欢迎词。我们使用Fyne包fyne.io/fyne/v2/test，它被调用来模拟用户输入。 以下测试代码将检查输入用户名时输出是否更新（请确保同时添加import）：\n\ttest.Type(in, \u0026#34;Andy\u0026#34;) \tif out.Text != \u0026#34;Hello Andy!\u0026#34; { \tt.Error(\u0026#34;Incorrect user greeting\u0026#34;) \t} 您可以使用go test .全部运行 \u0026ndash; 就像普通的go测试一样。这样做，您现在将看到报错 \u0026ndash; 因为我们没有添加欢迎程序逻辑。将函数更新为以下代码：\nfunc makeUI() (*widget.Label, *widget.Entry) { \tout := widget.NewLabel(\u0026#34;Hello world!\u0026#34;) \tin := widget.NewEntry()  \tin.OnChanged = func(content string) { \tout.SetText(\u0026#34;Hello \u0026#34; + content + \u0026#34;!\u0026#34;) \t} \treturn out, in } 这样做，您将看到测试现在通过。您还可以运行完整的应用程序（使用go run .），并在字段中输入名称时查看问候语更新。另请注意，这些测试在没显示窗口或者拦截鼠标的情况下运行 \u0026ndash; 这是Fyne单元测试设置的另一个好处。\n"},{"id":41,"href":"/docs/explore/shortcuts/","title":"快捷键","section":"探索 Fyne","content":"快捷键\r#\r\r 在应用上增加快捷键\r#\r\r 快捷键是利用组合键触发的常见任务。 快捷键和键盘事件非常相似，可以附加到一个触发的元素或者注册到Canvas使它在Window一直有效。\n通过Canvas注册\r#\r\r有需要标准的快捷键和鼠标右键菜单已经定义了（例如fyne.ShortcutCopy）。 添加Shortcut的第一步就是定义一个shortcut。大多数用途是作为桌面扩展的快捷键。 我们用desktop.CustomShortcut去实现，比如用Tab键和Control你可以参照下面这样做：\n\tctrlTab := desktop.CustomShortcut{KeyName: fyne.KeyTab, Modifier: desktop.ControlModifier} 要注意的是快捷键是可以重复使用的，这样你就可以将它增加到其它元素或菜单上。 比如说我们想要它一直有效，我们可以这样在Canvas上注册。\n\tctrlTab := desktop.CustomShortcut{KeyName: fyne.KeyTab, Modifier: desktop.ControlModifier} \tw.Canvas().AddShortcut(\u0026amp;ctrlTab, func(shortcut fyne.Shortcut) { \tlog.Println(\u0026#34;We tapped Ctrl+Tab\u0026#34;) \t}) 如你所见，这种方式注册快捷键有两个步骤 \u0026ndash; 快捷键定义和一个回调函数。 如果用户用户按下了快捷键，函数就会调用，并输出打印内容。\n输入框增加快捷键\r#\r\r只有当前元素获得焦点时才触发快捷键也是很有用的。 任何可以聚焦的空间都可以使用，添加一个TypedShortcut扩展来管理快捷键。 和增加一个键盘时间很像，除了它的参数是一个fyne.Shortcut。\ntype myEntry struct { \twidget.Entry }  func (m *myEntry) TypedShortcut(s fyne.Shortcut) { \tif _, ok := s.(*desktop.CustomShortcut); !ok { \tm.Entry.TypedShortcut(s) \treturn \t}  \tlog.Println(\u0026#34;Shortcut typed:\u0026#34;, s) } 从上面的代码中，你可以看到TypedShortcut handler怎是如何调用的。 在这个函数中，你需要检查快捷键是否是之前使用的自定义类型。如果快捷键是标准的，最好调用原始的快捷键处理程序（如果有的化）。 检查完成后，你可以对比下你处理的不同类型的快捷键。\n"},{"id":42,"href":"/docs/canvas/raster/","title":"Raster","section":"绘制和动画","content":"光栅\r#\r\r canvas.Raster就像一个图像，为屏幕每个像素只绘制一个点。 随之用户界面尺寸或图形尺寸调整，会请求更多像素填充。 我们使用Generator函数 \u0026ndash; 它将返回每个像素的颜色。\nGenerator函数可以基础像素（在下面例子中我们为每个像素生产随机颜色），也可以基础完整图像。 生产完整图像（使用canvas.NewRaster()）更有效，但有时直接控制像素更方便。\npackage main  import ( \t\u0026#34;image/color\u0026#34; \t\u0026#34;math/rand\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; )  func main() { \tmyApp := app.New() \tw := myApp.NewWindow(\u0026#34;Raster\u0026#34;)  \traster := canvas.NewRasterWithPixels( \tfunc(_, _, w, h int) color.Color { \treturn color.RGBA{uint8(rand.Intn(255)), \tuint8(rand.Intn(255)), \tuint8(rand.Intn(255)), 0xff} \t}) \t// raster := canvas.NewRasterFromImage() \tw.SetContent(raster) \tw.Resize(fyne.NewSize(120, 100)) \tw.ShowAndRun() } 如果您的像素数据存储在图像中，您可以通过NewRasterFromImage()功能加载它，该功能将加载图像以在屏幕上显示完美的像素。\n"},{"id":43,"href":"/docs/container/center/","title":"中央布局","section":"容器和布局","content":"中央布局\r#\r\r layout.CenterLayout中央布局排列所有项目到空间中心。 对象按照传递的顺序绘制，最后的排列在最上面。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/layout\u0026#34; \t\u0026#34;fyne.io/fyne/v2/theme\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Center Layout\u0026#34;)  \timg := canvas.NewImageFromResource(theme.FyneLogo()) \timg.FillMode = canvas.ImageFillOriginal \ttext := canvas.NewText(\u0026#34;Overlay\u0026#34;, color.Black) \tcontent := container.New(layout.NewCenterLayout(), img, text)  \tmyWindow.SetContent(content) \tmyWindow.ShowAndRun() } 中央布局是所有元素保持最小大小，如果希望展开项目填充，可参阅\rlayout.MaxLayout.\n"},{"id":44,"href":"/docs/extend/numerical-entry/","title":"数字输入框","section":"Fyne扩展","content":"数字输入框\r#\r\r 传统意义上，GUI程序在组件上使用调用回调和自定义操作。 Fyne不会暴露回调函数来捕获小部件上的事件，但它不需要这样做。 Go语言具有丰富的扩展来实现。\n相反，我们可以简单地使用类型嵌入并扩展小部件，使其只能输入数值。\n首先创建一个新的类型结构，我们将它称为numericalEntry。\ntype numericalEntry struct {  widget.Entry } 如\r扩展组件中所述，我们遵循实用练习并创建一个构造函数并扩展BaseWidget。\nfunc newNumericalEntry() *numericalEntry {  entry := \u0026amp;numericalEntry{}  entry.ExtendBaseWidget(entry)  return entry } 如果没有，我们就忽略输入。此实现将仅允许输入整数，但可以在将来根据需要轻松扩展以检查其他键。\n现在我们只需要让输入框值接受数字。 重写fyne.Focusable的部门方法TypedRune(rune)来实现。 这允许我们拦截标准输入处理，处理我们键入的内容，并只允许录入我们想要的。\n在此方法中，我们将使用条件来检查内容是否与0到9之间的任何数字匹配。 如果匹配到了，我们将内容委派到TypedRune(rune)方法中。 如果没有匹配到，我们就忽略输入，这个实现仅仅允许整数输入，但是后面我们有其他需求也可以轻松扩展。\nfunc (e *numericalEntry) TypedRune(r rune) { \tswitch r { \tcase \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;: \te.Entry.TypedRune(r) \t} } 如果我们想更新实现以允许十进制数字，我们可以简单地添加并允许的符文列表（某些语言使用逗号而不是点作为十进制表示法）。\n如果我们允许小数，我们可以只增加.和,到列表就可以录入（有些语言使用逗号表示小数点）。\nfunc (e *numericalEntry) TypedRune(r rune) { \tswitch r { \tcase \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;,\u0026#39;: \te.Entry.TypedRune(r) \t} } 如果是这样，我们通过使用（如果您只想允许整数，就可以了）来检查剪贴板内容是否为数字，然后如果剪贴板内容可以解析而不会出错，则将快捷方式委派回嵌入的条目。\n现在，输入框只运行用户输入数字类型。但是粘贴的时候仍然允许文本。 我们重写fyne.Shortcutable的部分方法TypedShortcut(fyne.Shortcut)来解决这个问题。\n首先我们用一个断言去检查快捷键是不是*fyne.ShortcutPaste。 如果不是，我们可以将快捷方式委托回嵌入的条目。 如果是，我们通过使用strconv.ParseFloat()（如果您只想允许整数，strconv.Atoi()就可以了）来检查剪贴板内容是否为数字，然后如果剪贴板内容可以解析而不会出错，则将快捷方式委派回嵌入的条目。\nfunc (e *numericalEntry) TypedShortcut(shortcut fyne.Shortcut) { \tpaste, ok := shortcut.(*fyne.ShortcutPaste) \tif !ok { \te.Entry.TypedShortcut(shortcut) \treturn \t}  \tcontent := paste.Clipboard.Content() \tif _, err := strconv.ParseFloat(content, 64); err == nil { \te.Entry.TypedShortcut(shortcut) \t} } 我们还可以确保移动操作系统打开数字键盘而不是默认键盘。这可以通过首先导入fyne.io/fyne/v2/driver/mobile包并覆盖Keyboard() mobile.KeyboardType作为m̀obile.Keyboardable接口一部分的方法来完成。在函数内部，我们只需返回mobile.NumberKeyboard类型。\nfunc (e *numericalEntry) Keyboard() mobile.KeyboardType { \treturn mobile.NumberKeyboard } In the end, the resulting code could look something like this:\npackage main  import ( \t\u0026#34;strconv\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/driver/mobile\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  type numericalEntry struct { \twidget.Entry }  func newNumericalEntry() *numericalEntry { \tentry := \u0026amp;numericalEntry{} \tentry.ExtendBaseWidget(entry) \treturn entry }  func (e *numericalEntry) TypedRune(r rune) { \tswitch r { \tcase \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;,\u0026#39;: \te.Entry.TypedRune(r) \t} }  func (e *numericalEntry) TypedShortcut(shortcut fyne.Shortcut) { \tpaste, ok := shortcut.(*fyne.ShortcutPaste) \tif !ok { \te.Entry.TypedShortcut(shortcut) \treturn \t}  \tcontent := paste.Clipboard.Content() \tif _, err := strconv.ParseFloat(content, 64); err == nil { \te.Entry.TypedShortcut(shortcut) \t} }  func (e *numericalEntry) Keyboard() mobile.KeyboardType { \treturn mobile.NumberKeyboard }  func main() { \ta := app.New() \tw := a.NewWindow(\u0026#34;Numerical\u0026#34;)  \tentry := newNumericalEntry()  \tw.SetContent(entry) \tw.ShowAndRun() } "},{"id":45,"href":"/docs/widget/progressbar/","title":"进度条","section":"组件","content":"进度条\r#\r\r 进度条组件有两种样式，一种显示已经到达Value，从Min到Max。 默认最小值为0.0最大值为1.0。 调用widget.NewProgressBar()直接使用默认值创建组件。 创建之后你可以设置当前Value。\n设置自定义的范围，你可以手动设置Min 和 Max字段。标签始终显示的是完成的百分比。\n另一种形式是无限进度条，这个版本进度条左右来回往复。 调用widget.NewProgressBarInfinite() 创建，并会立即动起来。\npackage main  import ( \t\u0026#34;time\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;ProgressBar Widget\u0026#34;)  \tprogress := widget.NewProgressBar() \tinfinite := widget.NewProgressBarInfinite()  \tgo func() { \tfor i := 0.0; i \u0026lt;= 1.0; i += 0.1 { \ttime.Sleep(time.Millisecond * 250) \tprogress.SetValue(i) \t} \t}()  \tmyWindow.SetContent(container.NewVBox(progress, infinite)) \tmyWindow.ShowAndRun() } "},{"id":46,"href":"/docs/started/packaging/","title":"打包","section":"入门","content":"打包\r#\r\r 桌面程序打包\r#\r\r 打包图形应用程序以进行分发可能很复杂。图形应用程序通常具有与其关联的图标和元数据，以及与每个环境集成所需的特定格式。Windows可执行文件需要嵌入式图标，macOS应用程序是捆绑包，Linux应该安装各种元数据文件。真是麻烦！\n值得庆幸的是，fyne应用程序具有可以自动处理此情况的package命令。只需指定目标操作系统和任何所需的元数据（如 icon）即可生成相应的程序包。图标转换将自动完成.icns或.ico因此只需提供.png文件 :) 即可。您所需要的只是已经为目标平台构建了应用程序\u0026hellip;\ngo install fyne.io/fyne/v2/cmd/fyne@latest fyne package -os darwin -icon myapp.png 如果您使用的是较旧版本的 Go （\u0026lt;1.16），则应使用go get命令安装\ngo get fyne.io/fyne/v2/cmd/fyne fyne package -os darwin -icon myapp.png 将创建 myapp.app，这是一个完整的捆绑包结构，用于分发给macOS用户。然后，您也可以构建Linux和Windows版本\u0026hellip;\nfyne package -os linux -icon myapp.png\rfyne package -os windows -icon myapp.png 这些命令将创建：\n myapp.tar.gz包含一个从 usr/local/ 开始的文件夹结构，Linux 用户可以扩展到其系统的根目录。 myapp.exe（在第二次生成之后，这是 windows 包所必需的）将嵌入图标和应用元数据。  如果您只想在自己的计算机上安装桌面应用程序，则可以使用有用的安装子命令。例如，要在系统范围内安装当前应用程序，您只需执行以下操作：\nfyne install -icon myapp.png 所有这些命令还支持Icon.png的默认图标文件，以便您可以避免为每次执行键入参数。从Fyne 2.1开始，还有一个\r元数据文件文件，您可以在其中为项目设置默认选项。\n当然，如果您愿意，您仍然可以使用标准的Go工具运行应用程序。\n"},{"id":47,"href":"/docs/explore/preferences/","title":"首选项API","section":"探索 Fyne","content":"首选项API\r#\r\r 使用首选项API\r#\r\r 保存用户的配置是开发人员的常见任务，跨平台实现时非常复杂耗时。 为了简化这个工作，Fyne使用一个API可以简单易懂的方式在文件系统上保存值，同时接管比较复杂的部分。\n让我们从API设置开始。 它时首选项界面的一部分，首选项是用来保存和加载以后的不同类型的值，值包括bool、浮点、整型和字符串。 它们每个都有三个不同函数：加载、带有回退值的加载和一个保存值。 下面可以看到字符串类型的三个函数和它使用示例：\n// String looks up a string value for the key String(key string) string // StringWithFallback looks up a string value and returns the given fallback if not found StringWithFallback(key, fallback string) string // SetString saves a string value for the given key SetString(key string, value string) 创建应用变量和调用Preferences()可以访问这些函数。 注意有必要使用唯一ID（类似一个颠倒的url com.baidu.www）建立应用。 要使用app.NewWithID()来使用创建应用，以便申请应用存储位置。\na := app.NewWithID(\u0026#34;com.example.tutorial.preferences\u0026#34;) [...] a.Preferences().SetBool(\u0026#34;Boolean\u0026#34;, true) number := a.Preferences().IntWithFallback(\u0026#34;ApplicationLuckyNumber\u0026#34;, 21) expression := a.Preferences().String(\u0026#34;RegularExpression\u0026#34;) [...] 为了说明这一点，我们建立一个简单应用，让应用在设定的时间后关闭。 设定的时间用户可以修改，并在应用下次启动时生效。\nvar timeout time.Duration 接着，我们建立一个下拉框，让用户选择超时时间，变量*秒数得到超时时间。 最后\u0026quot;AppTimeout\u0026quot;key保存选择的值。\ntimeoutSelector := widget.NewSelect([]string{\u0026#34;10 seconds\u0026#34;, \u0026#34;30 seconds\u0026#34;, \u0026#34;1 minute\u0026#34;}, func(selected string) {  switch selected {  case \u0026#34;10 seconds\u0026#34;:  timeout = 10 * time.Second  case \u0026#34;30 seconds\u0026#34;:  timeout = 30 * time.Second  case \u0026#34;1 minute\u0026#34;:  timeout = time.Minute  }   a.Preferences().SetString(\u0026#34;AppTimeout\u0026#34;, selected) }) 紧接着，我们需要抓取设置的值，如果没有我们需要一个尽可能短的超时回退值，以节省用户等待时间。 这可以通过设置timeoutSelector默认值，或者使用回退。 通过这种方式，下拉框运行时会有一个默认值。\ntimeoutSelector.SetSelected(a.Preferences().StringWithFallback(\u0026#34;AppTimeout\u0026#34;, \u0026#34;10 seconds\u0026#34;)) 最后，我们需要一个单独的goroutine函数运行，告诉应用在指定的时间后退出。\ngo func() {  time.Sleep(timeout)  a.Quit() }() 最后，生成的代码应如下所示：\npackage main  import (  \u0026#34;time\u0026#34;   \u0026#34;fyne.io/fyne/v2/app\u0026#34;  \u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() {  a := app.NewWithID(\u0026#34;com.example.tutorial.preferences\u0026#34;)  w := a.NewWindow(\u0026#34;Timeout\u0026#34;)   var timeout time.Duration   timeoutSelector := widget.NewSelect([]string{\u0026#34;10 seconds\u0026#34;, \u0026#34;30 seconds\u0026#34;, \u0026#34;1 minute\u0026#34;}, func(selected string) {  switch selected {  case \u0026#34;10 seconds\u0026#34;:  timeout = 10 * time.Second  case \u0026#34;30 seconds\u0026#34;:  timeout = 30 * time.Second  case \u0026#34;1 minute\u0026#34;:  timeout = time.Minute  }   a.Preferences().SetString(\u0026#34;AppTimeout\u0026#34;, selected)  })   timeoutSelector.SetSelected(a.Preferences().StringWithFallback(\u0026#34;AppTimeout\u0026#34;, \u0026#34;10 seconds\u0026#34;))   go func() {  time.Sleep(timeout)  a.Quit()  }()   w.SetContent(timeoutSelector)  w.ShowAndRun() } "},{"id":48,"href":"/docs/canvas/animation/","title":"动画","section":"绘制和动画","content":"Fyne 包含一个动画框架，允许您随着时间的推移将画布属性从一个值平滑地过渡到另一个值。动画可以包含任何代码，这意味着可以管理任何类型的对象属性，但是只能有针对大小，位置和颜色的内置动画。\n动画通常使用画布包内置工具（NewSizeAnimation）创建，运行Start()调用创建的动画。您可以将动画设置为重复或自动反转，如下图所示。\n首先用矩形演示一下颜色渐变的动画。 在下面示例代码中，我们设置一个矩形画布，就像哦我们之前的代码一样。 最大的不同是动画在显示窗口之前。动画用NewColorRGBAAnimation创建，它可使颜色从red变为blue，并且中间有2秒（指定的持续时间）的过度时间。\npackage main  import ( \t\u0026#34;image/color\u0026#34; \t\u0026#34;time\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; )  func main() { \ta := app.New() \tw := a.NewWindow(\u0026#34;Hello\u0026#34;)  \tobj := canvas.NewRectangle(color.Black) \tobj.Resize(fyne.NewSize(50, 50)) \tw.SetContent(container.NewWithoutLayout(obj))  \tred := color.NRGBA{R:0xff, A:0xff} \tblue := color.NRGBA{B:0xff, A:0xff} \tcanvas.NewColorRGBAAnimation(red, blue, time.Second*2, func(c color.Color) { \tobj.FillColor = c \tcanvas.Refresh(obj) \t}).Start()  \tw.Resize(fyne.NewSize(250, 50)) \tw.SetPadded(false) \tw.ShowAndRun() } 还可以同时对多个属性进行处理。如果你观察比较仔细，你可以看到我们的矩形没有添加到布局容器中 \u0026ndash; 这意味着我们可以手动指定位置和尺寸。让我们添加一个新的动画位置，这个动画奖在整个窗口中移动，并自动反转。\nmove := canvas.NewPositionAnimation(fyne.NewPos(0, 0), fyne.NewPos(200, 0), time.Second, obj.Move) move.AutoReverse = true move.Start() 因为CanvasObject对象的Move()函数需要一个fyne.Position参数，并且动画回调也需要，我们可以简单的传递这个方法名称而不是新建一个新函数。\n如果你在第一个动画下方添加上述代码，你会看到图片在变色的同时在移动。\n"},{"id":49,"href":"/docs/widget/toolbar/","title":"工具栏","section":"组件","content":"工具栏\r#\r\r 工具栏组件用不同图标建立一行操作按钮。widget.NewToolbar(...)函数可以传一个widget.ToolbarItem数组。内建的组件类型有操作按钮、分隔符、和间隔符。\nwidget.NewToolbarItemAction(..)创建一个最常用的操作。一个操作包含两个参数，一个是图标资源，另一个是func()回调函数。\nwidget.NewToolbarSeparator()创建一个分隔符（通常是垂直的线）在工具栏中分割action。可以使用widget.NewToolbarSpacer()灵活的在action之间创建空间。\n一个工具栏应该使用在区域最上面，通常使用layout.BorderLayout加到 fyne.Container容器中。\npackage main  import ( \t\u0026#34;log\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/theme\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Toolbar Widget\u0026#34;)  \ttoolbar := widget.NewToolbar( \twidget.NewToolbarAction(theme.DocumentCreateIcon(), func() { \tlog.Println(\u0026#34;New document\u0026#34;) \t}), \twidget.NewToolbarSeparator(), \twidget.NewToolbarAction(theme.ContentCutIcon(), func() {}), \twidget.NewToolbarAction(theme.ContentCopyIcon(), func() {}), \twidget.NewToolbarAction(theme.ContentPasteIcon(), func() {}), \twidget.NewToolbarSpacer(), \twidget.NewToolbarAction(theme.HelpIcon(), func() { \tlog.Println(\u0026#34;Display help\u0026#34;) \t}), \t)  \tcontent := container.NewBorder(toolbar, nil, nil, nil, widget.NewLabel(\u0026#34;Content\u0026#34;)) \tmyWindow.SetContent(content) \tmyWindow.ShowAndRun() } "},{"id":50,"href":"/docs/container/max/","title":"最大布局","section":"容器和布局","content":"最大布局\r#\r\r layout.MaxLayout最大布局时最简单的布局，将所有元素设置和容器一样大小。这在一般容器中没啥用，但在编写小部件的时候很合适。\n最大布局会将容器扩展为至少元素的最小尺寸。 按照传递的顺序绘制，最后一个对象在最上面。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t\u0026#34;fyne.io/fyne/v2/layout\u0026#34; \t\u0026#34;fyne.io/fyne/v2/theme\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Max Layout\u0026#34;)  \timg := canvas.NewImageFromResource(theme.FyneLogo()) \ttext := canvas.NewText(\u0026#34;Overlay\u0026#34;, color.Black) \tcontent := container.New(layout.NewMaxLayout(), img, text)  \tmyWindow.SetContent(content) \tmyWindow.ShowAndRun() } "},{"id":51,"href":"/docs/canvas/gradient/","title":"渐变","section":"绘制和动画","content":"渐变\r#\r\r最后一个基本画布类型是Gradient,使用canvas.LinearGradient和canvas.RadialGradient可以绘制一种颜色到另一种颜色的渐变。 你可以通过NewHorizontalGradient()，NewVerticalGradient() 或者 NewRadialGradient()创建渐变。\n要创建渐变，首先需要一个开始和结束的颜色 \u0026ndash; 两者之前的每个颜色都有画布计算。 在下面的示例中，我们使用color.Transparent来展示一个渐变如何使用alpha值设置半透明。\npackage main  import ( \t\u0026#34;image/color\u0026#34;  \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/canvas\u0026#34; )  func main() { \tmyApp := app.New() \tw := myApp.NewWindow(\u0026#34;Gradient\u0026#34;)  \tgradient := canvas.NewHorizontalGradient(color.White, color.Transparent) \t//gradient := canvas.NewRadialGradient(color.White, color.Transparent) \tw.SetContent(gradient)  \tw.Resize(fyne.NewSize(100, 100)) \tw.ShowAndRun() } "},{"id":52,"href":"/docs/explore/binding/","title":"数据绑定","section":"探索 Fyne","content":"数据绑定\r#\r\r 数据绑定在Fyne v2.0.0中引入，这可以使组件和数据源更好的关联起来。 data/binding 包有许多有用的绑定，可以用来管理应用中用到的几乎所有标准类型。 数据绑定可以通过绑定API管理（例如NewString），也可以关联到外部的数据元素（BindInt(*int)）。\n支持绑定的组件通常有一个...WithData构造函数，在创建组件时可以设置绑定的数据。 当然你还可以调用Bind()或者Unbind()来管理组件绑定的数据。\n下面这个示例展示了如何String数据绑定到Label控件：\npackage main  import ( \t\u0026#34;time\u0026#34;  \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \ta := app.New() \tw := a.NewWindow(\u0026#34;Hello\u0026#34;)  \tstr := binding.NewString() \tgo func() { \tdots := \u0026#34;.....\u0026#34; \tfor i := 5; i \u0026gt;= 0; i-- { \tstr.Set(\u0026#34;Count down\u0026#34; + dots[:i]) \ttime.Sleep(time.Second) \t} \tstr.Set(\u0026#34;Blast off!\u0026#34;) \t}()  \tw.SetContent(widget.NewLabelWithData(str)) \tw.ShowAndRun() } 在本站\r数据绑定中找到更多信息。\n"},{"id":53,"href":"/docs/started/mobile/","title":"移动端打包","section":"入门","content":"移动端打包\r#\r\r 你的 Fyne 应用代码将作为移动应用开箱即用，就像它在桌面上一样。但是，打包代码以进行分发会稍微复杂一些。此页面将探讨执行此操作以在iOS和Android上获取应用程序的过程。\n首先，您需要安装更多的开发工具才能完成移动打包。对于 Android 版本，您必须安装 Android SDK 和 NDK 并设置适当的环境，以便在命令行上找到这些工具（如adb）。要构建iOS应用程序，您需要在macOS计算机上安装Xcode以及命令行工具可选包。\n一旦你有了一个工作开发环境，打包就很简单了。要为Android和iOS构建应用程序，以下命令将为您完成所有操作。请确保具有唯一的应用程序标识符，因为在首次发布后不要轻易更改这些标识符。\nfyne package -os android -appID com.example.myapp -icon mobileIcon.png\rfyne package -os ios -appID com.example.myapp -icon mobileIcon.png 完成这些命令后（首次编译可能需要一些时间），您将在目录中看到两个新文件，myapp.apk以及 myapp.app。您将看到后者与darwin应用程序包具有相同的名称 \u0026ndash; 不要被它们迷惑了，因为它们在darwin上不起作用。 要在手机或模拟器上安装Android应用程序，只需运行：\nTo install the android app on your phone or a simulator simply call:\nadb install myapp.apk 要在设备上安装iOS，请打开Xcode，然后在“窗口”菜单中选择“设备和模拟器”菜单项。然后找到你的手机并将myapp.app图标拖到你的应用列表上。要在模拟器上安装，可以使用命令行工具，如下所示：\nxcrun simctl install booted myapp.app "},{"id":54,"href":"/docs/explore/compiling/","title":"编译选项","section":"探索 Fyne","content":"编译选项\r#\r\r Build tags\r#\r\rFyne会选择驱动程序和设置来自动配置你的应用。 下面的build tags可以帮助。 例如，你希望在桌面计算机上模拟移动应用，可以使用下面命令：\n\tgo run -tags mobile main.go    Tag Description     gles 强制使用嵌入式 OpenGL （GLES） 而不是完整的 OpenGL。这通常由目标设备控制，通常不需要。   hints 显示开发人员提示以进行改进或优化。使用hints运行，会记录您的应用程序不遵循材料设计或其他建议。   mobile 此标记在模拟的移动窗口中运行应用程序。当您想要在移动平台上预览应用程序而无需编译和安装到设备时非常有用。   no_native_menus 此标志专门用于 macOS，指示应用程序不应使用 macOS 本机菜单。相反，菜单将显示在应用程序窗口内。对于在 macOS 上测试应用程序以模拟 Windows 或 Linux 上的行为最有用。    "},{"id":55,"href":"/docs/widget/list/","title":"列表","section":"组件","content":"列表\r#\r\r 列表组件时工具包的聚合组件之一。这些组件能够高性能的呈现大量数据。 你可以看到\rTable和Tree 组件有类似的API。 由于这种设计，用起来比较复杂。\n列表需要数据时使用回调函数请求。有3各主要的回调函数，Length、CreateItem 和 UpdateItem。 长度回调（参数1）时最简单的，呈现数据中有多少个项目。 其他的和模板有关 \u0026ndash; 图形元素如何创建、缓存和重用。\nCreateItem 回调函数范围一个模板对象。实际数据会和模板对象一起显示。 MinSize字段会影响列表的最小尺寸。\n最后UpdateItem被调用时会将数据线缓存。可以用来设置内容可供显示。\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  var data = []string{\u0026#34;a\u0026#34;, \u0026#34;string\u0026#34;, \u0026#34;list\u0026#34;}  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;List Widget\u0026#34;)  \tlist := widget.NewList( \tfunc() int { \treturn len(data) \t}, \tfunc() fyne.CanvasObject { \treturn widget.NewLabel(\u0026#34;template\u0026#34;) \t}, \tfunc(i widget.ListItemID, o fyne.CanvasObject) { \to.(*widget.Label).SetText(data[i]) \t})  \tmyWindow.SetContent(list) \tmyWindow.ShowAndRun() } "},{"id":56,"href":"/docs/container/apptabs/","title":"应用选项卡","section":"容器和布局","content":"AppTabs 应用选项卡\r#\r\r 应用选项卡允许用户在不同的面板中切换。 选项卡只有图标或者文本。建议每个选项卡是否有图标保持一致。 container.NewAppTabs(...)建立选项卡容器，参数为container.TabItem元素（可以通过container.NewTabItem(...)建立）。\n选项卡的位置可以用container.TabLocationTop、container.TabLocationBottom、container.TabLocationLeading和container.TabLocationTrailing来设置。默认配置是top。\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/container\u0026#34; \t//\u0026#34;fyne.io/fyne/v2/theme\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;TabContainer Widget\u0026#34;)  \ttabs := container.NewAppTabs( \tcontainer.NewTabItem(\u0026#34;Tab 1\u0026#34;, widget.NewLabel(\u0026#34;Hello\u0026#34;)), \tcontainer.NewTabItem(\u0026#34;Tab 2\u0026#34;, widget.NewLabel(\u0026#34;World!\u0026#34;)), \t)  \t//tabs.Append(container.NewTabItemWithIcon(\u0026#34;Home\u0026#34;, theme.HomeIcon(), widget.NewLabel(\u0026#34;Home tab\u0026#34;)))  \ttabs.SetTabLocation(container.TabLocationLeading)  \tmyWindow.SetContent(tabs) \tmyWindow.ShowAndRun() } 在移动设备上加载时，选项卡位置可能会被忽略。 在纵向方向中，leading或拖拽位置可以更改为底部。 在横向方向上时，顶部或底部位置将移动到leading位置。\n"},{"id":57,"href":"/docs/started/distribution/","title":"分发到应用商店","section":"入门","content":"分发\r#\r\r 分发到应用商店\r#\r\r 按照打包页面中所述打包图形应用程序可提供可直接共享或分发的文件或捆绑包。但是，签名并上传到应用商店和市场是需要特定于平台的配置的额外步骤，我们将在此页面中介绍。\n在每个步骤中，我们将使用一个新工具，该工具是 fyne 命令行实用程序的一部分。该fyne release步骤处理每个商店的签名和准备工作，但参数因平台而异，如下所示。\nmacOS App Store (since fyne 1.4.2)\r#\r\r实现准备:\n 运行 macOS 和 Xcode的Apple mac Apple 开发账号 Mac App Store 应用证书 Mac App Store 安装证书 App Store的Apple Transporter 程序    设置您的应用程序/版本，以便为在\rAppStore Connect上传构建版本做好准备。\n  捆绑完成的应用程序以进行发布：\n  $ fyne release -appID com.example.myapp -appVersion 1.0 -appBuild 1 -category games  将拖动到Deliver上，然后点击.pkg。\n  返回 AppStore Connect 网站，选择您的版本以供发布，然后提交以供审核。\n  Google Play Store (Android)\r#\r\r实现准备:\n Google Play Console 账号 分发密钥库 (创建说明参考\randroid docs)    设置您的应用/版本，准备在\rGoogle Play Console管理中心上传构建版本。关闭Play app signing选项，因为我们自己管理它。\n  捆绑完成的应用程序以进行发布：\n  $ fyne release -os android -appID com.example.myapp -appVersion 1.0 -appBuild 1   将.apk文件拖到 Play 管理中心应用版本页面上的构建放置区中。\n  开始推出新版本。\n  iOS App Store (since fyne 1.4.1)\r#\r\r实现准备:\n 运行 macOS 和 Xcode 的 Apple Mac Apple Developer 账号 iOS App Store 分发证书 App Store 的 Apple Transporter 应用    设置您的应用/版本，以便为要上传到\rAppStore Connect的构建版本做好准备。\n  捆绑完成的应用程序以进行发布：\n  $ fyne release -os ios -appID com.example.myapp -appVersion 1.0 -appBuild 1   将.ipa拖动到Deliver上，然后点击“交付”。\n  返回 AppStore Connect 网站，选择您的版本以供发布，然后提交以供审核。\n  "},{"id":58,"href":"/docs/faq/","title":"Frequently Asked Questions","section":"Docs","content":"As the Fyne toolkit presents a different approach to the traditional design of GUI tookits in some ways we have compiled this selection of answers to frequently asked questions. The content is grouped into the following areas.\n \rLayout and widget size \rTheme and customisation   If you have more questions please get in touch.\n"},{"id":59,"href":"/docs/widget/table/","title":"表格","section":"组件","content":"表格\r#\r\r 表格组件和像一个二维的列表（另一个聚合组件）。 也是设计来高性能展示大量数据。 因此组件不会引用所有数据，在需要时才引用。\n表格在需要数据时调用回调函数。 有三个回调函数，Length、CreateCell和UpdateCell。 长度回调（参数1）时最简单的，范围需要呈现项目数量，它返回两个整数表示行和列数。 两外两个和实际使用的模板有关。\nCreateCell回调范围一个新模板对象，就像列表一样。 区别在于，MinSize会定义每个单元格的标准此村，和表格最小尺寸（至少显示一个单元格）。\n就像前面说的， UpdateCell 调用用来缓存数据源模板。索引(row, col)和数量一致。\npackage main  import ( \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/app\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  var data = [][]string{[]string{\u0026#34;top left\u0026#34;, \u0026#34;top right\u0026#34;}, \t[]string{\u0026#34;bottom left\u0026#34;, \u0026#34;bottom right\u0026#34;}}  func main() { \tmyApp := app.New() \tmyWindow := myApp.NewWindow(\u0026#34;Table Widget\u0026#34;)  \tlist := widget.NewTable( \tfunc() (int, int) { \treturn len(data), len(data[0]) \t}, \tfunc() fyne.CanvasObject { \treturn widget.NewLabel(\u0026#34;wide content\u0026#34;) \t}, \tfunc(i widget.TableCellID, o fyne.CanvasObject) { \to.(*widget.Label).SetText(data[i.Row][i.Col]) \t})  \tmyWindow.SetContent(list) \tmyWindow.ShowAndRun() } "},{"id":60,"href":"/docs/started/metadata/","title":"元数据","section":"入门","content":"元数据\r#\r\r App 元数据\r#\r\r fyne自v2.1.0 版本起，我们支持元数据文件，该文件允许您在存储库中存储有关应用程序的信息。此文件是可选的，但有助于避免必须记住每个包和 release 命令的特定生成参数。\n文件需要命名为FyneApp.toml，目录为你运行的fyne目录，（通常是main包位置）。 文件内容如下所示：\nWebsite = \u0026#34;https://example.com\u0026#34;  [Details] Icon = \u0026#34;Icon.png\u0026#34; Name = \u0026#34;My App\u0026#34; ID = \u0026#34;com.example.app\u0026#34; Version = \u0026#34;1.0.0\u0026#34; Build = 1 该文件的顶部是元数据，如果将应用上传到 https://apps.fyne.io 列表页面，将使用元数据，因此它是可选的。[详细信息] 部分包含其他应用商店和操作系统在发布过程中使用的有关应用程序的数据。如果找到此文件，fyne 工具将使用该文件，如果元数据存在，则不需要许多必需的命令参数。您仍然可以使用命令行参数覆盖这些值。\n"},{"id":61,"href":"/docs/api/","title":"Api document","section":"Docs","content":"fyne\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Package fyne describes the objects and components available to any Fyne app. These can all be created, manipulated and tested without rendering (for speed). Your main package should use the app package to create an application with a default driver that will render your UI.\nA simple application may look like this:\n package main   import \u0026#34;fyne.io/fyne/v2/app\u0026#34;  import \u0026#34;fyne.io/fyne/v2/container\u0026#34;  import \u0026#34;fyne.io/fyne/v2/widget\u0026#34;   func main() {  a := app.New()  w := a.NewWindow(\u0026#34;Hello\u0026#34;)   hello := widget.NewLabel(\u0026#34;Hello Fyne!\u0026#34;)  w.SetContent(container.NewVBox(  hello,  widget.NewButton(\u0026#34;Hi!\u0026#34;, func() {  hello.SetText(\u0026#34;Welcome :)\u0026#34;)  }),  ))   w.ShowAndRun()  } Usage\r#\r\rconst AnimationRepeatForever = -1 AnimationRepeatForever is an AnimationCount value that indicates it should not stop looping.\nSince: \r2.0\rvar ( \t// AnimationEaseInOut is the default easing, it starts slowly, accelerates to the middle and slows to the end. \t// \t// Since: 2.0 \tAnimationEaseInOut = animationEaseInOut \t// AnimationEaseIn starts slowly and accelerates to the end. \t// \t// Since: 2.0 \tAnimationEaseIn = animationEaseIn \t// AnimationEaseOut starts at speed and slows to the end. \t// \t// Since: 2.0 \tAnimationEaseOut = animationEaseOut \t// AnimationLinear is a linear mapping for animations that progress uniformly through their duration. \t// \t// Since: 2.0 \tAnimationLinear = animationLinear ) func IsHorizontal\r#\r\rfunc IsHorizontal(orient DeviceOrientation) bool IsHorizontal is a helper utility that determines if a passed orientation is horizontal\nfunc IsVertical\r#\r\rfunc IsVertical(orient DeviceOrientation) bool IsVertical is a helper utility that determines if a passed orientation is vertical\nfunc LogError\r#\r\rfunc LogError(reason string, err error) LogError reports an error to the command line with the specified err cause, if not nil. The function also reports basic information about the code location.\nfunc Max\r#\r\rfunc Max(x, y float32) float32 Max returns the larger of the passed values.\nfunc Min\r#\r\rfunc Min(x, y float32) float32 Min returns the smaller of the passed values.\nfunc SetCurrentApp\r#\r\rfunc SetCurrentApp(current App) SetCurrentApp is an internal function to set the app instance currently running.\ntypes\r#\r\r \rAnimation \rAnimationCurve \rApp \rBuildType \rCanvas \rCanvasObject \rClipboard \rContainer \rDelta \rDevice \rDeviceOrientation \rDisableable \rDoubleTappable \rDragEvent \rDraggable \rDriver \rFocusable \rHardwareKey \rKeyEvent \rKeyName \rLayout \rLegacyTheme \rLifecycle \rListableURI \rMainMenu \rMenu \rMenuItem \rNotification \rOverlayStack \rPointEvent \rPosition \rPreferences \rResource \rScrollEvent \rScrollable \rSecondaryTappable \rSettings \rShortcut \rShortcutCopy \rShortcutCut \rShortcutHandler \rShortcutPaste \rShortcutSelectAll \rShortcutable \rSize \rStaticResource \rStorage \rStringValidator \rTabbable \rTappable \rTextAlign \rTextStyle \rTextWrap \rTheme \rThemeColorName \rThemeIconName \rThemeSizeName \rThemeVariant \rURI \rURIReadCloser \rURIWriteCloser \rValidatable \rVector2 \rWidget \rWidgetRenderer \rWindow  "},{"id":62,"href":"/docs/started/cross-compiling/","title":"交叉编译","section":"入门","content":"交叉编译\r#\r\r 不同平台交叉编译\r#\r\r 使用Go进行交叉编译的设计很简单 \u0026ndash; 我们只需为目标操作系统设置环境变量GOOS（GOARCH如果面向不同的体系结构）。不幸的是，当使用原生图形的时候调用时，在Fyne中使用CGo会使这变得更加困难。\n从开发计算机编译\r#\r\r要交叉编译Fyne应用程序，您还必须设置CGO_ENABLED=1告诉go启用C编译器（当目标平台与当前系统不同时，通常会关闭）。不幸的是，这样做意味着您必须为要编译的目标平台提供一个C编译器。安装适当的编译器后，您还需要设置环境变量CC以告知 Go 要使用哪个编译器。\n有许多方法可以安装所需的工具 - 以及可以使用的不同工具。Fyne 开发人员推荐的配置是\n   GOOS (target) CC provider download notes     darwin o32-clang osxcross \rfrom github.com 您还需要安装 macOS SDK (instructions at the download link)   windows x86_64-w64-mingw64-gcc mingw64 package manager 对于 macOS，请使用\rhomebrew   linux gcc or x86_64-linux-musl-gcc gcc or musl-cross \rcygwin or package manager musl-cross 可以从 homebrew 获得，以提供 linux gcc。您还需要安装 X11 和 mesa 标头进行编译。    设置上述环境变量后，您应该能够以通常的方式进行编译。如果发生进一步的错误，则可能是由于缺少包。某些目标平台需要安装其他库或头文件才能成功编译。\n使用虚拟环境\r#\r\r由于Linux系统能够轻松地交叉编译到macOS和Windows，因此当您不从Linux开发时，使用虚拟化环境会更简单。Docker 映像是复杂构建配置的有用工具，这也适用于 Fyne。可以使用不同的工具。Fyne开发人员推荐的工具是\rfyne-cross。它受到 xgo的启发，并使用构建在\rgolang-cross之上的\rdocker image，其中包括用于Windows的MinGW编译器和macOS SDK以及Fyne要求。\nfyne-cross允许为以下目标构建二进制文件并创建分发包:\n   GOOS GOARCH     darwin amd64   darwin 386   linux amd64   linux 386   linux arm64   linux arm   windows amd64   windows 386   android amd64   android 386   android arm64   android arm   ios    freebsd amd64   freebsd arm64     注意：iOS 编译仅在darwin主机上受支持。\n 环境需求\r#\r\r go \u0026gt;= 1.13 docker  安装\r#\r\rgo get github.com/fyne-io/fyne-cross 用法\r#\r\rfyne-cross \u0026lt;command\u0026gt; [options]\rThe commands are:\rdarwin Build and package a fyne application for the darwin OS\rlinux Build and package a fyne application for the linux OS\rwindows Build and package a fyne application for the windows OS\randroid Build and package a fyne application for the android OS\rios Build and package a fyne application for the iOS OS\rfreebsd Build and package a fyne application for the freebsd OS\rversion Print the fyne-cross version information\rUse \u0026#34;fyne-cross \u0026lt;command\u0026gt; -help\u0026#34; for more information about a command. Wildcards\r#\r\rarch标志支持通配符，以防想要针对指定 GOOS 的所有受支持的 GOARCH 进行编译。\n例如:\nfyne-cross windows -arch=* 和下面是一样的\nfyne-cross windows -arch=amd64,386 示例\r#\r\r下面的示例交叉编译和打包 fyne 示例程序\ngit clone https://github.com/fyne-io/examples.git\rcd examples 编译并打开main示例应用\r#\r\rfyne-cross linux  注意：默认情况下，fyne-cross会将包编译到当前目录中。\n上面的命令等效于： fyne-cross linux .\n 编译和打包特定示例应用\r#\r\rfyne-cross linux -output bugs ./cmd/bugs "},{"id":63,"href":"/docs/api/app/","title":"app","section":"Api document","content":"app\r#\r\r import \u0026#34;fyne.io/fyne/v2/app\u0026#34; Package app provides app implementations for working with Fyne graphical interfaces. The fastest way to get started is to call app.New() which will normally load a new desktop application. If the \u0026ldquo;ci\u0026rdquo; tag is passed to go (go run -tags ci myapp.go) it will run an in-memory application.\nUsage\r#\r\rfunc New\r#\r\rfunc New() fyne.App New returns a new application instance with the default driver and no unique ID\nfunc NewWithID\r#\r\rfunc NewWithID(id string) fyne.App NewWithID returns a new app instance using the appropriate runtime driver. The ID string should be globally unique to this app.\ntypes\r#\r\r \rSettingsSchema  "},{"id":64,"href":"/docs/api/app/settingsschema/","title":"app.SettingsSchema","section":"app","content":"app.SettingsSchema\r#\r\r import \u0026#34;fyne.io/fyne/v2/app\u0026#34; Usage\r#\r\rtype SettingsSchema\r#\r\rtype SettingsSchema struct { \t// these items are used for global settings load \tThemeName string `json:\u0026#34;theme\u0026#34;` \tScale float32 `json:\u0026#34;scale\u0026#34;` \tPrimaryColor string `json:\u0026#34;primary_color\u0026#34;` } SettingsSchema is used for loading and storing global settings\nfunc (*SettingsSchema) StoragePath\r#\r\rfunc (sc *SettingsSchema) StoragePath() string StoragePath returns the location of the settings storage\n"},{"id":65,"href":"/docs/api/data/binding/","title":"binding","section":"data","content":"binding\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtypes\r#\r\r \rBool \rBoolList \rDataItem \rDataList \rDataListener \rDataMap \rExternalBool \rExternalBoolList \rExternalFloat \rExternalFloatList \rExternalInt \rExternalIntList \rExternalRune \rExternalRuneList \rExternalString \rExternalStringList \rExternalURI \rExternalURIList \rExternalUntyped \rExternalUntypedList \rExternalUntypedMap \rFloat \rFloatList \rInt \rIntList \rRune \rRuneList \rString \rStringList \rStruct \rURI \rURIList \rUntyped \rUntypedList \rUntypedMap  "},{"id":66,"href":"/docs/api/data/binding/bool/","title":"binding.Bool","section":"binding","content":"binding.Bool\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype Bool\r#\r\rtype Bool interface { \tDataItem \tGet() (bool, error) \tSet(bool) error } Bool supports binding a bool value.\nSince: \r2.0\rfunc BindPreferenceBool\r#\r\rfunc BindPreferenceBool(key string, p fyne.Preferences) Bool BindPreferenceBool returns a bindable bool value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.\nSince: \r2.0\rfunc NewBool\r#\r\rfunc NewBool() Bool NewBool returns a bindable bool value that is managed internally.\nSince: \r2.0\rfunc StringToBool\r#\r\rfunc StringToBool(str String) Bool StringToBool creates a binding that connects a String data item to a Bool. Changes to the String will be parsed and pushed to the Bool if the parse was successful, and setting the Bool update the String binding.\nSince: \r2.0\rfunc StringToBoolWithFormat\r#\r\rfunc StringToBoolWithFormat(str String, format string) Bool StringToBoolWithFormat creates a binding that connects a String data item to a Bool and is presented using the specified format. Changes to the Bool will be parsed and if the format matches and the parse is successful it will be pushed to the String. Setting the Bool will push a formatted value into the String.\nSince: \r2.0\r"},{"id":67,"href":"/docs/api/data/binding/boollist/","title":"binding.BoolList","section":"binding","content":"binding.BoolList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype BoolList\r#\r\rtype BoolList interface { \tDataList  \tAppend(value bool) error \tGet() ([]bool, error) \tGetValue(index int) (bool, error) \tPrepend(value bool) error \tSet(list []bool) error \tSetValue(index int, value bool) error } BoolList supports binding a list of bool values.\nSince: \r2.0\rfunc NewBoolList\r#\r\rfunc NewBoolList() BoolList NewBoolList returns a bindable list of bool values.\nSince: \r2.0\r"},{"id":68,"href":"/docs/api/data/binding/dataitem/","title":"binding.DataItem","section":"binding","content":"binding.DataItem\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype DataItem\r#\r\rtype DataItem interface { \t// AddListener attaches a new change listener to this DataItem. \t// Listeners are called each time the data inside this DataItem changes. \t// Additionally the listener will be triggered upon successful connection to get the current value. \tAddListener(DataListener) \t// RemoveListener will detach the specified change listener from the DataItem. \t// Disconnected listener will no longer be triggered when changes occur. \tRemoveListener(DataListener) } DataItem is the base interface for all bindable data items.\nSince: \r2.0\r"},{"id":69,"href":"/docs/api/data/binding/datalist/","title":"binding.DataList","section":"binding","content":"binding.DataList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype DataList\r#\r\rtype DataList interface { \tDataItem \tGetItem(index int) (DataItem, error) \tLength() int } DataList is the base interface for all bindable data lists.\nSince: \r2.0\r"},{"id":70,"href":"/docs/api/data/binding/datalistener/","title":"binding.DataListener","section":"binding","content":"binding.DataListener\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype DataListener\r#\r\rtype DataListener interface { \tDataChanged() } DataListener is any object that can register for changes in a bindable DataItem. See NewDataListener to define a new listener using just an inline function.\nSince: \r2.0\rfunc NewDataListener\r#\r\rfunc NewDataListener(fn func()) DataListener NewDataListener is a helper function that creates a new listener type from a simple callback function.\nSince: \r2.0\r"},{"id":71,"href":"/docs/api/data/binding/datamap/","title":"binding.DataMap","section":"binding","content":"binding.DataMap\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype DataMap\r#\r\rtype DataMap interface { \tDataItem \tGetItem(string) (DataItem, error) \tKeys() []string } DataMap is the base interface for all bindable data maps.\nSince: \r2.0\r"},{"id":72,"href":"/docs/api/data/binding/externalbool/","title":"binding.ExternalBool","section":"binding","content":"binding.ExternalBool\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalBool\r#\r\rtype ExternalBool interface { \tBool \tReload() error } ExternalBool supports binding a bool value to an external value.\nSince: \r2.0\rfunc BindBool\r#\r\rfunc BindBool(v *bool) ExternalBool BindBool returns a new bindable value that controls the contents of the provided bool variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":73,"href":"/docs/api/data/binding/externalboollist/","title":"binding.ExternalBoolList","section":"binding","content":"binding.ExternalBoolList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalBoolList\r#\r\rtype ExternalBoolList interface { \tBoolList  \tReload() error } ExternalBoolList supports binding a list of bool values from an external variable.\nSince: \r2.0\rfunc BindBoolList\r#\r\rfunc BindBoolList(v *[]bool) ExternalBoolList BindBoolList returns a bound list of bool values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":74,"href":"/docs/api/data/binding/externalfloat/","title":"binding.ExternalFloat","section":"binding","content":"binding.ExternalFloat\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalFloat\r#\r\rtype ExternalFloat interface { \tFloat \tReload() error } ExternalFloat supports binding a float64 value to an external value.\nSince: \r2.0\rfunc BindFloat\r#\r\rfunc BindFloat(v *float64) ExternalFloat BindFloat returns a new bindable value that controls the contents of the provided float64 variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":75,"href":"/docs/api/data/binding/externalfloatlist/","title":"binding.ExternalFloatList","section":"binding","content":"binding.ExternalFloatList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalFloatList\r#\r\rtype ExternalFloatList interface { \tFloatList  \tReload() error } ExternalFloatList supports binding a list of float64 values from an external variable.\nSince: \r2.0\rfunc BindFloatList\r#\r\rfunc BindFloatList(v *[]float64) ExternalFloatList BindFloatList returns a bound list of float64 values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":76,"href":"/docs/api/data/binding/externalint/","title":"binding.ExternalInt","section":"binding","content":"binding.ExternalInt\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalInt\r#\r\rtype ExternalInt interface { \tInt \tReload() error } ExternalInt supports binding a int value to an external value.\nSince: \r2.0\rfunc BindInt\r#\r\rfunc BindInt(v *int) ExternalInt BindInt returns a new bindable value that controls the contents of the provided int variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":77,"href":"/docs/api/data/binding/externalintlist/","title":"binding.ExternalIntList","section":"binding","content":"binding.ExternalIntList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalIntList\r#\r\rtype ExternalIntList interface { \tIntList  \tReload() error } ExternalIntList supports binding a list of int values from an external variable.\nSince: \r2.0\rfunc BindIntList\r#\r\rfunc BindIntList(v *[]int) ExternalIntList BindIntList returns a bound list of int values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":78,"href":"/docs/api/data/binding/externalrune/","title":"binding.ExternalRune","section":"binding","content":"binding.ExternalRune\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalRune\r#\r\rtype ExternalRune interface { \tRune \tReload() error } ExternalRune supports binding a rune value to an external value.\nSince: \r2.0\rfunc BindRune\r#\r\rfunc BindRune(v *rune) ExternalRune BindRune returns a new bindable value that controls the contents of the provided rune variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":79,"href":"/docs/api/data/binding/externalrunelist/","title":"binding.ExternalRuneList","section":"binding","content":"binding.ExternalRuneList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalRuneList\r#\r\rtype ExternalRuneList interface { \tRuneList  \tReload() error } ExternalRuneList supports binding a list of rune values from an external variable.\nSince: \r2.0\rfunc BindRuneList\r#\r\rfunc BindRuneList(v *[]rune) ExternalRuneList BindRuneList returns a bound list of rune values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":80,"href":"/docs/api/data/binding/externalstring/","title":"binding.ExternalString","section":"binding","content":"binding.ExternalString\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalString\r#\r\rtype ExternalString interface { \tString \tReload() error } ExternalString supports binding a string value to an external value.\nSince: \r2.0\rfunc BindString\r#\r\rfunc BindString(v *string) ExternalString BindString returns a new bindable value that controls the contents of the provided string variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":81,"href":"/docs/api/data/binding/externalstringlist/","title":"binding.ExternalStringList","section":"binding","content":"binding.ExternalStringList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalStringList\r#\r\rtype ExternalStringList interface { \tStringList  \tReload() error } ExternalStringList supports binding a list of string values from an external variable.\nSince: \r2.0\rfunc BindStringList\r#\r\rfunc BindStringList(v *[]string) ExternalStringList BindStringList returns a bound list of string values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":82,"href":"/docs/api/data/binding/externaluntyped/","title":"binding.ExternalUntyped","section":"binding","content":"binding.ExternalUntyped\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalUntyped\r#\r\rtype ExternalUntyped interface { \tUntyped \tReload() error } ExternalUntyped supports binding a interface{} value to an external value.\nSince: \r2.1\rfunc BindUntyped\r#\r\rfunc BindUntyped(v interface{}) ExternalUntyped BindUntyped returns a bindable interface{} value that is bound to an external type. The parameter must be a pointer to the type you wish to bind.\nSince: \r2.1\r"},{"id":83,"href":"/docs/api/data/binding/externaluntypedlist/","title":"binding.ExternalUntypedList","section":"binding","content":"binding.ExternalUntypedList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalUntypedList\r#\r\rtype ExternalUntypedList interface { \tUntypedList  \tReload() error } ExternalUntypedList supports binding a list of interface{} values from an external variable.\nSince: \r2.1\rfunc BindUntypedList\r#\r\rfunc BindUntypedList(v *[]interface{}) ExternalUntypedList BindUntypedList returns a bound list of interface{} values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.\nSince: \r2.1\r"},{"id":84,"href":"/docs/api/data/binding/externaluntypedmap/","title":"binding.ExternalUntypedMap","section":"binding","content":"binding.ExternalUntypedMap\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalUntypedMap\r#\r\rtype ExternalUntypedMap interface { \tUntypedMap \tReload() error } ExternalUntypedMap is a map data binding with all values untyped (interface{}), connected to an external data source.\nSince: \r2.0\rfunc BindUntypedMap\r#\r\rfunc BindUntypedMap(d *map[string]interface{}) ExternalUntypedMap BindUntypedMap creates a new map binding of string to interface{} based on the data passed. If your code changes the content of the map this refers to you should call Reload() to inform the bindings.\nSince: \r2.0\r"},{"id":85,"href":"/docs/api/data/binding/externaluri/","title":"binding.ExternalURI","section":"binding","content":"binding.ExternalURI\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalURI\r#\r\rtype ExternalURI interface { \tURI \tReload() error } ExternalURI supports binding a fyne.URI value to an external value.\nSince: \r2.1\rfunc BindURI\r#\r\rfunc BindURI(v *fyne.URI) ExternalURI BindURI returns a new bindable value that controls the contents of the provided fyne.URI variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.\nSince: \r2.1\r"},{"id":86,"href":"/docs/api/data/binding/externalurilist/","title":"binding.ExternalURIList","section":"binding","content":"binding.ExternalURIList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype ExternalURIList\r#\r\rtype ExternalURIList interface { \tURIList  \tReload() error } ExternalURIList supports binding a list of fyne.URI values from an external variable.\nSince: \r2.1\rfunc BindURIList\r#\r\rfunc BindURIList(v *[]fyne.URI) ExternalURIList BindURIList returns a bound list of fyne.URI values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.\nSince: \r2.1\r"},{"id":87,"href":"/docs/api/data/binding/float/","title":"binding.Float","section":"binding","content":"binding.Float\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype Float\r#\r\rtype Float interface { \tDataItem \tGet() (float64, error) \tSet(float64) error } Float supports binding a float64 value.\nSince: \r2.0\rfunc BindPreferenceFloat\r#\r\rfunc BindPreferenceFloat(key string, p fyne.Preferences) Float BindPreferenceFloat returns a bindable float64 value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.\nSince: \r2.0\rfunc NewFloat\r#\r\rfunc NewFloat() Float NewFloat returns a bindable float64 value that is managed internally.\nSince: \r2.0\rfunc StringToFloat\r#\r\rfunc StringToFloat(str String) Float StringToFloat creates a binding that connects a String data item to a Float. Changes to the String will be parsed and pushed to the Float if the parse was successful, and setting the Float update the String binding.\nSince: \r2.0\rfunc StringToFloatWithFormat\r#\r\rfunc StringToFloatWithFormat(str String, format string) Float StringToFloatWithFormat creates a binding that connects a String data item to a Float and is presented using the specified format. Changes to the Float will be parsed and if the format matches and the parse is successful it will be pushed to the String. Setting the Float will push a formatted value into the String.\nSince: \r2.0\r"},{"id":88,"href":"/docs/api/data/binding/floatlist/","title":"binding.FloatList","section":"binding","content":"binding.FloatList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype FloatList\r#\r\rtype FloatList interface { \tDataList  \tAppend(value float64) error \tGet() ([]float64, error) \tGetValue(index int) (float64, error) \tPrepend(value float64) error \tSet(list []float64) error \tSetValue(index int, value float64) error } FloatList supports binding a list of float64 values.\nSince: \r2.0\rfunc NewFloatList\r#\r\rfunc NewFloatList() FloatList NewFloatList returns a bindable list of float64 values.\nSince: \r2.0\r"},{"id":89,"href":"/docs/api/data/binding/int/","title":"binding.Int","section":"binding","content":"binding.Int\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype Int\r#\r\rtype Int interface { \tDataItem \tGet() (int, error) \tSet(int) error } Int supports binding a int value.\nSince: \r2.0\rfunc BindPreferenceInt\r#\r\rfunc BindPreferenceInt(key string, p fyne.Preferences) Int BindPreferenceInt returns a bindable int value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.\nSince: \r2.0\rfunc NewInt\r#\r\rfunc NewInt() Int NewInt returns a bindable int value that is managed internally.\nSince: \r2.0\rfunc StringToInt\r#\r\rfunc StringToInt(str String) Int StringToInt creates a binding that connects a String data item to a Int. Changes to the String will be parsed and pushed to the Int if the parse was successful, and setting the Int update the String binding.\nSince: \r2.0\rfunc StringToIntWithFormat\r#\r\rfunc StringToIntWithFormat(str String, format string) Int StringToIntWithFormat creates a binding that connects a String data item to a Int and is presented using the specified format. Changes to the Int will be parsed and if the format matches and the parse is successful it will be pushed to the String. Setting the Int will push a formatted value into the String.\nSince: \r2.0\r"},{"id":90,"href":"/docs/api/data/binding/intlist/","title":"binding.IntList","section":"binding","content":"binding.IntList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype IntList\r#\r\rtype IntList interface { \tDataList  \tAppend(value int) error \tGet() ([]int, error) \tGetValue(index int) (int, error) \tPrepend(value int) error \tSet(list []int) error \tSetValue(index int, value int) error } IntList supports binding a list of int values.\nSince: \r2.0\rfunc NewIntList\r#\r\rfunc NewIntList() IntList NewIntList returns a bindable list of int values.\nSince: \r2.0\r"},{"id":91,"href":"/docs/api/data/binding/rune/","title":"binding.Rune","section":"binding","content":"binding.Rune\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype Rune\r#\r\rtype Rune interface { \tDataItem \tGet() (rune, error) \tSet(rune) error } Rune supports binding a rune value.\nSince: \r2.0\rfunc NewRune\r#\r\rfunc NewRune() Rune NewRune returns a bindable rune value that is managed internally.\nSince: \r2.0\r"},{"id":92,"href":"/docs/api/data/binding/runelist/","title":"binding.RuneList","section":"binding","content":"binding.RuneList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype RuneList\r#\r\rtype RuneList interface { \tDataList  \tAppend(value rune) error \tGet() ([]rune, error) \tGetValue(index int) (rune, error) \tPrepend(value rune) error \tSet(list []rune) error \tSetValue(index int, value rune) error } RuneList supports binding a list of rune values.\nSince: \r2.0\rfunc NewRuneList\r#\r\rfunc NewRuneList() RuneList NewRuneList returns a bindable list of rune values.\nSince: \r2.0\r"},{"id":93,"href":"/docs/api/data/binding/string/","title":"binding.String","section":"binding","content":"binding.String\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype String\r#\r\rtype String interface { \tDataItem \tGet() (string, error) \tSet(string) error } String supports binding a string value.\nSince: \r2.0\rfunc BindPreferenceString\r#\r\rfunc BindPreferenceString(key string, p fyne.Preferences) String BindPreferenceString returns a bindable string value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.\nSince: \r2.0\rfunc BoolToString\r#\r\rfunc BoolToString(v Bool) String BoolToString creates a binding that connects a Bool data item to a String. Changes to the Bool will be pushed to the String and setting the string will parse and set the Bool if the parse was successful.\nSince: \r2.0\rfunc BoolToStringWithFormat\r#\r\rfunc BoolToStringWithFormat(v Bool, format string) String BoolToStringWithFormat creates a binding that connects a Bool data item to a String and is presented using the specified format. Changes to the Bool will be pushed to the String and setting the string will parse and set the Bool if the string matches the format and its parse was successful.\nSince: \r2.0\rfunc FloatToString\r#\r\rfunc FloatToString(v Float) String FloatToString creates a binding that connects a Float data item to a String. Changes to the Float will be pushed to the String and setting the string will parse and set the Float if the parse was successful.\nSince: \r2.0\rfunc FloatToStringWithFormat\r#\r\rfunc FloatToStringWithFormat(v Float, format string) String FloatToStringWithFormat creates a binding that connects a Float data item to a String and is presented using the specified format. Changes to the Float will be pushed to the String and setting the string will parse and set the Float if the string matches the format and its parse was successful.\nSince: \r2.0\rfunc IntToString\r#\r\rfunc IntToString(v Int) String IntToString creates a binding that connects a Int data item to a String. Changes to the Int will be pushed to the String and setting the string will parse and set the Int if the parse was successful.\nSince: \r2.0\rfunc IntToStringWithFormat\r#\r\rfunc IntToStringWithFormat(v Int, format string) String IntToStringWithFormat creates a binding that connects a Int data item to a String and is presented using the specified format. Changes to the Int will be pushed to the String and setting the string will parse and set the Int if the string matches the format and its parse was successful.\nSince: \r2.0\rfunc NewString\r#\r\rfunc NewString() String NewString returns a bindable string value that is managed internally.\nSince: \r2.0\rfunc URIToString\r#\r\rfunc URIToString(v URI) String URIToString creates a binding that connects a URI data item to a String. Changes to the URI will be pushed to the String and setting the string will parse and set the URI if the parse was successful.\nSince: \r2.1\r"},{"id":94,"href":"/docs/api/data/binding/stringlist/","title":"binding.StringList","section":"binding","content":"binding.StringList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype StringList\r#\r\rtype StringList interface { \tDataList  \tAppend(value string) error \tGet() ([]string, error) \tGetValue(index int) (string, error) \tPrepend(value string) error \tSet(list []string) error \tSetValue(index int, value string) error } StringList supports binding a list of string values.\nSince: \r2.0\rfunc NewStringList\r#\r\rfunc NewStringList() StringList NewStringList returns a bindable list of string values.\nSince: \r2.0\r"},{"id":95,"href":"/docs/api/data/binding/struct/","title":"binding.Struct","section":"binding","content":"binding.Struct\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype Struct\r#\r\rtype Struct interface { \tDataMap \tGetValue(string) (interface{}, error) \tSetValue(string, interface{}) error \tReload() error } Struct is the base interface for a bound struct type.\nSince: \r2.0\rfunc BindStruct\r#\r\rfunc BindStruct(i interface{}) Struct BindStruct creates a new map binding of string to interface{} using the struct passed as data. The key for each item is a string representation of each exported field with the value set as an interface{}. Only exported fields are included.\nSince: \r2.0\r"},{"id":96,"href":"/docs/api/data/binding/untyped/","title":"binding.Untyped","section":"binding","content":"binding.Untyped\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype Untyped\r#\r\rtype Untyped interface { \tDataItem \tGet() (interface{}, error) \tSet(interface{}) error } Untyped supports binding a interface{} value.\nSince: \r2.1\rfunc NewUntyped\r#\r\rfunc NewUntyped() Untyped NewUntyped returns a bindable interface{} value that is managed internally.\nSince: \r2.1\r"},{"id":97,"href":"/docs/api/data/binding/untypedlist/","title":"binding.UntypedList","section":"binding","content":"binding.UntypedList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype UntypedList\r#\r\rtype UntypedList interface { \tDataList  \tAppend(value interface{}) error \tGet() ([]interface{}, error) \tGetValue(index int) (interface{}, error) \tPrepend(value interface{}) error \tSet(list []interface{}) error \tSetValue(index int, value interface{}) error } UntypedList supports binding a list of interface{} values.\nSince: \r2.1\rfunc NewUntypedList\r#\r\rfunc NewUntypedList() UntypedList NewUntypedList returns a bindable list of interface{} values.\nSince: \r2.1\r"},{"id":98,"href":"/docs/api/data/binding/untypedmap/","title":"binding.UntypedMap","section":"binding","content":"binding.UntypedMap\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype UntypedMap\r#\r\rtype UntypedMap interface { \tDataMap \tDelete(string) \tGet() (map[string]interface{}, error) \tGetValue(string) (interface{}, error) \tSet(map[string]interface{}) error \tSetValue(string, interface{}) error } UntypedMap is a map data binding with all values Untyped (interface{}).\nSince: \r2.0\rfunc NewUntypedMap\r#\r\rfunc NewUntypedMap() UntypedMap NewUntypedMap creates a new, empty map binding of string to interface{}.\nSince: \r2.0\r"},{"id":99,"href":"/docs/api/data/binding/uri/","title":"binding.URI","section":"binding","content":"binding.URI\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype URI\r#\r\rtype URI interface { \tDataItem \tGet() (fyne.URI, error) \tSet(fyne.URI) error } URI supports binding a fyne.URI value.\nSince: \r2.1\rfunc NewURI\r#\r\rfunc NewURI() URI NewURI returns a bindable fyne.URI value that is managed internally.\nSince: \r2.1\rfunc StringToURI\r#\r\rfunc StringToURI(str String) URI StringToURI creates a binding that connects a String data item to a URI. Changes to the String will be parsed and pushed to the URI if the parse was successful, and setting the URI update the String binding.\nSince: \r2.1\r"},{"id":100,"href":"/docs/api/data/binding/urilist/","title":"binding.URIList","section":"binding","content":"binding.URIList\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/binding\u0026#34; Usage\r#\r\rtype URIList\r#\r\rtype URIList interface { \tDataList  \tAppend(value fyne.URI) error \tGet() ([]fyne.URI, error) \tGetValue(index int) (fyne.URI, error) \tPrepend(value fyne.URI) error \tSet(list []fyne.URI) error \tSetValue(index int, value fyne.URI) error } URIList supports binding a list of fyne.URI values.\nSince: \r2.1\rfunc NewURIList\r#\r\rfunc NewURIList() URIList NewURIList returns a bindable list of fyne.URI values.\nSince: \r2.1\r"},{"id":101,"href":"/docs/api/canvas/","title":"canvas","section":"Api document","content":"canvas\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Package canvas contains all of the primitive CanvasObjects that make up a Fyne GUI\nThe types implemented in this package are used as building blocks in order to build higher order functionality. These types are designed to be non-interactive, by design. If additional functonality is required, it\u0026rsquo;s usually a sign that this type should be used as part of a custom Widget.\nUsage\r#\r\rconst ( \t// DurationStandard is the time a standard interface animation will run. \t// \t// Since: 2.0 \tDurationStandard = time.Millisecond * 300 \t// DurationShort is the time a subtle or small transition should use. \t// \t// Since: 2.0 \tDurationShort = time.Millisecond * 150 ) func NewColorRGBAAnimation\r#\r\rfunc NewColorRGBAAnimation(start, stop color.Color, d time.Duration, fn func(color.Color)) *fyne.Animation NewColorRGBAAnimation sets up a new animation that will transition from the start to stop Color over the specified Duration. The colour transition will move linearly through the RGB colour space. The content of fn should apply the color values to an object and refresh it. You should call Start() on the returned animation to start it.\nSince: \r2.0\rfunc NewPositionAnimation\r#\r\rfunc NewPositionAnimation(start, stop fyne.Position, d time.Duration, fn func(fyne.Position)) *fyne.Animation NewPositionAnimation sets up a new animation that will transition from the start to stop Position over the specified Duration. The content of fn should apply the position value to an object for the change to be visible. You should call Start() on the returned animation to start it.\nSince: \r2.0\rfunc NewSizeAnimation\r#\r\rfunc NewSizeAnimation(start, stop fyne.Size, d time.Duration, fn func(fyne.Size)) *fyne.Animation NewSizeAnimation sets up a new animation that will transition from the start to stop Size over the specified Duration. The content of fn should apply the size value to an object for the change to be visible. You should call Start() on the returned animation to start it.\nSince: \r2.0\rfunc Refresh\r#\r\rfunc Refresh(obj fyne.CanvasObject) Refresh instructs the containing canvas to refresh the specified obj.\ntypes\r#\r\r \rCircle \rImage \rImageFill \rImageScale \rLine \rLinearGradient \rRadialGradient \rRaster \rRectangle \rText  "},{"id":102,"href":"/docs/api/canvas/circle/","title":"canvas.Circle","section":"canvas","content":"canvas.Circle\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Usage\r#\r\rtype Circle\r#\r\rtype Circle struct { \tPosition1 fyne.Position // The current top-left position of the Circle \tPosition2 fyne.Position // The current bottomright position of the Circle \tHidden bool // Is this circle currently hidden  \tFillColor color.Color // The circle fill color \tStrokeColor color.Color // The circle stroke color \tStrokeWidth float32 // The stroke width of the circle } Circle describes a colored circle primitive in a Fyne canvas\nfunc NewCircle\r#\r\rfunc NewCircle(color color.Color) *Circle NewCircle returns a new Circle instance\nfunc (*Circle) Hide\r#\r\rfunc (l *Circle) Hide() Hide will set this circle to not be visible\nfunc (*Circle) MinSize\r#\r\rfunc (l *Circle) MinSize() fyne.Size MinSize for a Circle simply returns Size{1, 1} as there is no explicit content\nfunc (*Circle) Move\r#\r\rfunc (l *Circle) Move(pos fyne.Position) Move the circle object to a new position, relative to its parent / canvas\nfunc (*Circle) Position\r#\r\rfunc (l *Circle) Position() fyne.Position Position gets the current top-left position of this circle object, relative to its parent / canvas\nfunc (*Circle) Refresh\r#\r\rfunc (l *Circle) Refresh() Refresh causes this object to be redrawn in it\u0026rsquo;s current state\nfunc (*Circle) Resize\r#\r\rfunc (l *Circle) Resize(size fyne.Size) Resize sets a new bottom-right position for the circle object If it has a stroke width this will cause it to Refresh.\nfunc (*Circle) Show\r#\r\rfunc (l *Circle) Show() Show will set this circle to be visible\nfunc (*Circle) Size\r#\r\rfunc (l *Circle) Size() fyne.Size Size returns the current size of bounding box for this circle object\nfunc (*Circle) Visible\r#\r\rfunc (l *Circle) Visible() bool Visible returns true if this circle is visible, false otherwise\n"},{"id":103,"href":"/docs/api/canvas/image/","title":"canvas.Image","section":"canvas","content":"canvas.Image\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Usage\r#\r\rtype Image\r#\r\rtype Image struct {  \t// one of the following sources will provide our image data \tFile string // Load the image from a file \tResource fyne.Resource // Load the image from an in-memory resource \tImage image.Image // Specify a loaded image to use in this canvas object  \tTranslucency float64 // Set a translucency value \u0026gt; 0.0 to fade the image \tFillMode ImageFill // Specify how the image should expand to fill or fit the available space \tScaleMode ImageScale // Specify the type of scaling interpolation applied to the image } Image describes a drawable image area that can render in a Fyne canvas The image may be a vector or a bitmap representation and it will fill the area. The fill mode can be changed by setting FillMode to a different ImageFill.\nfunc NewImageFromFile\r#\r\rfunc NewImageFromFile(file string) *Image NewImageFromFile creates a new image from a local file. Images returned from this method will scale to fit the canvas object. The method for scaling can be set using the Fill field.\nfunc NewImageFromImage\r#\r\rfunc NewImageFromImage(img image.Image) *Image NewImageFromImage returns a new Image instance that is rendered from the Go image.Image passed in. Images returned from this method will scale to fit the canvas object. The method for scaling can be set using the Fill field.\nfunc NewImageFromReader\r#\r\rfunc NewImageFromReader(read io.Reader, name string) *Image NewImageFromReader creates a new image from a data stream. The name parameter is required to uniquely identify this image (for caching etc). If the image in this io.Reader is an SVG, the name should end \u0026ldquo;.svg\u0026rdquo;. Images returned from this method will scale to fit the canvas object. The method for scaling can be set using the Fill field.\nSince: \r2.0\rfunc NewImageFromResource\r#\r\rfunc NewImageFromResource(res fyne.Resource) *Image NewImageFromResource creates a new image by loading the specified resource. Images returned from this method will scale to fit the canvas object. The method for scaling can be set using the Fill field.\nfunc NewImageFromURI\r#\r\rfunc NewImageFromURI(uri fyne.URI) *Image NewImageFromURI creates a new image from named resource. File URIs will read the file path and other schemes will download the data into a resource. HTTP and HTTPs URIs will use the GET method by default to request the resource. Images returned from this method will scale to fit the canvas object. The method for scaling can be set using the Fill field.\nSince: \r2.0\rfunc (*Image) Alpha\r#\r\rfunc (i *Image) Alpha() float64 Alpha is a convenience function that returns the alpha value for an image based on its Translucency value. The result is 1.0 - Translucency.\nfunc (*Image) Hide\r#\r\rfunc (r *Image) Hide() Hide will set this object to not be visible.\nfunc (*Image) MinSize\r#\r\rfunc (r *Image) MinSize() fyne.Size MinSize returns the specified minimum size, if set, or {1, 1} otherwise.\nfunc (*Image) Move\r#\r\rfunc (r *Image) Move(pos fyne.Position) Move the object to a new position, relative to its parent.\nfunc (*Image) Position\r#\r\rfunc (r *Image) Position() fyne.Position CurrentPosition gets the current position of this canvas object, relative to its parent.\nfunc (*Image) Refresh\r#\r\rfunc (i *Image) Refresh() Refresh causes this object to be redrawn in it\u0026rsquo;s current state\nfunc (*Image) Resize\r#\r\rfunc (i *Image) Resize(s fyne.Size) Resize on an image will scale the content or reposition it according to FillMode. It will normally cause a Refresh to ensure the pixels are recalculated.\nfunc (*Image) SetMinSize\r#\r\rfunc (r *Image) SetMinSize(size fyne.Size) SetMinSize specifies the smallest size this object should be.\nfunc (*Image) Show\r#\r\rfunc (r *Image) Show() Show will set this object to be visible.\nfunc (*Image) Size\r#\r\rfunc (r *Image) Size() fyne.Size CurrentSize returns the current size of this canvas object.\nfunc (*Image) Visible\r#\r\rfunc (r *Image) Visible() bool IsVisible returns true if this object is visible, false otherwise.\n"},{"id":104,"href":"/docs/api/canvas/imagefill/","title":"canvas.ImageFill","section":"canvas","content":"canvas.ImageFill\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Usage\r#\r\rtype ImageFill\r#\r\rtype ImageFill int ImageFill defines the different type of ways an image can stretch to fill its space.\nconst ( \t// ImageFillStretch will scale the image to match the Size() values. \t// This is the default and does not maintain aspect ratio. \tImageFillStretch ImageFill = iota \t// ImageFillContain makes the image fit within the object Size(), \t// centrally and maintaining aspect ratio. \t// There may be transparent sections top and bottom or left and right. \tImageFillContain //(Fit) \t// ImageFillOriginal ensures that the container grows to the pixel dimensions \t// required to fit the original image. The aspect of the image will be maintained so, \t// as with ImageFillContain there may be transparent areas around the image. \t// Note that the minSize may be smaller than the image dimensions if scale \u0026gt; 1. \tImageFillOriginal ) "},{"id":105,"href":"/docs/api/canvas/imagescale/","title":"canvas.ImageScale","section":"canvas","content":"canvas.ImageScale\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Usage\r#\r\rtype ImageScale\r#\r\rtype ImageScale int32 ImageScale defines the different scaling filters used to scaling images\nconst ( \t// ImageScaleSmooth will scale the image using ApproxBiLinear filter (or GL equivalent) \tImageScaleSmooth ImageScale = 0 \t// ImageScalePixels will scale the image using NearestNeighbor filter (or GL equivalent) \tImageScalePixels ImageScale = 1 \t// ImageScaleFastest will scale the image using hardware GPU if available \t// \t// Since: 2.0 \tImageScaleFastest ImageScale = 2 ) "},{"id":106,"href":"/docs/api/canvas/line/","title":"canvas.Line","section":"canvas","content":"canvas.Line\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Usage\r#\r\rtype Line\r#\r\rtype Line struct { \tPosition1 fyne.Position // The current top-left position of the Line \tPosition2 fyne.Position // The current bottomright position of the Line \tHidden bool // Is this Line currently hidden  \tStrokeColor color.Color // The line stroke color \tStrokeWidth float32 // The stroke width of the line } Line describes a colored line primitive in a Fyne canvas. Lines are special as they can have a negative width or height to indicate an inverse slope (i.e. slope up vs down).\nfunc NewLine\r#\r\rfunc NewLine(color color.Color) *Line NewLine returns a new Line instance\nfunc (*Line) Hide\r#\r\rfunc (l *Line) Hide() Hide will set this line to not be visible\nfunc (*Line) MinSize\r#\r\rfunc (l *Line) MinSize() fyne.Size MinSize for a Line simply returns Size{1, 1} as there is no explicit content\nfunc (*Line) Move\r#\r\rfunc (l *Line) Move(pos fyne.Position) Move the line object to a new position, relative to its parent / canvas\nfunc (*Line) Position\r#\r\rfunc (l *Line) Position() fyne.Position Position gets the current top-left position of this line object, relative to its parent / canvas\nfunc (*Line) Refresh\r#\r\rfunc (l *Line) Refresh() Refresh causes this object to be redrawn in it\u0026rsquo;s current state\nfunc (*Line) Resize\r#\r\rfunc (l *Line) Resize(size fyne.Size) Resize sets a new bottom-right position for the line object and it will then be refreshed.\nfunc (*Line) Show\r#\r\rfunc (l *Line) Show() Show will set this line to be visible\nfunc (*Line) Size\r#\r\rfunc (l *Line) Size() fyne.Size Size returns the current size of bounding box for this line object\nfunc (*Line) Visible\r#\r\rfunc (l *Line) Visible() bool Visible returns true if this line// Show will set this circle to be visible is visible, false otherwise\n"},{"id":107,"href":"/docs/api/canvas/lineargradient/","title":"canvas.LinearGradient","section":"canvas","content":"canvas.LinearGradient\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Usage\r#\r\rtype LinearGradient\r#\r\rtype LinearGradient struct { \tStartColor color.Color // The beginning color of the gradient \tEndColor color.Color // The end color of the gradient \tAngle float64 // The angle of the gradient (0/180 for vertical; 90/270 for horizontal) } LinearGradient defines a Gradient travelling straight at a given angle. The only supported values for the angle are 0.0 (vertical) and 90.0 (horizontal), currently.\nfunc NewHorizontalGradient\r#\r\rfunc NewHorizontalGradient(start, end color.Color) *LinearGradient NewHorizontalGradient creates a new horizontally travelling linear gradient. The start color will be at the left of the gradient and the end color will be at the right.\nfunc NewLinearGradient\r#\r\rfunc NewLinearGradient(start, end color.Color, angle float64) *LinearGradient NewLinearGradient creates a linear gradient at a the specified angle. The angle parameter is the degree angle along which the gradient is calculated. A NewHorizontalGradient uses 270 degrees and NewVerticalGradient is 0 degrees.\nfunc NewVerticalGradient\r#\r\rfunc NewVerticalGradient(start color.Color, end color.Color) *LinearGradient NewVerticalGradient creates a new vertically travelling linear gradient. The start color will be at the top of the gradient and the end color will be at the bottom.\nfunc (*LinearGradient) Generate\r#\r\rfunc (g *LinearGradient) Generate(iw, ih int) image.Image Generate calculates an image of the gradient with the specified width and height.\nfunc (*LinearGradient) Hide\r#\r\rfunc (r *LinearGradient) Hide() Hide will set this object to not be visible.\nfunc (*LinearGradient) MinSize\r#\r\rfunc (r *LinearGradient) MinSize() fyne.Size MinSize returns the specified minimum size, if set, or {1, 1} otherwise.\nfunc (*LinearGradient) Move\r#\r\rfunc (r *LinearGradient) Move(pos fyne.Position) Move the object to a new position, relative to its parent.\nfunc (*LinearGradient) Position\r#\r\rfunc (r *LinearGradient) Position() fyne.Position CurrentPosition gets the current position of this canvas object, relative to its parent.\nfunc (*LinearGradient) Refresh\r#\r\rfunc (g *LinearGradient) Refresh() Refresh causes this object to be redrawn in it\u0026rsquo;s current state\nfunc (*LinearGradient) Resize\r#\r\rfunc (r *LinearGradient) Resize(size fyne.Size) Resize sets a new size for the canvas object.\nfunc (*LinearGradient) SetMinSize\r#\r\rfunc (r *LinearGradient) SetMinSize(size fyne.Size) SetMinSize specifies the smallest size this object should be.\nfunc (*LinearGradient) Show\r#\r\rfunc (r *LinearGradient) Show() Show will set this object to be visible.\nfunc (*LinearGradient) Size\r#\r\rfunc (r *LinearGradient) Size() fyne.Size CurrentSize returns the current size of this canvas object.\nfunc (*LinearGradient) Visible\r#\r\rfunc (r *LinearGradient) Visible() bool IsVisible returns true if this object is visible, false otherwise.\n"},{"id":108,"href":"/docs/api/canvas/radialgradient/","title":"canvas.RadialGradient","section":"canvas","content":"canvas.RadialGradient\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Usage\r#\r\rtype RadialGradient\r#\r\rtype RadialGradient struct { \tStartColor color.Color // The beginning color of the gradient \tEndColor color.Color // The end color of the gradient \t// The offset of the center for generation of the gradient. \t// This is not a DP measure but relates to the width/height. \t// A value of 0.5 would move the center by the half width/height. \tCenterOffsetX, CenterOffsetY float64 } RadialGradient defines a Gradient travelling radially from a center point outward.\nfunc NewRadialGradient\r#\r\rfunc NewRadialGradient(start, end color.Color) *RadialGradient NewRadialGradient creates a new radial gradient.\nfunc (*RadialGradient) Generate\r#\r\rfunc (g *RadialGradient) Generate(iw, ih int) image.Image Generate calculates an image of the gradient with the specified width and height.\nfunc (*RadialGradient) Hide\r#\r\rfunc (r *RadialGradient) Hide() Hide will set this object to not be visible.\nfunc (*RadialGradient) MinSize\r#\r\rfunc (r *RadialGradient) MinSize() fyne.Size MinSize returns the specified minimum size, if set, or {1, 1} otherwise.\nfunc (*RadialGradient) Move\r#\r\rfunc (r *RadialGradient) Move(pos fyne.Position) Move the object to a new position, relative to its parent.\nfunc (*RadialGradient) Position\r#\r\rfunc (r *RadialGradient) Position() fyne.Position CurrentPosition gets the current position of this canvas object, relative to its parent.\nfunc (*RadialGradient) Refresh\r#\r\rfunc (g *RadialGradient) Refresh() Refresh causes this object to be redrawn in it\u0026rsquo;s current state\nfunc (*RadialGradient) Resize\r#\r\rfunc (r *RadialGradient) Resize(size fyne.Size) Resize sets a new size for the canvas object.\nfunc (*RadialGradient) SetMinSize\r#\r\rfunc (r *RadialGradient) SetMinSize(size fyne.Size) SetMinSize specifies the smallest size this object should be.\nfunc (*RadialGradient) Show\r#\r\rfunc (r *RadialGradient) Show() Show will set this object to be visible.\nfunc (*RadialGradient) Size\r#\r\rfunc (r *RadialGradient) Size() fyne.Size CurrentSize returns the current size of this canvas object.\nfunc (*RadialGradient) Visible\r#\r\rfunc (r *RadialGradient) Visible() bool IsVisible returns true if this object is visible, false otherwise.\n"},{"id":109,"href":"/docs/api/canvas/raster/","title":"canvas.Raster","section":"canvas","content":"canvas.Raster\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Usage\r#\r\rtype Raster\r#\r\rtype Raster struct {  \t// Render the raster image from code \tGenerator func(w, h int) image.Image  \t// Set a translucency value \u0026gt; 0.0 to fade the raster \tTranslucency float64 \t// Specify the type of scaling interpolation applied to the raster if it is not full-size \t// Since: 1.4.1 \tScaleMode ImageScale } Raster describes a raster image area that can render in a Fyne canvas\nfunc NewRaster\r#\r\rfunc NewRaster(generate func(w, h int) image.Image) *Raster NewRaster returns a new Image instance that is rendered dynamically using the specified generate function. Images returned from this method should draw dynamically to fill the width and height parameters passed to pixelColor.\nfunc NewRasterFromImage\r#\r\rfunc NewRasterFromImage(img image.Image) *Raster NewRasterFromImage returns a new Raster instance that is rendered from the Go image.Image passed in. Rasters returned from this method will map pixel for pixel to the screen starting img.Bounds().Min pixels from the top left of the canvas object. Truncates rather than scales the image. If smaller than the target space, the image will be padded with zero-pixels to the target size.\nfunc NewRasterWithPixels\r#\r\rfunc NewRasterWithPixels(pixelColor func(x, y, w, h int) color.Color) *Raster NewRasterWithPixels returns a new Image instance that is rendered dynamically by iterating over the specified pixelColor function for each x, y pixel. Images returned from this method should draw dynamically to fill the width and height parameters passed to pixelColor.\nfunc (*Raster) Alpha\r#\r\rfunc (r *Raster) Alpha() float64 Alpha is a convenience function that returns the alpha value for a raster based on its Translucency value. The result is 1.0 - Translucency.\nfunc (*Raster) Hide\r#\r\rfunc (r *Raster) Hide() Hide will set this object to not be visible.\nfunc (*Raster) MinSize\r#\r\rfunc (r *Raster) MinSize() fyne.Size MinSize returns the specified minimum size, if set, or {1, 1} otherwise.\nfunc (*Raster) Move\r#\r\rfunc (r *Raster) Move(pos fyne.Position) Move the object to a new position, relative to its parent.\nfunc (*Raster) Position\r#\r\rfunc (r *Raster) Position() fyne.Position CurrentPosition gets the current position of this canvas object, relative to its parent.\nfunc (*Raster) Refresh\r#\r\rfunc (r *Raster) Refresh() Refresh causes this object to be redrawn in it\u0026rsquo;s current state\nfunc (*Raster) Resize\r#\r\rfunc (r *Raster) Resize(s fyne.Size) Resize on a raster image causes the new size to be set and then calls Refresh. This causes the underlying data to be recalculated and a new output to be drawn.\nfunc (*Raster) SetMinSize\r#\r\rfunc (r *Raster) SetMinSize(size fyne.Size) SetMinSize specifies the smallest size this object should be.\nfunc (*Raster) Show\r#\r\rfunc (r *Raster) Show() Show will set this object to be visible.\nfunc (*Raster) Size\r#\r\rfunc (r *Raster) Size() fyne.Size CurrentSize returns the current size of this canvas object.\nfunc (*Raster) Visible\r#\r\rfunc (r *Raster) Visible() bool IsVisible returns true if this object is visible, false otherwise.\n"},{"id":110,"href":"/docs/api/canvas/rectangle/","title":"canvas.Rectangle","section":"canvas","content":"canvas.Rectangle\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Usage\r#\r\rtype Rectangle\r#\r\rtype Rectangle struct { \tFillColor color.Color // The rectangle fill color \tStrokeColor color.Color // The rectangle stroke color \tStrokeWidth float32 // The stroke width of the rectangle } Rectangle describes a colored rectangle primitive in a Fyne canvas\nfunc NewRectangle\r#\r\rfunc NewRectangle(color color.Color) *Rectangle NewRectangle returns a new Rectangle instance\nfunc (*Rectangle) Hide\r#\r\rfunc (r *Rectangle) Hide() Hide will set this object to not be visible.\nfunc (*Rectangle) MinSize\r#\r\rfunc (r *Rectangle) MinSize() fyne.Size MinSize returns the specified minimum size, if set, or {1, 1} otherwise.\nfunc (*Rectangle) Move\r#\r\rfunc (r *Rectangle) Move(pos fyne.Position) Move the object to a new position, relative to its parent.\nfunc (*Rectangle) Position\r#\r\rfunc (r *Rectangle) Position() fyne.Position CurrentPosition gets the current position of this canvas object, relative to its parent.\nfunc (*Rectangle) Refresh\r#\r\rfunc (r *Rectangle) Refresh() Refresh causes this object to be redrawn in it\u0026rsquo;s current state\nfunc (*Rectangle) Resize\r#\r\rfunc (r *Rectangle) Resize(s fyne.Size) Resize on a rectangle updates the new size of this object. If it has a stroke width this will cause it to Refresh.\nfunc (*Rectangle) SetMinSize\r#\r\rfunc (r *Rectangle) SetMinSize(size fyne.Size) SetMinSize specifies the smallest size this object should be.\nfunc (*Rectangle) Show\r#\r\rfunc (r *Rectangle) Show() Show will set this object to be visible.\nfunc (*Rectangle) Size\r#\r\rfunc (r *Rectangle) Size() fyne.Size CurrentSize returns the current size of this canvas object.\nfunc (*Rectangle) Visible\r#\r\rfunc (r *Rectangle) Visible() bool IsVisible returns true if this object is visible, false otherwise.\n"},{"id":111,"href":"/docs/api/canvas/text/","title":"canvas.Text","section":"canvas","content":"canvas.Text\r#\r\r import \u0026#34;fyne.io/fyne/v2/canvas\u0026#34; Usage\r#\r\rtype Text\r#\r\rtype Text struct { \tAlignment fyne.TextAlign // The alignment of the text content  \tColor color.Color // The main text draw color \tText string // The string content of this Text \tTextSize float32 // Size of the text - if the Canvas scale is 1.0 this will be equivalent to point size \tTextStyle fyne.TextStyle // The style of the text content } Text describes a text primitive in a Fyne canvas. A text object can have a style set which will apply to the whole string. No formatting or text parsing will be performed\nfunc NewText\r#\r\rfunc NewText(text string, color color.Color) *Text NewText returns a new Text implementation\nfunc (*Text) Hide\r#\r\rfunc (r *Text) Hide() Hide will set this object to not be visible.\nfunc (*Text) MinSize\r#\r\rfunc (t *Text) MinSize() fyne.Size MinSize returns the minimum size of this text object based on its font size and content. This is normally determined by the render implementation.\nfunc (*Text) Move\r#\r\rfunc (r *Text) Move(pos fyne.Position) Move the object to a new position, relative to its parent.\nfunc (*Text) Position\r#\r\rfunc (r *Text) Position() fyne.Position CurrentPosition gets the current position of this canvas object, relative to its parent.\nfunc (*Text) Refresh\r#\r\rfunc (t *Text) Refresh() Refresh causes this object to be redrawn in it\u0026rsquo;s current state\nfunc (*Text) Resize\r#\r\rfunc (r *Text) Resize(size fyne.Size) Resize sets a new size for the canvas object.\nfunc (*Text) SetMinSize\r#\r\rfunc (t *Text) SetMinSize(size fyne.Size) SetMinSize has no effect as the smallest size this canvas object can be is based on its font size and content.\nfunc (*Text) Show\r#\r\rfunc (r *Text) Show() Show will set this object to be visible.\nfunc (*Text) Size\r#\r\rfunc (r *Text) Size() fyne.Size CurrentSize returns the current size of this canvas object.\nfunc (*Text) Visible\r#\r\rfunc (r *Text) Visible() bool IsVisible returns true if this object is visible, false otherwise.\n"},{"id":112,"href":"/docs/api/container/","title":"container","section":"Api document","content":"container\r#\r\r import \u0026#34;fyne.io/fyne/v2/container\u0026#34; Package container provides container widgets that are used to lay out and organise applications\nUsage\r#\r\rconst ( \t// ScrollBoth supports horizontal and vertical scrolling. \tScrollBoth ScrollDirection = widget.ScrollBoth \t// ScrollHorizontalOnly specifies the scrolling should only happen left to right. \tScrollHorizontalOnly = widget.ScrollHorizontalOnly \t// ScrollVerticalOnly specifies the scrolling should only happen top to bottom. \tScrollVerticalOnly = widget.ScrollVerticalOnly \t// ScrollNone turns off scrolling for this container. \t// \t// Since: 2.1 \tScrollNone = widget.ScrollNone ) Constants for valid values of ScrollDirection.\nfunc New\r#\r\rfunc New(layout fyne.Layout, objects ...fyne.CanvasObject) *fyne.Container New returns a new Container instance holding the specified CanvasObjects which will be laid out according to the specified Layout.\nSince: \r2.0\rfunc NewAdaptiveGrid\r#\r\rfunc NewAdaptiveGrid(rowcols int, objects ...fyne.CanvasObject) *fyne.Container NewAdaptiveGrid creates a new container with the specified objects and using the grid layout. When in a horizontal arrangement the rowcols parameter will specify the column count, when in vertical it will specify the rows. On mobile this will dynamically refresh when device is rotated.\nSince: \r1.4\rfunc NewBorder\r#\r\rfunc NewBorder(top, bottom, left, right fyne.CanvasObject, objects ...fyne.CanvasObject) *fyne.Container NewBorder creates a new container with the specified objects and using the border layout. The top, bottom, left and right parameters specify the items that should be placed around edges, the remaining elements will be in the center. Nil can be used to an edge if it should not be filled.\nSince: \r1.4\rfunc NewCenter\r#\r\rfunc NewCenter(objects ...fyne.CanvasObject) *fyne.Container NewCenter creates a new container with the specified objects centered in the available space.\nSince: \r1.4\rfunc NewGridWithColumns\r#\r\rfunc NewGridWithColumns(cols int, objects ...fyne.CanvasObject) *fyne.Container NewGridWithColumns creates a new container with the specified objects and using the grid layout with a specified number of columns. The number of rows will depend on how many children are in the container.\nSince: \r1.4\rfunc NewGridWithRows\r#\r\rfunc NewGridWithRows(rows int, objects ...fyne.CanvasObject) *fyne.Container NewGridWithRows creates a new container with the specified objects and using the grid layout with a specified number of rows. The number of columns will depend on how many children are in the container.\nSince: \r1.4\rfunc NewGridWrap\r#\r\rfunc NewGridWrap(size fyne.Size, objects ...fyne.CanvasObject) *fyne.Container NewGridWrap creates a new container with the specified objects and using the gridwrap layout. Every element will be resized to the size parameter and the content will arrange along a row and flow to a new row if the elements don\u0026rsquo;t fit.\nSince: \r1.4\rfunc NewHBox\r#\r\rfunc NewHBox(objects ...fyne.CanvasObject) *fyne.Container NewHBox creates a new container with the specified objects and using the HBox layout. The objects will be placed in the container from left to right.\nSince: \r1.4\rfunc NewMax\r#\r\rfunc NewMax(objects ...fyne.CanvasObject) *fyne.Container NewMax creates a new container with the specified objects filling the available space.\nSince: \r1.4\rfunc NewPadded\r#\r\rfunc NewPadded(objects ...fyne.CanvasObject) *fyne.Container NewPadded creates a new container with the specified objects inset by standard padding size.\nSince: \r1.4\rfunc NewVBox\r#\r\rfunc NewVBox(objects ...fyne.CanvasObject) *fyne.Container NewVBox creates a new container with the specified objects and using the VBox layout. The objects will be stacked in the container from top to bottom.\nSince: \r1.4\rfunc NewWithoutLayout\r#\r\rfunc NewWithoutLayout(objects ...fyne.CanvasObject) *fyne.Container NewWithoutLayout returns a new Container instance holding the specified CanvasObjects that are manually arranged.\nSince: \r2.0\rtypes\r#\r\r \rAppTabs \rDocTabs \rScroll \rScrollDirection \rSplit \rTabItem \rTabLocation  "},{"id":113,"href":"/docs/api/container/apptabs/","title":"container.AppTabs","section":"container","content":"container.AppTabs\r#\r\r import \u0026#34;fyne.io/fyne/v2/container\u0026#34; Usage\r#\r\rtype AppTabs\r#\r\rtype AppTabs struct { \twidget.BaseWidget  \tItems []*TabItem  \t// Deprecated: Use `OnSelected func(*TabItem)` instead. \tOnChanged func(*TabItem) \tOnSelected func(*TabItem) \tOnUnselected func(*TabItem) } AppTabs container is used to split your application into various different areas identified by tabs. The tabs contain text and/or an icon and allow the user to switch between the content specified in each TabItem. Each item is represented by a button at the edge of the container.\nSince: \r1.4\rfunc NewAppTabs\r#\r\rfunc NewAppTabs(items ...*TabItem) *AppTabs NewAppTabs creates a new tab container that allows the user to choose between different areas of an app.\nSince: \r1.4\rfunc (*AppTabs) Append\r#\r\rfunc (t *AppTabs) Append(item *TabItem) Append adds a new TabItem to the end of the tab bar.\nfunc (*AppTabs) CreateRenderer\r#\r\rfunc (t *AppTabs) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nImplements: \rfyne.Widget\rfunc (*AppTabs) CurrentTab\r#\r\rfunc (t *AppTabs) CurrentTab() *TabItem CurrentTab returns the currently selected TabItem.\nDeprecated: Use `AppTabs.Selected() *TabItem` instead.\rfunc (*AppTabs) CurrentTabIndex\r#\r\rfunc (t *AppTabs) CurrentTabIndex() int CurrentTabIndex returns the index of the currently selected TabItem.\nDeprecated: Use `AppTabs.SelectedIndex() int` instead.\rfunc (*AppTabs) ExtendBaseWidget\r#\r\rfunc (t *AppTabs) ExtendBaseWidget(wid fyne.Widget) ExtendBaseWidget is used by an extending widget to make use of BaseWidget functionality.\nDeprecated: Support for extending containers is being removed\rfunc (*AppTabs) Hide\r#\r\rfunc (t *AppTabs) Hide() Hide hides the widget.\nImplements: \rfyne.CanvasObject\rfunc (*AppTabs) MinSize\r#\r\rfunc (t *AppTabs) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nImplements: \rfyne.CanvasObject\rfunc (*AppTabs) Remove\r#\r\rfunc (t *AppTabs) Remove(item *TabItem) Remove tab by value.\nfunc (*AppTabs) RemoveIndex\r#\r\rfunc (t *AppTabs) RemoveIndex(index int) RemoveIndex removes tab by index.\nfunc (*AppTabs) Select\r#\r\rfunc (t *AppTabs) Select(item *TabItem) Select sets the specified TabItem to be selected and its content visible.\nfunc (*AppTabs) SelectIndex\r#\r\rfunc (t *AppTabs) SelectIndex(index int) SelectIndex sets the TabItem at the specific index to be selected and its content visible.\nfunc (*AppTabs) SelectTab\r#\r\rfunc (t *AppTabs) SelectTab(item *TabItem) SelectTab sets the specified TabItem to be selected and its content visible.\nDeprecated: Use `AppTabs.Select(*TabItem)` instead.\rfunc (*AppTabs) SelectTabIndex\r#\r\rfunc (t *AppTabs) SelectTabIndex(index int) SelectTabIndex sets the TabItem at the specific index to be selected and its content visible.\nDeprecated: Use `AppTabs.SelectIndex(int)` instead.\rfunc (*AppTabs) Selected\r#\r\rfunc (t *AppTabs) Selected() *TabItem Selected returns the currently selected TabItem.\nfunc (*AppTabs) SelectedIndex\r#\r\rfunc (t *AppTabs) SelectedIndex() int SelectedIndex returns the index of the currently selected TabItem.\nfunc (*AppTabs) SetItems\r#\r\rfunc (t *AppTabs) SetItems(items []*TabItem) SetItems sets the container\u0026rsquo;s items and refreshes.\nfunc (*AppTabs) SetTabLocation\r#\r\rfunc (t *AppTabs) SetTabLocation(l TabLocation) SetTabLocation sets the location of the tab bar\nfunc (*AppTabs) Show\r#\r\rfunc (t *AppTabs) Show() Show this widget, if it was previously hidden\nImplements: \rfyne.CanvasObject\r"},{"id":114,"href":"/docs/api/container/doctabs/","title":"container.DocTabs","section":"container","content":"container.DocTabs\r#\r\r import \u0026#34;fyne.io/fyne/v2/container\u0026#34; Usage\r#\r\rtype DocTabs\r#\r\rtype DocTabs struct { \twidget.BaseWidget  \tItems []*TabItem  \tCreateTab func() *TabItem \tCloseIntercept func(*TabItem) \tOnClosed func(*TabItem) \tOnSelected func(*TabItem) \tOnUnselected func(*TabItem) } DocTabs container is used to display various pieces of content identified by tabs. The tabs contain text and/or an icon and allow the user to switch between the content specified in each TabItem. Each item is represented by a button at the edge of the container.\nSince: \r2.1\rfunc NewDocTabs\r#\r\rfunc NewDocTabs(items ...*TabItem) *DocTabs NewDocTabs creates a new tab container that allows the user to choose between various pieces of content.\nSince: \r2.1\rfunc (*DocTabs) Append\r#\r\rfunc (t *DocTabs) Append(item *TabItem) Append adds a new TabItem to the end of the tab bar.\nfunc (*DocTabs) CreateRenderer\r#\r\rfunc (t *DocTabs) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nImplements: \rfyne.Widget\rfunc (*DocTabs) Hide\r#\r\rfunc (t *DocTabs) Hide() Hide hides the widget.\nImplements: \rfyne.CanvasObject\rfunc (*DocTabs) MinSize\r#\r\rfunc (t *DocTabs) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nImplements: \rfyne.CanvasObject\rfunc (*DocTabs) Remove\r#\r\rfunc (t *DocTabs) Remove(item *TabItem) Remove tab by value.\nfunc (*DocTabs) RemoveIndex\r#\r\rfunc (t *DocTabs) RemoveIndex(index int) RemoveIndex removes tab by index.\nfunc (*DocTabs) Select\r#\r\rfunc (t *DocTabs) Select(item *TabItem) Select sets the specified TabItem to be selected and its content visible.\nfunc (*DocTabs) SelectIndex\r#\r\rfunc (t *DocTabs) SelectIndex(index int) SelectIndex sets the TabItem at the specific index to be selected and its content visible.\nfunc (*DocTabs) Selected\r#\r\rfunc (t *DocTabs) Selected() *TabItem Selected returns the currently selected TabItem.\nfunc (*DocTabs) SelectedIndex\r#\r\rfunc (t *DocTabs) SelectedIndex() int SelectedIndex returns the index of the currently selected TabItem.\nfunc (*DocTabs) SetItems\r#\r\rfunc (t *DocTabs) SetItems(items []*TabItem) SetItems sets the container\u0026rsquo;s items and refreshes.\nfunc (*DocTabs) SetTabLocation\r#\r\rfunc (t *DocTabs) SetTabLocation(l TabLocation) SetTabLocation sets the location of the tab bar\nfunc (*DocTabs) Show\r#\r\rfunc (t *DocTabs) Show() Show this widget, if it was previously hidden\nImplements: \rfyne.CanvasObject\r"},{"id":115,"href":"/docs/api/container/scroll/","title":"container.Scroll","section":"container","content":"container.Scroll\r#\r\r import \u0026#34;fyne.io/fyne/v2/container\u0026#34; Usage\r#\r\rtype Scroll\r#\r\rtype Scroll = widget.Scroll Scroll defines a container that is smaller than the Content. The Offset is used to determine the position of the child widgets within the container.\nSince: \r1.4\rfunc NewHScroll\r#\r\rfunc NewHScroll(content fyne.CanvasObject) *Scroll NewHScroll create a scrollable parent wrapping the specified content. Note that this may cause the MinSize.Width to be smaller than that of the passed object.\nSince: \r1.4\rfunc NewScroll\r#\r\rfunc NewScroll(content fyne.CanvasObject) *Scroll NewScroll creates a scrollable parent wrapping the specified content. Note that this may cause the MinSize to be smaller than that of the passed object.\nSince: \r1.4\rfunc NewVScroll\r#\r\rfunc NewVScroll(content fyne.CanvasObject) *Scroll NewVScroll a scrollable parent wrapping the specified content. Note that this may cause the MinSize.Height to be smaller than that of the passed object.\nSince: \r1.4\r"},{"id":116,"href":"/docs/api/container/scrolldirection/","title":"container.ScrollDirection","section":"container","content":"container.ScrollDirection\r#\r\r import \u0026#34;fyne.io/fyne/v2/container\u0026#34; Usage\r#\r\rtype ScrollDirection\r#\r\rtype ScrollDirection = widget.ScrollDirection ScrollDirection represents the directions in which a Scroll container can scroll its child content.\nSince: \r1.4\r"},{"id":117,"href":"/docs/api/container/split/","title":"container.Split","section":"container","content":"container.Split\r#\r\r import \u0026#34;fyne.io/fyne/v2/container\u0026#34; Usage\r#\r\rtype Split\r#\r\rtype Split struct { \twidget.BaseWidget \tOffset float64 \tHorizontal bool \tLeading fyne.CanvasObject \tTrailing fyne.CanvasObject } Split defines a container whose size is split between two children.\nSince: \r1.4\rfunc NewHSplit\r#\r\rfunc NewHSplit(leading, trailing fyne.CanvasObject) *Split NewHSplit creates a horizontally arranged container with the specified leading and trailing elements. A vertical split bar that can be dragged will be added between the elements.\nSince: \r1.4\rfunc NewVSplit\r#\r\rfunc NewVSplit(top, bottom fyne.CanvasObject) *Split NewVSplit creates a vertically arranged container with the specified top and bottom elements. A horizontal split bar that can be dragged will be added between the elements.\nSince: \r1.4\rfunc (*Split) CreateRenderer\r#\r\rfunc (s *Split) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Split) ExtendBaseWidget\r#\r\rfunc (s *Split) ExtendBaseWidget(wid fyne.Widget) ExtendBaseWidget is used by an extending widget to make use of BaseWidget functionality.\nDeprecated: Support for extending containers is being removed\rfunc (*Split) SetOffset\r#\r\rfunc (s *Split) SetOffset(offset float64) SetOffset sets the offset (0.0 to 1.0) of the Split divider. 0.0 - Leading is min size, Trailing uses all remaining space. 0.5 - Leading \u0026amp; Trailing equally share the available space. 1.0 - Trailing is min size, Leading uses all remaining space.\n"},{"id":118,"href":"/docs/api/container/tabitem/","title":"container.TabItem","section":"container","content":"container.TabItem\r#\r\r import \u0026#34;fyne.io/fyne/v2/container\u0026#34; Usage\r#\r\rtype TabItem\r#\r\rtype TabItem struct { \tText string \tIcon fyne.Resource \tContent fyne.CanvasObject } TabItem represents a single view in a tab view. The Text and Icon are used for the tab button and the Content is shown when the corresponding tab is active.\nSince: \r1.4\rfunc NewTabItem\r#\r\rfunc NewTabItem(text string, content fyne.CanvasObject) *TabItem NewTabItem creates a new item for a tabbed widget - each item specifies the content and a label for its tab.\nSince: \r1.4\rfunc NewTabItemWithIcon\r#\r\rfunc NewTabItemWithIcon(text string, icon fyne.Resource, content fyne.CanvasObject) *TabItem NewTabItemWithIcon creates a new item for a tabbed widget - each item specifies the content and a label with an icon for its tab.\nSince: \r1.4\r"},{"id":119,"href":"/docs/api/container/tablocation/","title":"container.TabLocation","section":"container","content":"container.TabLocation\r#\r\r import \u0026#34;fyne.io/fyne/v2/container\u0026#34; Usage\r#\r\rtype TabLocation\r#\r\rtype TabLocation int TabLocation is the location where the tabs of a tab container should be rendered\nSince: \r1.4\rconst ( \tTabLocationTop TabLocation = iota \tTabLocationLeading \tTabLocationBottom \tTabLocationTrailing ) TabLocation values\n"},{"id":120,"href":"/docs/api/driver/desktop/","title":"desktop","section":"driver","content":"desktop\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Package desktop provides desktop specific driver functionality.\nUsage\r#\r\rconst ( \t// KeyNone represents no key \tKeyNone fyne.KeyName = \u0026#34;\u0026#34; \t// KeyShiftLeft represents the left shift key \tKeyShiftLeft fyne.KeyName = \u0026#34;LeftShift\u0026#34; \t// KeyShiftRight represents the right shift key \tKeyShiftRight fyne.KeyName = \u0026#34;RightShift\u0026#34; \t// KeyControlLeft represents the left control key \tKeyControlLeft fyne.KeyName = \u0026#34;LeftControl\u0026#34; \t// KeyControlRight represents the right control key \tKeyControlRight fyne.KeyName = \u0026#34;RightControl\u0026#34; \t// KeyAltLeft represents the left alt key \tKeyAltLeft fyne.KeyName = \u0026#34;LeftAlt\u0026#34; \t// KeyAltRight represents the right alt key \tKeyAltRight fyne.KeyName = \u0026#34;RightAlt\u0026#34; \t// KeySuperLeft represents the left \u0026#34;Windows\u0026#34; key (or \u0026#34;Command\u0026#34; key on macOS) \tKeySuperLeft fyne.KeyName = \u0026#34;LeftSuper\u0026#34; \t// KeySuperRight represents the right \u0026#34;Windows\u0026#34; key (or \u0026#34;Command\u0026#34; key on macOS) \tKeySuperRight fyne.KeyName = \u0026#34;RightSuper\u0026#34; \t// KeyMenu represents the left or right menu / application key \tKeyMenu fyne.KeyName = \u0026#34;Menu\u0026#34; \t// KeyPrintScreen represents the key used to cause a screen capture \tKeyPrintScreen fyne.KeyName = \u0026#34;PrintScreen\u0026#34;  \t// KeyCapsLock represents the caps lock key, tapping once is the down event then again is the up \tKeyCapsLock fyne.KeyName = \u0026#34;CapsLock\u0026#34; ) types\r#\r\r \rCanvas \rCursor \rCursorable \rCustomShortcut \rDriver \rHoverable \rKeyable \rModifier \rMouseButton \rMouseEvent \rMouseable \rStandardCursor  "},{"id":121,"href":"/docs/api/driver/desktop/canvas/","title":"desktop.Canvas","section":"desktop","content":"desktop.Canvas\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype Canvas\r#\r\rtype Canvas interface { \tOnKeyDown() func(*fyne.KeyEvent) \tSetOnKeyDown(func(*fyne.KeyEvent)) \tOnKeyUp() func(*fyne.KeyEvent) \tSetOnKeyUp(func(*fyne.KeyEvent)) } Canvas defines the desktop specific extensions to a fyne.Canvas.\n"},{"id":122,"href":"/docs/api/driver/desktop/cursor/","title":"desktop.Cursor","section":"desktop","content":"desktop.Cursor\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype Cursor\r#\r\rtype Cursor interface { \t// Image returns the image for the given cursor, or nil if none should be shown. \t// It also returns the x and y pixels that should act as the hot-spot (measured from top left corner). \tImage() (image.Image, int, int) } Cursor interface is used for objects that desire a specific cursor.\nSince: \r2.0\r"},{"id":123,"href":"/docs/api/driver/desktop/cursorable/","title":"desktop.Cursorable","section":"desktop","content":"desktop.Cursorable\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype Cursorable\r#\r\rtype Cursorable interface { \tCursor() Cursor } Cursorable describes any CanvasObject that needs a cursor change\n"},{"id":124,"href":"/docs/api/driver/desktop/customshortcut/","title":"desktop.CustomShortcut","section":"desktop","content":"desktop.CustomShortcut\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype CustomShortcut\r#\r\rtype CustomShortcut struct { \tfyne.KeyName \tModifier } CustomShortcut describes a shortcut desktop event.\nfunc (*CustomShortcut) ShortcutName\r#\r\rfunc (cs *CustomShortcut) ShortcutName() string ShortcutName returns the shortcut name associated to the event\n"},{"id":125,"href":"/docs/api/driver/desktop/driver/","title":"desktop.Driver","section":"desktop","content":"desktop.Driver\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype Driver\r#\r\rtype Driver interface { \t// Create a new borderless window that is centered on screen \tCreateSplashWindow() fyne.Window } Driver represents the extended capabilities of a desktop driver\n"},{"id":126,"href":"/docs/api/driver/desktop/hoverable/","title":"desktop.Hoverable","section":"desktop","content":"desktop.Hoverable\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype Hoverable\r#\r\rtype Hoverable interface { \t// MouseIn is a hook that is called if the mouse pointer enters the element. \tMouseIn(*MouseEvent) \t// MouseMoved is a hook that is called if the mouse pointer moved over the element. \tMouseMoved(*MouseEvent) \t// MouseOut is a hook that is called if the mouse pointer leaves the element. \tMouseOut() } Hoverable is used when a canvas object wishes to know if a pointer device moves over it.\n"},{"id":127,"href":"/docs/api/driver/desktop/keyable/","title":"desktop.Keyable","section":"desktop","content":"desktop.Keyable\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype Keyable\r#\r\rtype Keyable interface { \tfyne.Focusable  \tKeyDown(*fyne.KeyEvent) \tKeyUp(*fyne.KeyEvent) } Keyable describes any focusable canvas object that can accept desktop key events. This is the traditional key down and up event that is not applicable to all devices.\n"},{"id":128,"href":"/docs/api/driver/desktop/modifier/","title":"desktop.Modifier","section":"desktop","content":"desktop.Modifier\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype Modifier\r#\r\rtype Modifier int Modifier captures any key modifiers (shift etc) pressed during this key event\nconst ( \t// ShiftModifier represents a shift key being held \tShiftModifier Modifier = 1 \u0026lt;\u0026lt; iota \t// ControlModifier represents the ctrl key being held \tControlModifier \t// AltModifier represents either alt keys being held \tAltModifier \t// SuperModifier represents either super keys being held \tSuperModifier ) "},{"id":129,"href":"/docs/api/driver/desktop/mouseable/","title":"desktop.Mouseable","section":"desktop","content":"desktop.Mouseable\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype Mouseable\r#\r\rtype Mouseable interface { \tMouseDown(*MouseEvent) \tMouseUp(*MouseEvent) } Mouseable represents desktop mouse events that can be sent to CanvasObjects\n"},{"id":130,"href":"/docs/api/driver/desktop/mousebutton/","title":"desktop.MouseButton","section":"desktop","content":"desktop.MouseButton\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype MouseButton\r#\r\rtype MouseButton int MouseButton represents a single button in a desktop MouseEvent\nconst ( \t// MouseButtonPrimary is the most common mouse button - on some systems the only one. \t// This will normally be on the left side of a mouse. \t// \t// Since: 2.0 \tMouseButtonPrimary MouseButton = 1 \u0026lt;\u0026lt; iota  \t// MouseButtonSecondary is the secondary button on most mouse input devices. \t// This will normally be on the right side of a mouse. \t// \t// Since: 2.0 \tMouseButtonSecondary  \t// MouseButtonTertiary is the middle button on the mouse, assuming it has one. \t// \t// Since: 2.0 \tMouseButtonTertiary  \t// LeftMouseButton is the most common mouse button - on some systems the only one. \t// \t// Deprecated: use MouseButtonPrimary which will adapt to mouse configuration. \tLeftMouseButton = MouseButtonPrimary  \t// RightMouseButton is the secondary button on most mouse input devices. \t// \t// Deprecated: use MouseButtonSecondary which will adapt to mouse configuration. \tRightMouseButton = MouseButtonSecondary ) "},{"id":131,"href":"/docs/api/driver/desktop/mouseevent/","title":"desktop.MouseEvent","section":"desktop","content":"desktop.MouseEvent\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype MouseEvent\r#\r\rtype MouseEvent struct { \tfyne.PointEvent \tButton MouseButton \tModifier Modifier } MouseEvent contains data relating to desktop mouse events\n"},{"id":132,"href":"/docs/api/driver/desktop/standardcursor/","title":"desktop.StandardCursor","section":"desktop","content":"desktop.StandardCursor\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/desktop\u0026#34; Usage\r#\r\rtype StandardCursor\r#\r\rtype StandardCursor int StandardCursor represents a standard Fyne cursor. These values were previously of type fyne.Cursor.\nSince: \r2.0\rconst ( \t// DefaultCursor is the default cursor typically an arrow \tDefaultCursor StandardCursor = iota \t// TextCursor is the cursor often used to indicate text selection \tTextCursor \t// CrosshairCursor is the cursor often used to indicate bitmaps \tCrosshairCursor \t// PointerCursor is the cursor often used to indicate a link \tPointerCursor \t// HResizeCursor is the cursor often used to indicate horizontal resize \tHResizeCursor \t// VResizeCursor is the cursor often used to indicate vertical resize \tVResizeCursor \t// HiddenCursor will cause the cursor to not be shown \tHiddenCursor ) func (StandardCursor) Image\r#\r\rfunc (d StandardCursor) Image() (image.Image, int, int) Image is not used for any of the StandardCursor types.\nSince: \r2.0\r"},{"id":133,"href":"/docs/api/dialog/","title":"dialog","section":"Api document","content":"dialog\r#\r\r import \u0026#34;fyne.io/fyne/v2/dialog\u0026#34; Package dialog defines standard dialog windows for application GUIs.\nUsage\r#\r\rfunc ShowColorPicker\r#\r\rfunc ShowColorPicker(title, message string, callback func(c color.Color), parent fyne.Window) ShowColorPicker creates and shows a color dialog. The callback is triggered when the user selects a color.\nSince: \r1.4\rfunc ShowConfirm\r#\r\rfunc ShowConfirm(title, message string, callback func(bool), parent fyne.Window) ShowConfirm shows a dialog over the specified window for a user confirmation. The title is used for the dialog window and message is the content. The callback is executed when the user decides.\nfunc ShowCustom\r#\r\rfunc ShowCustom(title, dismiss string, content fyne.CanvasObject, parent fyne.Window) ShowCustom shows a dialog over the specified application using custom content. The button will have the dismiss text set. The MinSize() of the CanvasObject passed will be used to set the size of the window.\nfunc ShowCustomConfirm\r#\r\rfunc ShowCustomConfirm(title, confirm, dismiss string, content fyne.CanvasObject, \tcallback func(bool), parent fyne.Window) ShowCustomConfirm shows a dialog over the specified application using custom content. The cancel button will have the dismiss text set and the \u0026ldquo;OK\u0026rdquo; will use the confirm text. The response callback is called on user action. The MinSize() of the CanvasObject passed will be used to set the size of the window.\nfunc ShowEntryDialog\r#\r\rfunc ShowEntryDialog(title, message string, onConfirm func(string), parent fyne.Window) ShowEntryDialog creates a new entry dialog and shows it immediately.\nDeprecated: Use dialog.ShowFormDialog() with a widget.Entry inside instead.\rfunc ShowError\r#\r\rfunc ShowError(err error, parent fyne.Window) ShowError shows a dialog over the specified window for an application error. The message is extracted from the provided error (should not be nil).\nfunc ShowFileOpen\r#\r\rfunc ShowFileOpen(callback func(fyne.URIReadCloser, error), parent fyne.Window) ShowFileOpen creates and shows a file dialog allowing the user to choose a file to open. The callback function will run when the dialog closes. The URI will be nil when the user cancels or when nothing is selected.\nThe dialog will appear over the window specified.\nfunc ShowFileSave\r#\r\rfunc ShowFileSave(callback func(fyne.URIWriteCloser, error), parent fyne.Window) ShowFileSave creates and shows a file dialog allowing the user to choose a file to save to (new or overwrite). If the user chooses an existing file they will be asked if they are sure. The callback function will run when the dialog closes. The URI will be nil when the user cancels or when nothing is selected.\nThe dialog will appear over the window specified.\nfunc ShowFolderOpen\r#\r\rfunc ShowFolderOpen(callback func(fyne.ListableURI, error), parent fyne.Window) ShowFolderOpen creates and shows a file dialog allowing the user to choose a folder to open. The callback function will run when the dialog closes. The URI will be nil when the user cancels or when nothing is selected.\nThe dialog will appear over the window specified.\nSince: \r1.4\rfunc ShowForm\r#\r\rfunc ShowForm(title, confirm, dismiss string, content []*widget.FormItem, callback func(bool), parent fyne.Window) ShowForm shows a dialog over the specified application using the provided FormItems. The cancel button will have the dismiss text set and the confirm button will use the confirm text. The response callback is called on user action after validation passes. If any Validatable widget reports that validation has failed, then the confirm button will be disabled. The initial state of the confirm button will reflect the initial validation state of the items added to the form dialog. The MinSize() of the CanvasObject passed will be used to set the size of the window.\nSince: \r2.0\rfunc ShowInformation\r#\r\rfunc ShowInformation(title, message string, parent fyne.Window) ShowInformation shows a dialog over the specified window for user information. The title is used for the dialog window and message is the content.\ntypes\r#\r\r \rColorPickerDialog \rConfirmDialog \rDialog \rEntryDialog \rFileDialog \rProgressDialog \rProgressInfiniteDialog  "},{"id":134,"href":"/docs/api/dialog/colorpickerdialog/","title":"dialog.ColorPickerDialog","section":"dialog","content":"dialog.ColorPickerDialog\r#\r\r import \u0026#34;fyne.io/fyne/v2/dialog\u0026#34; Usage\r#\r\rtype ColorPickerDialog\r#\r\rtype ColorPickerDialog struct { \tAdvanced bool } ColorPickerDialog is a simple dialog window that displays a color picker.\nSince: \r1.4\rfunc NewColorPicker\r#\r\rfunc NewColorPicker(title, message string, callback func(c color.Color), parent fyne.Window) *ColorPickerDialog NewColorPicker creates a color dialog and returns the handle. Using the returned type you should call Show() and then set its color through SetColor(). The callback is triggered when the user selects a color.\nSince: \r1.4\rfunc (ColorPickerDialog) Hide\r#\r\rfunc (d ColorPickerDialog) Hide() func (ColorPickerDialog) MinSize\r#\r\rfunc (d ColorPickerDialog) MinSize() fyne.Size MinSize returns the size that this dialog should not shrink below\nSince: \r2.1\rfunc (*ColorPickerDialog) Refresh\r#\r\rfunc (p *ColorPickerDialog) Refresh() Refresh causes this dialog to be updated\nfunc (ColorPickerDialog) Resize\r#\r\rfunc (d ColorPickerDialog) Resize(size fyne.Size) Resize dialog, call this function after dialog show\nfunc (*ColorPickerDialog) SetColor\r#\r\rfunc (p *ColorPickerDialog) SetColor(c color.Color) SetColor updates the color of the color picker.\nfunc (ColorPickerDialog) SetDismissText\r#\r\rfunc (d ColorPickerDialog) SetDismissText(label string) SetDismissText allows custom text to be set in the confirmation button\nfunc (ColorPickerDialog) SetOnClosed\r#\r\rfunc (d ColorPickerDialog) SetOnClosed(closed func()) SetOnClosed allows to set a callback function that is called when the dialog is closed\nfunc (*ColorPickerDialog) Show\r#\r\rfunc (p *ColorPickerDialog) Show() Show causes this dialog to be displayed\n"},{"id":135,"href":"/docs/api/dialog/confirmdialog/","title":"dialog.ConfirmDialog","section":"dialog","content":"dialog.ConfirmDialog\r#\r\r import \u0026#34;fyne.io/fyne/v2/dialog\u0026#34; Usage\r#\r\rtype ConfirmDialog\r#\r\rtype ConfirmDialog struct { } ConfirmDialog is like the standard Dialog but with an additional confirmation button\nfunc NewConfirm\r#\r\rfunc NewConfirm(title, message string, callback func(bool), parent fyne.Window) *ConfirmDialog NewConfirm creates a dialog over the specified window for user confirmation. The title is used for the dialog window and message is the content. The callback is executed when the user decides. After creation you should call Show().\nfunc (ConfirmDialog) Hide\r#\r\rfunc (d ConfirmDialog) Hide() func (ConfirmDialog) MinSize\r#\r\rfunc (d ConfirmDialog) MinSize() fyne.Size MinSize returns the size that this dialog should not shrink below\nSince: \r2.1\rfunc (ConfirmDialog) Refresh\r#\r\rfunc (d ConfirmDialog) Refresh() func (ConfirmDialog) Resize\r#\r\rfunc (d ConfirmDialog) Resize(size fyne.Size) Resize dialog, call this function after dialog show\nfunc (*ConfirmDialog) SetConfirmText\r#\r\rfunc (d *ConfirmDialog) SetConfirmText(label string) SetConfirmText allows custom text to be set in the confirmation button\nfunc (ConfirmDialog) SetDismissText\r#\r\rfunc (d ConfirmDialog) SetDismissText(label string) SetDismissText allows custom text to be set in the confirmation button\nfunc (ConfirmDialog) SetOnClosed\r#\r\rfunc (d ConfirmDialog) SetOnClosed(closed func()) SetOnClosed allows to set a callback function that is called when the dialog is closed\nfunc (ConfirmDialog) Show\r#\r\rfunc (d ConfirmDialog) Show() "},{"id":136,"href":"/docs/api/dialog/dialog/","title":"dialog.Dialog","section":"dialog","content":"dialog.Dialog\r#\r\r import \u0026#34;fyne.io/fyne/v2/dialog\u0026#34; Usage\r#\r\rtype Dialog\r#\r\rtype Dialog interface { \tShow() \tHide() \tSetDismissText(label string) \tSetOnClosed(closed func()) \tRefresh() \tResize(size fyne.Size)  \t// Since: 2.1 \tMinSize() fyne.Size } Dialog is the common API for any dialog window with a single dismiss button\nfunc NewCustom\r#\r\rfunc NewCustom(title, dismiss string, content fyne.CanvasObject, parent fyne.Window) Dialog NewCustom creates and returns a dialog over the specified application using custom content. The button will have the dismiss text set. The MinSize() of the CanvasObject passed will be used to set the size of the window.\nfunc NewCustomConfirm\r#\r\rfunc NewCustomConfirm(title, confirm, dismiss string, content fyne.CanvasObject, \tcallback func(bool), parent fyne.Window) Dialog NewCustomConfirm creates and returns a dialog over the specified application using custom content. The cancel button will have the dismiss text set and the \u0026ldquo;OK\u0026rdquo; will use the confirm text. The response callback is called on user action. The MinSize() of the CanvasObject passed will be used to set the size of the window.\nfunc NewError\r#\r\rfunc NewError(err error, parent fyne.Window) Dialog NewError creates a dialog over the specified window for an application error. The message is extracted from the provided error (should not be nil). After creation you should call Show().\nfunc NewForm\r#\r\rfunc NewForm(title, confirm, dismiss string, items []*widget.FormItem, callback func(bool), parent fyne.Window) Dialog NewForm creates and returns a dialog over the specified application using the provided FormItems. The cancel button will have the dismiss text set and the confirm button will use the confirm text. The response callback is called on user action after validation passes. If any Validatable widget reports that validation has failed, then the confirm button will be disabled. The initial state of the confirm button will reflect the initial validation state of the items added to the form dialog.\nSince: \r2.0\rfunc NewInformation\r#\r\rfunc NewInformation(title, message string, parent fyne.Window) Dialog NewInformation creates a dialog over the specified window for user information. The title is used for the dialog window and message is the content. After creation you should call Show().\n"},{"id":137,"href":"/docs/api/dialog/entrydialog/","title":"dialog.EntryDialog","section":"dialog","content":"dialog.EntryDialog\r#\r\r import \u0026#34;fyne.io/fyne/v2/dialog\u0026#34; Usage\r#\r\rtype EntryDialog\r#\r\rtype EntryDialog struct { } EntryDialog is a variation of a dialog which prompts the user to enter some text.\nDeprecated: Use dialog.NewFormDialog() or dialog.ShowFormDialog() with a widget.Entry inside instead.\rfunc NewEntryDialog\r#\r\rfunc NewEntryDialog(title, message string, onConfirm func(string), parent fyne.Window) *EntryDialog NewEntryDialog creates a dialog over the specified window for the user to enter a value.\nonConfirm is a callback that runs when the user enters a string of text and clicks the \u0026ldquo;confirm\u0026rdquo; button. May be nil.\nDeprecated: Use dialog.NewFormDialog() with a widget.Entry inside instead.\rfunc (*EntryDialog) SetOnClosed\r#\r\rfunc (i *EntryDialog) SetOnClosed(callback func()) SetOnClosed changes the callback which is run when the dialog is closed, which is nil by default.\nThe callback is called unconditionally whether the user confirms or cancels.\nNote that the callback will be called after onConfirm, if both are non-nil. This way onConfirm can potential modify state that this callback needs to get the user input when the user confirms, while also being able to handle the case where the user cancelled.\nfunc (*EntryDialog) SetPlaceholder\r#\r\rfunc (i *EntryDialog) SetPlaceholder(s string) SetPlaceholder defines the placeholder text for the entry\nfunc (*EntryDialog) SetText\r#\r\rfunc (i *EntryDialog) SetText(s string) SetText changes the current text value of the entry dialog, this can be useful for setting a default value.\n"},{"id":138,"href":"/docs/api/dialog/filedialog/","title":"dialog.FileDialog","section":"dialog","content":"dialog.FileDialog\r#\r\r import \u0026#34;fyne.io/fyne/v2/dialog\u0026#34; Usage\r#\r\rtype FileDialog\r#\r\rtype FileDialog struct { } FileDialog is a dialog containing a file picker for use in opening or saving files.\nfunc NewFileOpen\r#\r\rfunc NewFileOpen(callback func(fyne.URIReadCloser, error), parent fyne.Window) *FileDialog NewFileOpen creates a file dialog allowing the user to choose a file to open. The callback function will run when the dialog closes. The URI will be nil when the user cancels or when nothing is selected.\nThe dialog will appear over the window specified when Show() is called.\nfunc NewFileSave\r#\r\rfunc NewFileSave(callback func(fyne.URIWriteCloser, error), parent fyne.Window) *FileDialog NewFileSave creates a file dialog allowing the user to choose a file to save to (new or overwrite). If the user chooses an existing file they will be asked if they are sure. The callback function will run when the dialog closes. The URI will be nil when the user cancels or when nothing is selected.\nThe dialog will appear over the window specified when Show() is called.\nfunc NewFolderOpen\r#\r\rfunc NewFolderOpen(callback func(fyne.ListableURI, error), parent fyne.Window) *FileDialog NewFolderOpen creates a file dialog allowing the user to choose a folder to open. The callback function will run when the dialog closes. The URI will be nil when the user cancels or when nothing is selected.\nThe dialog will appear over the window specified when Show() is called.\nSince: \r1.4\rfunc (*FileDialog) Hide\r#\r\rfunc (f *FileDialog) Hide() Hide hides the file dialog.\nfunc (*FileDialog) MinSize\r#\r\rfunc (f *FileDialog) MinSize() fyne.Size MinSize returns the size that this dialog should not shrink below\nSince: \r2.1\rfunc (*FileDialog) Refresh\r#\r\rfunc (f *FileDialog) Refresh() Refresh causes this dialog to be updated\nfunc (*FileDialog) Resize\r#\r\rfunc (f *FileDialog) Resize(size fyne.Size) Resize dialog to the requested size, if there is sufficient space. If the parent window is not large enough then the size will be reduced to fit.\nfunc (*FileDialog) SetDismissText\r#\r\rfunc (f *FileDialog) SetDismissText(label string) SetDismissText allows custom text to be set in the confirmation button\nfunc (*FileDialog) SetFileName\r#\r\rfunc (f *FileDialog) SetFileName(fileName string) SetFileName sets the filename in a FileDialog in save mode. This is normally called before the dialog is shown.\nfunc (*FileDialog) SetFilter\r#\r\rfunc (f *FileDialog) SetFilter(filter storage.FileFilter) SetFilter sets a filter for limiting files that can be chosen in the file dialog.\nfunc (*FileDialog) SetLocation\r#\r\rfunc (f *FileDialog) SetLocation(u fyne.ListableURI) SetLocation tells this FileDirectory which location to display. This is normally called before the dialog is shown.\nSince: \r1.4\rfunc (*FileDialog) SetOnClosed\r#\r\rfunc (f *FileDialog) SetOnClosed(closed func()) SetOnClosed sets a callback function that is called when the dialog is closed.\nfunc (*FileDialog) Show\r#\r\rfunc (f *FileDialog) Show() Show shows the file dialog.\n"},{"id":139,"href":"/docs/api/dialog/progressdialog/","title":"dialog.ProgressDialog","section":"dialog","content":"dialog.ProgressDialog\r#\r\r import \u0026#34;fyne.io/fyne/v2/dialog\u0026#34; Usage\r#\r\rtype ProgressDialog\r#\r\rtype ProgressDialog struct { } ProgressDialog is a simple dialog window that displays text and a progress bar.\nDeprecated: Create a new custom dialog with a widget.ProgressBar() inside.\rfunc NewProgress\r#\r\rfunc NewProgress(title, message string, parent fyne.Window) *ProgressDialog NewProgress creates a progress dialog and returns the handle. Using the returned type you should call Show() and then set its value through SetValue().\nDeprecated: Create a new custom dialog with a widget.ProgressBar() inside.\rfunc (ProgressDialog) Hide\r#\r\rfunc (d ProgressDialog) Hide() func (ProgressDialog) MinSize\r#\r\rfunc (d ProgressDialog) MinSize() fyne.Size MinSize returns the size that this dialog should not shrink below\nSince: \r2.1\rfunc (ProgressDialog) Refresh\r#\r\rfunc (d ProgressDialog) Refresh() func (ProgressDialog) Resize\r#\r\rfunc (d ProgressDialog) Resize(size fyne.Size) Resize dialog, call this function after dialog show\nfunc (ProgressDialog) SetDismissText\r#\r\rfunc (d ProgressDialog) SetDismissText(label string) SetDismissText allows custom text to be set in the confirmation button\nfunc (ProgressDialog) SetOnClosed\r#\r\rfunc (d ProgressDialog) SetOnClosed(closed func()) SetOnClosed allows to set a callback function that is called when the dialog is closed\nfunc (*ProgressDialog) SetValue\r#\r\rfunc (p *ProgressDialog) SetValue(v float64) SetValue updates the value of the progress bar - this should be between 0.0 and 1.0.\nfunc (ProgressDialog) Show\r#\r\rfunc (d ProgressDialog) Show() "},{"id":140,"href":"/docs/api/dialog/progressinfinitedialog/","title":"dialog.ProgressInfiniteDialog","section":"dialog","content":"dialog.ProgressInfiniteDialog\r#\r\r import \u0026#34;fyne.io/fyne/v2/dialog\u0026#34; Usage\r#\r\rtype ProgressInfiniteDialog\r#\r\rtype ProgressInfiniteDialog struct { } ProgressInfiniteDialog is a simple dialog window that displays text and a infinite progress bar.\nDeprecated: Create a new custom dialog with a widget.ProgressBarInfinite() inside.\rfunc NewProgressInfinite\r#\r\rfunc NewProgressInfinite(title, message string, parent fyne.Window) *ProgressInfiniteDialog NewProgressInfinite creates a infinite progress dialog and returns the handle. Using the returned type you should call Show().\nDeprecated: Create a new custom dialog with a widget.ProgressBarInfinite() inside.\rfunc (*ProgressInfiniteDialog) Hide\r#\r\rfunc (d *ProgressInfiniteDialog) Hide() Hide this dialog and stop the infinite progress goroutine\nfunc (ProgressInfiniteDialog) MinSize\r#\r\rfunc (d ProgressInfiniteDialog) MinSize() fyne.Size MinSize returns the size that this dialog should not shrink below\nSince: \r2.1\rfunc (ProgressInfiniteDialog) Refresh\r#\r\rfunc (d ProgressInfiniteDialog) Refresh() func (ProgressInfiniteDialog) Resize\r#\r\rfunc (d ProgressInfiniteDialog) Resize(size fyne.Size) Resize dialog, call this function after dialog show\nfunc (ProgressInfiniteDialog) SetDismissText\r#\r\rfunc (d ProgressInfiniteDialog) SetDismissText(label string) SetDismissText allows custom text to be set in the confirmation button\nfunc (ProgressInfiniteDialog) SetOnClosed\r#\r\rfunc (d ProgressInfiniteDialog) SetOnClosed(closed func()) SetOnClosed allows to set a callback function that is called when the dialog is closed\nfunc (ProgressInfiniteDialog) Show\r#\r\rfunc (d ProgressInfiniteDialog) Show() "},{"id":141,"href":"/docs/api/animation/","title":"fyne.Animation","section":"Api document","content":"fyne.Animation\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Animation\r#\r\rtype Animation struct { \tAutoReverse bool \tCurve AnimationCurve \tDuration time.Duration \tRepeatCount int \tTick func(float32) } Animation represents an animated element within a Fyne canvas. These animations may control individual objects or entire scenes.\nSince: \r2.0\rfunc NewAnimation\r#\r\rfunc NewAnimation(d time.Duration, fn func(float32)) *Animation NewAnimation creates a very basic animation where the callback function will be called for every rendered frame between time.Now() and the specified duration. The callback values start at 0.0 and will be 1.0 when the animation completes.\nSince: \r2.0\rfunc (*Animation) Start\r#\r\rfunc (a *Animation) Start() Start registers the animation with the application run-loop and starts its execution.\nfunc (*Animation) Stop\r#\r\rfunc (a *Animation) Stop() Stop will end this animation and remove it from the run-loop.\n"},{"id":142,"href":"/docs/api/animationcurve/","title":"fyne.AnimationCurve","section":"Api document","content":"fyne.AnimationCurve\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype AnimationCurve\r#\r\rtype AnimationCurve func(float32) float32 AnimationCurve represents an animation algorithm for calculating the progress through a timeline. Custom animations can be provided by implementing the \u0026ldquo;func(float32) float32\u0026rdquo; definition. The input parameter will start at 0.0 when an animation starts and travel up to 1.0 at which point it will end. A linear animation would return the same output value as is passed in.\n"},{"id":143,"href":"/docs/api/app/","title":"fyne.App","section":"Api document","content":"fyne.App\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype App\r#\r\rtype App interface { \t// Create a new window for the application. \t// The first window to open is considered the \u0026#34;master\u0026#34; and when closed \t// the application will exit. \tNewWindow(title string) Window  \t// Open a URL in the default browser application. \tOpenURL(url *url.URL) error  \t// Icon returns the application icon, this is used in various ways \t// depending on operating system. \t// This is also the default icon for new windows. \tIcon() Resource  \t// SetIcon sets the icon resource used for this application instance. \tSetIcon(Resource)  \t// Run the application - this starts the event loop and waits until Quit() \t// is called or the last window closes. \t// This should be called near the end of a main() function as it will block. \tRun()  \t// Calling Quit on the application will cause the application to exit \t// cleanly, closing all open windows. \t// This function does no thing on a mobile device as the application lifecycle is \t// managed by the operating system. \tQuit()  \t// Driver returns the driver that is rendering this application. \t// Typically not needed for day to day work, mostly internal functionality. \tDriver() Driver  \t// UniqueID returns the application unique identifier, if set. \t// This must be set for use of the Preferences() functions... see NewWithId(string) \tUniqueID() string  \t// SendNotification sends a system notification that will be displayed in the operating system\u0026#39;s notification area. \tSendNotification(*Notification)  \t// Settings return the globally set settings, determining theme and so on. \tSettings() Settings  \t// Preferences returns the application preferences, used for storing configuration and state \tPreferences() Preferences  \t// Storage returns a storage handler specific to this application. \tStorage() Storage  \t// Lifecycle returns a type that allows apps to hook in to lifecycle events. \tLifecycle() Lifecycle } An App is the definition of a graphical application. Apps can have multiple windows, it will exit when the first window to be shown is closed. You can also cause the app to exit by calling Quit(). To start an application you need to call Run() somewhere in your main() function. Alternatively use the window.ShowAndRun() function for your main window.\nfunc CurrentApp\r#\r\rfunc CurrentApp() App CurrentApp returns the current application, for which there is only 1 per process.\n"},{"id":144,"href":"/docs/api/buildtype/","title":"fyne.BuildType","section":"Api document","content":"fyne.BuildType\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype BuildType\r#\r\rtype BuildType int BuildType defines different modes that an application can be built using.\nconst ( \t// BuildStandard is the normal build mode - it is not debug, test or release mode. \tBuildStandard BuildType = iota \t// BuildDebug is used when a developer would like more information and visual output for app debugging. \tBuildDebug \t// BuildRelease is a final production build, it is like BuildStandard but will use distribution certificates. \t// A release build is typically going to connect to live services and is not usually used during development. \tBuildRelease ) "},{"id":145,"href":"/docs/api/canvas/","title":"fyne.Canvas","section":"Api document","content":"fyne.Canvas\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Canvas\r#\r\rtype Canvas interface { \tContent() CanvasObject \tSetContent(CanvasObject)  \tRefresh(CanvasObject)  \t// Focus makes the provided item focused. \t// The item has to be added to the contents of the canvas before calling this. \tFocus(Focusable) \t// FocusNext focuses the next focusable item. \t// If no item is currently focused, the first focusable item is focused. \t// If the last focusable item is currently focused, the first focusable item is focused. \t// \t// Since: 2.0 \tFocusNext() \t// FocusPrevious focuses the previous focusable item. \t// If no item is currently focused, the last focusable item is focused. \t// If the first focusable item is currently focused, the last focusable item is focused. \t// \t// Since: 2.0 \tFocusPrevious() \tUnfocus() \tFocused() Focusable  \t// Size returns the current size of this canvas \tSize() Size \t// Scale returns the current scale (multiplication factor) this canvas uses to render \t// The pixel size of a CanvasObject can be found by multiplying by this value. \tScale() float32  \t// Overlays returns the overlay stack. \tOverlays() OverlayStack  \tOnTypedRune() func(rune) \tSetOnTypedRune(func(rune)) \tOnTypedKey() func(*KeyEvent) \tSetOnTypedKey(func(*KeyEvent)) \tAddShortcut(shortcut Shortcut, handler func(shortcut Shortcut)) \tRemoveShortcut(shortcut Shortcut)  \tCapture() image.Image  \t// PixelCoordinateForPosition returns the x and y pixel coordinate for a given position on this canvas. \t// This can be used to find absolute pixel positions or pixel offsets relative to an object top left. \tPixelCoordinateForPosition(Position) (int, int)  \t// InteractiveArea returns the position and size of the central interactive area. \t// Operating system elements may overlap the portions outside this area and widgets should avoid being outside. \t// \t// Since: 1.4 \tInteractiveArea() (Position, Size) } Canvas defines a graphical canvas to which a CanvasObject or Container can be added. Each canvas has a scale which is automatically applied during the render process.\n"},{"id":146,"href":"/docs/api/canvasobject/","title":"fyne.CanvasObject","section":"Api document","content":"fyne.CanvasObject\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype CanvasObject\r#\r\rtype CanvasObject interface {  \t// MinSize returns the minimum size this object needs to be drawn. \tMinSize() Size \t// Move moves this object to the given position relative to its parent. \t// This should only be called if your object is not in a container with a layout manager. \tMove(Position) \t// Position returns the current position of the object relative to its parent. \tPosition() Position \t// Resize resizes this object to the given size. \t// This should only be called if your object is not in a container with a layout manager. \tResize(Size) \t// Size returns the current size of this object. \tSize() Size  \t// Hide hides this object. \tHide() \t// Visible returns whether this object is visible or not. \tVisible() bool \t// Show shows this object. \tShow()  \t// Refresh must be called if this object should be redrawn because its inner state changed. \tRefresh() } CanvasObject describes any graphical object that can be added to a canvas. Objects have a size and position that can be controlled through this API. MinSize is used to determine the minimum size which this object should be displayed. An object will be visible by default but can be hidden with Hide() and re-shown with Show().\nNote: If this object is controlled as part of a Layout you should not call Resize(Size) or Move(Position).\n"},{"id":147,"href":"/docs/api/clipboard/","title":"fyne.Clipboard","section":"Api document","content":"fyne.Clipboard\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Clipboard\r#\r\rtype Clipboard interface { \t// Content returns the clipboard content \tContent() string \t// SetContent sets the clipboard content \tSetContent(content string) } Clipboard represents the system clipboard interface\n"},{"id":148,"href":"/docs/api/container/","title":"fyne.Container","section":"Api document","content":"fyne.Container\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Container\r#\r\rtype Container struct { \tHidden bool // Is this Container hidden  \tLayout Layout // The Layout algorithm for arranging child CanvasObjects \tObjects []CanvasObject // The set of CanvasObjects this container holds } Container is a CanvasObject that contains a collection of child objects. The layout of the children is set by the specified Layout.\nfunc NewContainer\r#\r\rfunc NewContainer(objects ...CanvasObject) *Container NewContainer returns a new Container instance holding the specified CanvasObjects.\nDeprecated: Use container.NewWithoutLayout() to create a container that uses manual layout.\rfunc NewContainerWithLayout\r#\r\rfunc NewContainerWithLayout(layout Layout, objects ...CanvasObject) *Container NewContainerWithLayout returns a new Container instance holding the specified CanvasObjects which will be laid out according to the specified Layout.\nDeprecated: Use container.New() instead\rfunc NewContainerWithoutLayout\r#\r\rfunc NewContainerWithoutLayout(objects ...CanvasObject) *Container NewContainerWithoutLayout returns a new Container instance holding the specified CanvasObjects that are manually arranged.\nDeprecated: Use container.NewWithoutLayout() instead\rfunc (*Container) Add\r#\r\rfunc (c *Container) Add(add CanvasObject) Add appends the specified object to the items this container manages.\nSince: \r1.4\rfunc (*Container) AddObject\r#\r\rfunc (c *Container) AddObject(o CanvasObject) AddObject adds another CanvasObject to the set this Container holds.\nDeprecated: Use replacement Add() function\rfunc (*Container) Hide\r#\r\rfunc (c *Container) Hide() Hide sets this container, and all its children, to be not visible.\nfunc (*Container) MinSize\r#\r\rfunc (c *Container) MinSize() Size MinSize calculates the minimum size of a Container. This is delegated to the Layout, if specified, otherwise it will mimic MaxLayout.\nfunc (*Container) Move\r#\r\rfunc (c *Container) Move(pos Position) Move the container (and all its children) to a new position, relative to its parent.\nfunc (*Container) Position\r#\r\rfunc (c *Container) Position() Position Position gets the current position of this Container, relative to its parent.\nfunc (*Container) Refresh\r#\r\rfunc (c *Container) Refresh() Refresh causes this object to be redrawn in it\u0026rsquo;s current state\nfunc (*Container) Remove\r#\r\rfunc (c *Container) Remove(rem CanvasObject) Remove updates the contents of this container to no longer include the specified object.\nfunc (*Container) Resize\r#\r\rfunc (c *Container) Resize(size Size) Resize sets a new size for the Container.\nfunc (*Container) Show\r#\r\rfunc (c *Container) Show() Show sets this container, and all its children, to be visible.\nfunc (*Container) Size\r#\r\rfunc (c *Container) Size() Size Size returns the current size of this container.\nfunc (*Container) Visible\r#\r\rfunc (c *Container) Visible() bool Visible returns true if the container is currently visible, false otherwise.\n"},{"id":149,"href":"/docs/api/delta/","title":"fyne.Delta","section":"Api document","content":"fyne.Delta\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Delta\r#\r\rtype Delta struct { \tDX, DY float32 } Delta is a generic X, Y coordinate, size or movement representation.\nfunc NewDelta\r#\r\rfunc NewDelta(dx float32, dy float32) Delta NewDelta returns a newly allocated Delta representing a movement in the X and Y axis.\nfunc (Delta) Components\r#\r\rfunc (v Delta) Components() (float32, float32) Components returns the X and Y elements of this Delta.\nfunc (Delta) IsZero\r#\r\rfunc (v Delta) IsZero() bool IsZero returns whether the Position is at the zero-point.\n"},{"id":150,"href":"/docs/api/device/","title":"fyne.Device","section":"Api document","content":"fyne.Device\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Device\r#\r\rtype Device interface { \tOrientation() DeviceOrientation \tIsMobile() bool \tHasKeyboard() bool \tSystemScaleForWindow(Window) float32 } Device provides information about the devices the code is running on\nfunc CurrentDevice\r#\r\rfunc CurrentDevice() Device CurrentDevice returns the device information for the current hardware (via the driver)\n"},{"id":151,"href":"/docs/api/deviceorientation/","title":"fyne.DeviceOrientation","section":"Api document","content":"fyne.DeviceOrientation\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype DeviceOrientation\r#\r\rtype DeviceOrientation int DeviceOrientation represents the different ways that a mobile device can be held\nconst ( \t// OrientationVertical is the default vertical orientation \tOrientationVertical DeviceOrientation = iota \t// OrientationVerticalUpsideDown is the portrait orientation held upside down \tOrientationVerticalUpsideDown \t// OrientationHorizontalLeft is used to indicate a landscape orientation with the top to the left \tOrientationHorizontalLeft \t// OrientationHorizontalRight is used to indicate a landscape orientation with the top to the right \tOrientationHorizontalRight ) "},{"id":152,"href":"/docs/api/disableable/","title":"fyne.Disableable","section":"Api document","content":"fyne.Disableable\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Disableable\r#\r\rtype Disableable interface { \tEnable() \tDisable() \tDisabled() bool } Disableable describes any CanvasObject that can be disabled. This is primarily used with objects that also implement the Tappable interface.\n"},{"id":153,"href":"/docs/api/doubletappable/","title":"fyne.DoubleTappable","section":"Api document","content":"fyne.DoubleTappable\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype DoubleTappable\r#\r\rtype DoubleTappable interface { \tDoubleTapped(*PointEvent) } DoubleTappable describes any CanvasObject that can also be double tapped.\n"},{"id":154,"href":"/docs/api/dragevent/","title":"fyne.DragEvent","section":"Api document","content":"fyne.DragEvent\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype DragEvent\r#\r\rtype DragEvent struct { \tPointEvent \tDragged Delta } DragEvent defines the parameters of a pointer or other drag event. The DraggedX and DraggedY fields show how far the item was dragged since the last event.\n"},{"id":155,"href":"/docs/api/draggable/","title":"fyne.Draggable","section":"Api document","content":"fyne.Draggable\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Draggable\r#\r\rtype Draggable interface { \tDragged(*DragEvent) \tDragEnd() } Draggable indicates that a CanvasObject can be dragged. This is used for any item that the user has indicated should be moved across the screen.\n"},{"id":156,"href":"/docs/api/driver/","title":"fyne.Driver","section":"Api document","content":"fyne.Driver\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Driver\r#\r\rtype Driver interface { \t// CreateWindow creates a new UI Window. \tCreateWindow(string) Window \t// AllWindows returns a slice containing all app windows. \tAllWindows() []Window  \t// RenderedTextSize returns the size required to render the given string of specified \t// font size and style. It also returns the height to text baseline, measured from the top. \tRenderedTextSize(text string, fontSize float32, style TextStyle) (size Size, baseline float32)  \t// CanvasForObject returns the canvas that is associated with a given CanvasObject. \tCanvasForObject(CanvasObject) Canvas \t// AbsolutePositionForObject returns the position of a given CanvasObject relative to the top/left of a canvas. \tAbsolutePositionForObject(CanvasObject) Position  \t// Device returns the device that the application is currently running on. \tDevice() Device \t// Run starts the main event loop of the driver. \tRun() \t// Quit closes the driver and open windows, then exit the application. \t// On some some operating systems this does nothing, for example iOS and Android. \tQuit()  \t// StartAnimation registers a new animation with this driver and requests it be started. \tStartAnimation(*Animation) \t// StopAnimation stops an animation and unregisters from this driver. \tStopAnimation(*Animation) } Driver defines an abstract concept of a Fyne render driver. Any implementation must provide at least these methods.\n"},{"id":157,"href":"/docs/api/focusable/","title":"fyne.Focusable\"","section":"Api document","content":"fyne.Focusable\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Focusable\r#\r\rtype Focusable interface { \t// FocusGained is a hook called by the focus handling logic after this object gained the focus. \tFocusGained() \t// FocusLost is a hook called by the focus handling logic after this object lost the focus. \tFocusLost()  \t// TypedRune is a hook called by the input handling logic on text input events if this object is focused. \tTypedRune(rune) \t// TypedKey is a hook called by the input handling logic on key events if this object is focused. \tTypedKey(*KeyEvent) } Focusable describes any CanvasObject that can respond to being focused. It will receive the FocusGained and FocusLost events appropriately. When focused it will also have TypedRune called as text is input and TypedKey called when other keys are pressed.\nNote: You must not change canvas state (including overlays or focus) in FocusGained or FocusLost or you would end up with a dead-lock.\n"},{"id":158,"href":"/docs/api/hardwarekey/","title":"fyne.HardwareKey","section":"Api document","content":"fyne.HardwareKey\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype HardwareKey\r#\r\rtype HardwareKey struct { \t// ScanCode represents a hardware ID for (normally desktop) keyboard events. \tScanCode int } HardwareKey contains information associated with physical key events Most applications should use KeyName for cross-platform compatibility.\n"},{"id":159,"href":"/docs/api/keyevent/","title":"fyne.KeyEvent","section":"Api document","content":"fyne.KeyEvent\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype KeyEvent\r#\r\rtype KeyEvent struct { \t// Name describes the keyboard event that is consistent across platforms. \tName KeyName \t// Physical is a platform specific field that reports the hardware information of physical keyboard events. \tPhysical HardwareKey } KeyEvent describes a keyboard input event.\n"},{"id":160,"href":"/docs/api/keyname/","title":"fyne.KeyName","section":"Api document","content":"fyne.KeyName\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype KeyName\r#\r\rtype KeyName string KeyName represents the name of a key that has been pressed\nconst ( \t// KeyEscape is the \u0026#34;esc\u0026#34; key \tKeyEscape KeyName = \u0026#34;Escape\u0026#34; \t// KeyReturn is the carriage return (main keyboard) \tKeyReturn KeyName = \u0026#34;Return\u0026#34; \t// KeyTab is the tab advance key \tKeyTab KeyName = \u0026#34;Tab\u0026#34; \t// KeyBackspace is the delete-before-cursor key \tKeyBackspace KeyName = \u0026#34;BackSpace\u0026#34; \t// KeyInsert is the insert mode key \tKeyInsert KeyName = \u0026#34;Insert\u0026#34; \t// KeyDelete is the delete-after-cursor key \tKeyDelete KeyName = \u0026#34;Delete\u0026#34; \t// KeyRight is the right arrow key \tKeyRight KeyName = \u0026#34;Right\u0026#34; \t// KeyLeft is the left arrow key \tKeyLeft KeyName = \u0026#34;Left\u0026#34; \t// KeyDown is the down arrow key \tKeyDown KeyName = \u0026#34;Down\u0026#34; \t// KeyUp is the up arrow key \tKeyUp KeyName = \u0026#34;Up\u0026#34; \t// KeyPageUp is the page up num-pad key \tKeyPageUp KeyName = \u0026#34;Prior\u0026#34; \t// KeyPageDown is the page down num-pad key \tKeyPageDown KeyName = \u0026#34;Next\u0026#34; \t// KeyHome is the line-home key \tKeyHome KeyName = \u0026#34;Home\u0026#34; \t// KeyEnd is the line-end key \tKeyEnd KeyName = \u0026#34;End\u0026#34;  \t// KeyF1 is the first function key \tKeyF1 KeyName = \u0026#34;F1\u0026#34; \t// KeyF2 is the second function key \tKeyF2 KeyName = \u0026#34;F2\u0026#34; \t// KeyF3 is the third function key \tKeyF3 KeyName = \u0026#34;F3\u0026#34; \t// KeyF4 is the fourth function key \tKeyF4 KeyName = \u0026#34;F4\u0026#34; \t// KeyF5 is the fifth function key \tKeyF5 KeyName = \u0026#34;F5\u0026#34; \t// KeyF6 is the sixth function key \tKeyF6 KeyName = \u0026#34;F6\u0026#34; \t// KeyF7 is the seventh function key \tKeyF7 KeyName = \u0026#34;F7\u0026#34; \t// KeyF8 is the eighth function key \tKeyF8 KeyName = \u0026#34;F8\u0026#34; \t// KeyF9 is the ninth function key \tKeyF9 KeyName = \u0026#34;F9\u0026#34; \t// KeyF10 is the tenth function key \tKeyF10 KeyName = \u0026#34;F10\u0026#34; \t// KeyF11 is the eleventh function key \tKeyF11 KeyName = \u0026#34;F11\u0026#34; \t// KeyF12 is the twelfth function key \tKeyF12 KeyName = \u0026#34;F12\u0026#34;  \t// KeyEnter is the enter/ return key (keypad) \tKeyEnter KeyName = \u0026#34;KP_Enter\u0026#34;  \t// Key0 represents the key 0 \tKey0 KeyName = \u0026#34;0\u0026#34; \t// Key1 represents the key 1 \tKey1 KeyName = \u0026#34;1\u0026#34; \t// Key2 represents the key 2 \tKey2 KeyName = \u0026#34;2\u0026#34; \t// Key3 represents the key 3 \tKey3 KeyName = \u0026#34;3\u0026#34; \t// Key4 represents the key 4 \tKey4 KeyName = \u0026#34;4\u0026#34; \t// Key5 represents the key 5 \tKey5 KeyName = \u0026#34;5\u0026#34; \t// Key6 represents the key 6 \tKey6 KeyName = \u0026#34;6\u0026#34; \t// Key7 represents the key 7 \tKey7 KeyName = \u0026#34;7\u0026#34; \t// Key8 represents the key 8 \tKey8 KeyName = \u0026#34;8\u0026#34; \t// Key9 represents the key 9 \tKey9 KeyName = \u0026#34;9\u0026#34; \t// KeyA represents the key A \tKeyA KeyName = \u0026#34;A\u0026#34; \t// KeyB represents the key B \tKeyB KeyName = \u0026#34;B\u0026#34; \t// KeyC represents the key C \tKeyC KeyName = \u0026#34;C\u0026#34; \t// KeyD represents the key D \tKeyD KeyName = \u0026#34;D\u0026#34; \t// KeyE represents the key E \tKeyE KeyName = \u0026#34;E\u0026#34; \t// KeyF represents the key F \tKeyF KeyName = \u0026#34;F\u0026#34; \t// KeyG represents the key G \tKeyG KeyName = \u0026#34;G\u0026#34; \t// KeyH represents the key H \tKeyH KeyName = \u0026#34;H\u0026#34; \t// KeyI represents the key I \tKeyI KeyName = \u0026#34;I\u0026#34; \t// KeyJ represents the key J \tKeyJ KeyName = \u0026#34;J\u0026#34; \t// KeyK represents the key K \tKeyK KeyName = \u0026#34;K\u0026#34; \t// KeyL represents the key L \tKeyL KeyName = \u0026#34;L\u0026#34; \t// KeyM represents the key M \tKeyM KeyName = \u0026#34;M\u0026#34; \t// KeyN represents the key N \tKeyN KeyName = \u0026#34;N\u0026#34; \t// KeyO represents the key O \tKeyO KeyName = \u0026#34;O\u0026#34; \t// KeyP represents the key P \tKeyP KeyName = \u0026#34;P\u0026#34; \t// KeyQ represents the key Q \tKeyQ KeyName = \u0026#34;Q\u0026#34; \t// KeyR represents the key R \tKeyR KeyName = \u0026#34;R\u0026#34; \t// KeyS represents the key S \tKeyS KeyName = \u0026#34;S\u0026#34; \t// KeyT represents the key T \tKeyT KeyName = \u0026#34;T\u0026#34; \t// KeyU represents the key U \tKeyU KeyName = \u0026#34;U\u0026#34; \t// KeyV represents the key V \tKeyV KeyName = \u0026#34;V\u0026#34; \t// KeyW represents the key W \tKeyW KeyName = \u0026#34;W\u0026#34; \t// KeyX represents the key X \tKeyX KeyName = \u0026#34;X\u0026#34; \t// KeyY represents the key Y \tKeyY KeyName = \u0026#34;Y\u0026#34; \t// KeyZ represents the key Z \tKeyZ KeyName = \u0026#34;Z\u0026#34;  \t// KeySpace is the space key \tKeySpace KeyName = \u0026#34;Space\u0026#34; \t// KeyApostrophe is the key \u0026#34;\u0026#39;\u0026#34; \tKeyApostrophe KeyName = \u0026#34;\u0026#39;\u0026#34; \t// KeyComma is the key \u0026#34;,\u0026#34; \tKeyComma KeyName = \u0026#34;,\u0026#34; \t// KeyMinus is the key \u0026#34;-\u0026#34; \tKeyMinus KeyName = \u0026#34;-\u0026#34; \t// KeyPeriod is the key \u0026#34;.\u0026#34; (full stop) \tKeyPeriod KeyName = \u0026#34;.\u0026#34; \t// KeySlash is the key \u0026#34;/\u0026#34; \tKeySlash KeyName = \u0026#34;/\u0026#34; \t// KeyBackslash is the key \u0026#34;\\\u0026#34; \tKeyBackslash KeyName = \u0026#34;\\\\\u0026#34; \t// KeyLeftBracket is the key \u0026#34;[\u0026#34; \tKeyLeftBracket KeyName = \u0026#34;[\u0026#34; \t// KeyRightBracket is the key \u0026#34;]\u0026#34; \tKeyRightBracket KeyName = \u0026#34;]\u0026#34; \t// KeySemicolon is the key \u0026#34;;\u0026#34; \tKeySemicolon KeyName = \u0026#34;;\u0026#34; \t// KeyEqual is the key \u0026#34;=\u0026#34; \tKeyEqual KeyName = \u0026#34;=\u0026#34; \t// KeyAsterisk is the keypad key \u0026#34;*\u0026#34; \tKeyAsterisk KeyName = \u0026#34;*\u0026#34; \t// KeyPlus is the keypad key \u0026#34;+\u0026#34; \tKeyPlus KeyName = \u0026#34;+\u0026#34; \t// KeyBackTick is the key \u0026#34;`\u0026#34; on a US keyboard \tKeyBackTick KeyName = \u0026#34;`\u0026#34;  \t// KeyUnknown is used for key events where the underlying hardware generated an \t// event that Fyne could not decode. \t// \t// Since: 2.1 \tKeyUnknown KeyName = \u0026#34;\u0026#34; ) "},{"id":161,"href":"/docs/api/layout/","title":"fyne.Layout","section":"Api document","content":"fyne.Layout\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Layout\r#\r\rtype Layout interface { \t// Layout will manipulate the listed CanvasObjects Size and Position \t// to fit within the specified size. \tLayout([]CanvasObject, Size) \t// MinSize calculates the smallest size that will fit the listed \t// CanvasObjects using this Layout algorithm. \tMinSize(objects []CanvasObject) Size } Layout defines how CanvasObjects may be laid out in a specified Size.\n"},{"id":162,"href":"/docs/api/legacytheme/","title":"fyne.LegacyTheme","section":"Api document","content":"fyne.LegacyTheme\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype LegacyTheme\r#\r\rtype LegacyTheme interface { \tBackgroundColor() color.Color \tButtonColor() color.Color \tDisabledButtonColor() color.Color \tTextColor() color.Color \tDisabledTextColor() color.Color \tPlaceHolderColor() color.Color \tPrimaryColor() color.Color \tHoverColor() color.Color \tFocusColor() color.Color \tScrollBarColor() color.Color \tShadowColor() color.Color  \tTextSize() int \tTextFont() Resource \tTextBoldFont() Resource \tTextItalicFont() Resource \tTextBoldItalicFont() Resource \tTextMonospaceFont() Resource  \tPadding() int \tIconInlineSize() int \tScrollBarSize() int \tScrollBarSmallSize() int } LegacyTheme defines the requirements of any Fyne theme. This was previously called Theme and is kept for simpler transition of applications built before v2.0.0.\nSince: \r2.0\r"},{"id":163,"href":"/docs/api/lifecycle/","title":"fyne.Lifecycle","section":"Api document","content":"fyne.Lifecycle\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Lifecycle\r#\r\rtype Lifecycle interface { \t// SetOnEnteredForeground hooks into the app becoming foreground and gaining focus. \tSetOnEnteredForeground(func()) \t// SetOnExitedForeground hooks into the app losing input focus and going into the background. \tSetOnExitedForeground(func()) \t// SetOnStarted hooks into an event that says the app is now running. \tSetOnStarted(func()) \t// SetOnStopped hooks into an event that says the app is no longer running. \tSetOnStopped(func()) } Lifecycle represents the various phases that an app can transition through.\nSince: \r2.1\r"},{"id":164,"href":"/docs/api/listableuri/","title":"fyne.ListableURI","section":"Api document","content":"fyne.ListableURI\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ListableURI\r#\r\rtype ListableURI interface { \tURI  \t// List returns a list of child URIs of this URI. \tList() ([]URI, error) } ListableURI represents a URI that can have child items, most commonly a directory on disk in the native filesystem.\nSince: \r1.4\r"},{"id":165,"href":"/docs/api/mainmenu/","title":"fyne.MainMenu","section":"Api document","content":"fyne.MainMenu\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype MainMenu\r#\r\rtype MainMenu struct { \tItems []*Menu } MainMenu defines the data required to show a menu bar (desktop) or other appropriate top level menu.\nfunc NewMainMenu\r#\r\rfunc NewMainMenu(items ...*Menu) *MainMenu NewMainMenu creates a top level menu structure used by fyne.Window for displaying a menubar (or appropriate equivalent).\n"},{"id":166,"href":"/docs/api/menu/","title":"fyne.Menu","section":"Api document","content":"fyne.Menu\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Menu\r#\r\rtype Menu struct { \tLabel string \tItems []*MenuItem } Menu stores the information required for a standard menu. A menu can pop down from a MainMenu or could be a pop out menu.\nfunc NewMenu\r#\r\rfunc NewMenu(label string, items ...*MenuItem) *Menu NewMenu creates a new menu given the specified label (to show in a MainMenu) and list of items to display.\n"},{"id":167,"href":"/docs/api/menuitem/","title":"fyne.MenuItem","section":"Api document","content":"fyne.MenuItem\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype MenuItem\r#\r\rtype MenuItem struct { \tChildMenu *Menu \t// Since: 2.1 \tIsQuit bool \tIsSeparator bool \tLabel string \tAction func() \t// Since: 2.1 \tDisabled bool \t// Since: 2.1 \tChecked bool } MenuItem is a single item within any menu, it contains a display Label and Action function that is called when tapped.\nfunc NewMenuItem\r#\r\rfunc NewMenuItem(label string, action func()) *MenuItem NewMenuItem creates a new menu item from the passed label and action parameters.\nfunc NewMenuItemSeparator\r#\r\rfunc NewMenuItemSeparator() *MenuItem NewMenuItemSeparator creates a menu item that is to be used as a separator.\n"},{"id":168,"href":"/docs/api/notification/","title":"fyne.Notification","section":"Api document","content":"fyne.Notification\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Notification\r#\r\rtype Notification struct { \tTitle, Content string } Notification represents a user notification that can be sent to the operating system.\nfunc NewNotification\r#\r\rfunc NewNotification(title, content string) *Notification NewNotification creates a notification that can be passed to App.SendNotification.\n"},{"id":169,"href":"/docs/api/overlaystack/","title":"fyne.OverlayStack","section":"Api document","content":"fyne.OverlayStack\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype OverlayStack\r#\r\rtype OverlayStack interface { \t// Add adds an overlay on the top of the overlay stack. \tAdd(overlay CanvasObject) \t// List returns the overlays currently on the overlay stack. \tList() []CanvasObject \t// Remove removes the given object and all objects above it from the overlay stack. \tRemove(overlay CanvasObject) \t// Top returns the top-most object of the overlay stack. \tTop() CanvasObject } OverlayStack is a stack of CanvasObjects intended to be used as overlays of a Canvas.\n"},{"id":170,"href":"/docs/api/pointevent/","title":"fyne.PointEvent","section":"Api document","content":"fyne.PointEvent\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype PointEvent\r#\r\rtype PointEvent struct { \tAbsolutePosition Position // The absolute position of the event \tPosition Position // The relative position of the event } PointEvent describes a pointer input event. The position is relative to the top-left of the CanvasObject this is triggered on.\n"},{"id":171,"href":"/docs/api/position/","title":"fyne.Position","section":"Api document","content":"fyne.Position\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Position\r#\r\rtype Position struct { \tX float32 // The position from the parent\u0026#39;s left edge \tY float32 // The position from the parent\u0026#39;s top edge } Position describes a generic X, Y coordinate relative to a parent Canvas or CanvasObject.\nfunc NewPos\r#\r\rfunc NewPos(x float32, y float32) Position NewPos returns a newly allocated Position representing the specified coordinates.\nfunc (Position) Add\r#\r\rfunc (p Position) Add(v Vector2) Position Add returns a new Position that is the result of offsetting the current position by p2 X and Y.\nfunc (Position) Components\r#\r\rfunc (p Position) Components() (float32, float32) Components returns the X and Y elements of this Position\nfunc (Position) IsZero\r#\r\rfunc (p Position) IsZero() bool IsZero returns whether the Position is at the zero-point.\nfunc (Position) Subtract\r#\r\rfunc (p Position) Subtract(v Vector2) Position Subtract returns a new Position that is the result of offsetting the current position by p2 -X and -Y.\n"},{"id":172,"href":"/docs/api/preferences/","title":"fyne.Preferences","section":"Api document","content":"fyne.Preferences\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Preferences\r#\r\rtype Preferences interface { \t// Bool looks up a boolean value for the key \tBool(key string) bool \t// BoolWithFallback looks up a boolean value and returns the given fallback if not found \tBoolWithFallback(key string, fallback bool) bool \t// SetBool saves a boolean value for the given key \tSetBool(key string, value bool)  \t// Float looks up a float64 value for the key \tFloat(key string) float64 \t// FloatWithFallback looks up a float64 value and returns the given fallback if not found \tFloatWithFallback(key string, fallback float64) float64 \t// SetFloat saves a float64 value for the given key \tSetFloat(key string, value float64)  \t// Int looks up an integer value for the key \tInt(key string) int \t// IntWithFallback looks up an integer value and returns the given fallback if not found \tIntWithFallback(key string, fallback int) int \t// SetInt saves an integer value for the given key \tSetInt(key string, value int)  \t// String looks up a string value for the key \tString(key string) string \t// StringWithFallback looks up a string value and returns the given fallback if not found \tStringWithFallback(key, fallback string) string \t// SetString saves a string value for the given key \tSetString(key string, value string)  \t// RemoveValue removes a value for the given key (not currently supported on iOS) \tRemoveValue(key string)  \t// AddChangeListener allows code to be notified when some preferences change. This will fire on any update. \tAddChangeListener(func()) } Preferences describes the ways that an app can save and load user preferences\n"},{"id":173,"href":"/docs/api/resource/","title":"fyne.Resource","section":"Api document","content":"fyne.Resource\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Resource\r#\r\rtype Resource interface { \tName() string \tContent() []byte } Resource represents a single binary resource, such as an image or font. A resource has an identifying name and byte array content. The serialised path of a resource can be obtained which may result in a blocking filesystem write operation.\nfunc LoadResourceFromPath\r#\r\rfunc LoadResourceFromPath(path string) (Resource, error) LoadResourceFromPath creates a new StaticResource in memory using the contents of the specified file.\nfunc LoadResourceFromURLString\r#\r\rfunc LoadResourceFromURLString(urlStr string) (Resource, error) LoadResourceFromURLString creates a new StaticResource in memory using the body of the specified URL.\n"},{"id":174,"href":"/docs/api/scrollable/","title":"fyne.Scrollable","section":"Api document","content":"fyne.Scrollable\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Scrollable\r#\r\rtype Scrollable interface { \tScrolled(*ScrollEvent) } Scrollable describes any CanvasObject that can also be scrolled. This is mostly used to implement the widget.ScrollContainer.\n"},{"id":175,"href":"/docs/api/scrollevent/","title":"fyne.ScrollEvent","section":"Api document","content":"fyne.ScrollEvent\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ScrollEvent\r#\r\rtype ScrollEvent struct { \tPointEvent \tScrolled Delta } ScrollEvent defines the parameters of a pointer or other scroll event. The DeltaX and DeltaY represent how large the scroll was in two dimensions.\n"},{"id":176,"href":"/docs/api/secondarytappable/","title":"fyne.SecondaryTappable","section":"Api document","content":"fyne.SecondaryTappable\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype SecondaryTappable\r#\r\rtype SecondaryTappable interface { \tTappedSecondary(*PointEvent) } SecondaryTappable describes a CanvasObject that can be right-clicked or long-tapped.\n"},{"id":177,"href":"/docs/api/settings/","title":"fyne.Settings","section":"Api document","content":"fyne.Settings\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Settings\r#\r\rtype Settings interface { \tTheme() Theme \tSetTheme(Theme) \t// ThemeVariant defines which preferred version of a theme should be used (i.e. light or dark) \t// \t// Since: 2.0 \tThemeVariant() ThemeVariant \tScale() float32 \t// PrimaryColor indicates a user preference for a named primary color \t// \t// Since: 1.4 \tPrimaryColor() string  \tAddChangeListener(chan Settings) \tBuildType() BuildType } Settings describes the application configuration available.\n"},{"id":178,"href":"/docs/api/shortcut/","title":"fyne.Shortcut","section":"Api document","content":"fyne.Shortcut\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Shortcut\r#\r\rtype Shortcut interface { \tShortcutName() string } Shortcut is the interface used to describe a shortcut action\n"},{"id":179,"href":"/docs/api/shortcutable/","title":"fyne.Shortcutable","section":"Api document","content":"fyne.Shortcutable\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Shortcutable\r#\r\rtype Shortcutable interface { \tTypedShortcut(Shortcut) } Shortcutable describes any CanvasObject that can respond to shortcut commands (quit, cut, copy, and paste).\n"},{"id":180,"href":"/docs/api/shortcutcopy/","title":"fyne.ShortcutCopy","section":"Api document","content":"fyne.ShortcutCopy\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ShortcutCopy\r#\r\rtype ShortcutCopy struct { \tClipboard Clipboard } ShortcutCopy describes a shortcut copy action.\nfunc (*ShortcutCopy) ShortcutName\r#\r\rfunc (se *ShortcutCopy) ShortcutName() string ShortcutName returns the shortcut name\n"},{"id":181,"href":"/docs/api/shortcutcut/","title":"fyne.ShortcutCut","section":"Api document","content":"fyne.ShortcutCut\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ShortcutCut\r#\r\rtype ShortcutCut struct { \tClipboard Clipboard } ShortcutCut describes a shortcut cut action.\nfunc (*ShortcutCut) ShortcutName\r#\r\rfunc (se *ShortcutCut) ShortcutName() string ShortcutName returns the shortcut name\n"},{"id":182,"href":"/docs/api/shortcuthandler/","title":"fyne.ShortcutHandler","section":"Api document","content":"fyne.ShortcutHandler\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ShortcutHandler\r#\r\rtype ShortcutHandler struct { } ShortcutHandler is a default implementation of the shortcut handler for the canvasObject\nfunc (*ShortcutHandler) AddShortcut\r#\r\rfunc (sh *ShortcutHandler) AddShortcut(shortcut Shortcut, handler func(shortcut Shortcut)) AddShortcut register an handler to be executed when the shortcut action is triggered\nfunc (*ShortcutHandler) RemoveShortcut\r#\r\rfunc (sh *ShortcutHandler) RemoveShortcut(shortcut Shortcut) RemoveShortcut removes a registered shortcut\nfunc (*ShortcutHandler) TypedShortcut\r#\r\rfunc (sh *ShortcutHandler) TypedShortcut(shortcut Shortcut) TypedShortcut handle the registered shortcut\n"},{"id":183,"href":"/docs/api/shortcutpaste/","title":"fyne.ShortcutPaste","section":"Api document","content":"fyne.ShortcutPaste\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ShortcutPaste\r#\r\rtype ShortcutPaste struct { \tClipboard Clipboard } ShortcutPaste describes a shortcut paste action.\nfunc (*ShortcutPaste) ShortcutName\r#\r\rfunc (se *ShortcutPaste) ShortcutName() string ShortcutName returns the shortcut name\n"},{"id":184,"href":"/docs/api/shortcutselectall/","title":"fyne.ShortcutSelectAll","section":"Api document","content":"fyne.ShortcutSelectAll\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ShortcutSelectAll\r#\r\rtype ShortcutSelectAll struct{} ShortcutSelectAll describes a shortcut selectAll action.\nfunc (*ShortcutSelectAll) ShortcutName\r#\r\rfunc (se *ShortcutSelectAll) ShortcutName() string ShortcutName returns the shortcut name\n"},{"id":185,"href":"/docs/api/size/","title":"fyne.Size","section":"Api document","content":"fyne.Size\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Size\r#\r\rtype Size struct { \tWidth float32 // The number of units along the X axis. \tHeight float32 // The number of units along the Y axis. } Size describes something with width and height.\nfunc MeasureText\r#\r\rfunc MeasureText(text string, size float32, style TextStyle) Size MeasureText uses the current driver to calculate the size of text when rendered.\nfunc NewSize\r#\r\rfunc NewSize(w float32, h float32) Size NewSize returns a newly allocated Size of the specified dimensions.\nfunc (Size) Add\r#\r\rfunc (s Size) Add(v Vector2) Size Add returns a new Size that is the result of increasing the current size by s2 Width and Height.\nfunc (Size) Components\r#\r\rfunc (s Size) Components() (float32, float32) Components returns the Width and Height elements of this Size\nfunc (Size) IsZero\r#\r\rfunc (s Size) IsZero() bool IsZero returns whether the Size has zero width and zero height.\nfunc (Size) Max\r#\r\rfunc (s Size) Max(v Vector2) Size Max returns a new Size that is the maximum of the current Size and s2.\nfunc (Size) Min\r#\r\rfunc (s Size) Min(v Vector2) Size Min returns a new Size that is the minimum of the current Size and s2.\nfunc (Size) Subtract\r#\r\rfunc (s Size) Subtract(v Vector2) Size Subtract returns a new Size that is the result of decreasing the current size by s2 Width and Height.\n"},{"id":186,"href":"/docs/api/staticresource/","title":"fyne.StaticResource","section":"Api document","content":"fyne.StaticResource\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype StaticResource\r#\r\rtype StaticResource struct { \tStaticName string \tStaticContent []byte } StaticResource is a bundled resource compiled into the application. These resources are normally generated by the fyne_bundle command included in the Fyne toolkit.\nfunc NewStaticResource\r#\r\rfunc NewStaticResource(name string, content []byte) *StaticResource NewStaticResource returns a new static resource object with the specified name and content. Creating a new static resource in memory results in sharable binary data that may be serialised to the location returned by CachePath().\nfunc (*StaticResource) Content\r#\r\rfunc (r *StaticResource) Content() []byte Content returns the bytes of the bundled resource, no compression is applied but any compression on the resource is retained.\nfunc (*StaticResource) GoString\r#\r\rfunc (r *StaticResource) GoString() string GoString converts a Resource object to Go code. This is useful if serialising to a Go file for compilation into a binary.\nfunc (*StaticResource) Name\r#\r\rfunc (r *StaticResource) Name() string Name returns the unique name of this resource, usually matching the file it was generated from.\n"},{"id":187,"href":"/docs/api/storage/","title":"fyne.Storage","section":"Api document","content":"fyne.Storage\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Storage\r#\r\rtype Storage interface { \tRootURI() URI  \tCreate(name string) (URIWriteCloser, error) \tOpen(name string) (URIReadCloser, error) \tSave(name string) (URIWriteCloser, error) \tRemove(name string) error  \tList() []string } Storage is used to manage file storage inside an application sandbox. The files managed by this interface are unique to the current application.\n"},{"id":188,"href":"/docs/api/stringvalidator/","title":"fyne.StringValidator","section":"Api document","content":"fyne.StringValidator\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype StringValidator\r#\r\rtype StringValidator func(string) error StringValidator is a function signature for validating string inputs.\nSince: \r1.4\r"},{"id":189,"href":"/docs/api/tabbable/","title":"fyne.Tabbable","section":"Api document","content":"fyne.Tabbable\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Tabbable\r#\r\rtype Tabbable interface { \t// AcceptsTab() is a hook called by the key press handling logic. \t// If it returns true then the Tab key events will be sent using TypedKey. \tAcceptsTab() bool } Tabbable describes any object that needs to accept the Tab key presses.\nSince: \r2.1\r"},{"id":190,"href":"/docs/api/tappable/","title":"fyne.Tappable","section":"Api document","content":"fyne.Tappable\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Tappable\r#\r\rtype Tappable interface { \tTapped(*PointEvent) } Tappable describes any CanvasObject that can also be tapped. This should be implemented by buttons etc that wish to handle pointer interactions.\n"},{"id":191,"href":"/docs/api/textalign/","title":"fyne.TextAlign","section":"Api document","content":"fyne.TextAlign\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype TextAlign\r#\r\rtype TextAlign int TextAlign represents the horizontal alignment of text within a widget or canvas object.\nconst ( \t// TextAlignLeading specifies a left alignment for left-to-right languages. \tTextAlignLeading TextAlign = iota \t// TextAlignCenter places the text centrally within the available space. \tTextAlignCenter \t// TextAlignTrailing will align the text right for a left-to-right language. \tTextAlignTrailing ) "},{"id":192,"href":"/docs/api/textstyle/","title":"fyne.TextStyle","section":"Api document","content":"fyne.TextStyle\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype TextStyle\r#\r\rtype TextStyle struct { \tBold bool // Should text be bold \tItalic bool // Should text be italic \tMonospace bool // Use the system monospace font instead of regular  \t// Since: 2.1 \tTabWidth int // Width of tabs in spaces } TextStyle represents the styles that can be applied to a text canvas object or text based widget.\n"},{"id":193,"href":"/docs/api/textwrap/","title":"fyne.TextWrap","section":"Api document","content":"fyne.TextWrap\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype TextWrap\r#\r\rtype TextWrap int TextWrap represents how text longer than the widget\u0026rsquo;s width will be wrapped.\nconst ( \t// TextWrapOff extends the widget\u0026#39;s width to fit the text, no wrapping is applied. \tTextWrapOff TextWrap = iota \t// TextTruncate trims the text to the widget\u0026#39;s width, no wrapping is applied. \t// If an entry is asked to truncate it will provide scrolling capabilities. \tTextTruncate \t// TextWrapBreak trims the line of characters to the widget\u0026#39;s width adding the excess as new line. \t// An Entry with text wrapping will scroll vertically if there is not enough space for all the text. \tTextWrapBreak \t// TextWrapWord trims the line of words to the widget\u0026#39;s width adding the excess as new line. \t// An Entry with text wrapping will scroll vertically if there is not enough space for all the text. \tTextWrapWord ) "},{"id":194,"href":"/docs/api/theme/","title":"fyne.Theme","section":"Api document","content":"fyne.Theme\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Theme\r#\r\rtype Theme interface { \tColor(ThemeColorName, ThemeVariant) color.Color \tFont(TextStyle) Resource \tIcon(ThemeIconName) Resource \tSize(ThemeSizeName) float32 } Theme defines the method to look up colors, sizes and fonts that make up a Fyne theme.\nSince: \r2.0\r"},{"id":195,"href":"/docs/api/themecolorname/","title":"fyne.ThemeColorName","section":"Api document","content":"fyne.ThemeColorName\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ThemeColorName\r#\r\rtype ThemeColorName string ThemeColorName is used to look up a colour based on its name.\nSince: \r2.0\r"},{"id":196,"href":"/docs/api/themeiconname/","title":"fyne.ThemeIconName","section":"Api document","content":"fyne.ThemeIconName\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ThemeIconName\r#\r\rtype ThemeIconName string ThemeIconName is used to look up an icon based on its name.\nSince: \r2.0\r"},{"id":197,"href":"/docs/api/themesizename/","title":"fyne.ThemeSizeName","section":"Api document","content":"fyne.ThemeSizeName\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ThemeSizeName\r#\r\rtype ThemeSizeName string ThemeSizeName is used to look up a size based on its name.\nSince: \r2.0\r"},{"id":198,"href":"/docs/api/themevariant/","title":"fyne.ThemeVariant","section":"Api document","content":"fyne.ThemeVariant\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype ThemeVariant\r#\r\rtype ThemeVariant uint ThemeVariant indicates a variation of a theme, such as light or dark.\nSince: \r2.0\r"},{"id":199,"href":"/docs/api/uri/","title":"fyne.URI","section":"Api document","content":"fyne.URI\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype URI\r#\r\rtype URI interface { \tfmt.Stringer  \t// Extension should return the file extension of the resource \t// referenced by the URI. For example, the Extension() of \t// \u0026#39;file://foo/bar.baz\u0026#39; is \u0026#39;baz\u0026#39;. May return an empty string if the \t// referenced resource has none. \tExtension() string  \t// Name should return the base name of the item referenced by the URI. \t// For example, the Name() of \u0026#39;file://foo/bar.baz\u0026#39; is \u0026#39;bar.baz\u0026#39;. \tName() string  \t// MimeType should return the content type of the resource referenced \t// by the URI. The returned string should be in the format described \t// by Section 5 of RFC2045 (\u0026#34;Content-Type Header Field\u0026#34;). \tMimeType() string  \t// Scheme should return the URI scheme of the URI as defined by IETF \t// RFC3986. For example, the Scheme() of \u0026#39;file://foo/bar.baz` is \t// \u0026#39;file\u0026#39;. \t// \t// Scheme should always return the scheme in all lower-case characters. \tScheme() string  \t// Authority should return the URI authority, as defined by IETF \t// RFC3986. \t// \t// NOTE: the RFC3986 can be obtained by combining the User and Host \t// Fields of net/url\u0026#39;s URL structure. Consult IETF RFC3986, section \t// 3.2, pp. 17. \t// \t// Since: 2.0 \tAuthority() string  \t// Path should return the URI path, as defined by IETF RFC3986. \t// \t// Since: 2.0 \tPath() string  \t// Query should return the URI query, as defined by IETF RFC3986. \t// \t// Since: 2.0 \tQuery() string  \t// Fragment should return the URI fragment, as defined by IETF \t// RFC3986. \t// \t// Since: 2.0 \tFragment() string } URI represents the identifier of a resource on a target system. This resource may be a file or another data source such as an app or file sharing system.\nIn general, it is expected that URI implementations follow IETF RFC3896. Implementations are highly recommended to utilize net/url to implement URI parsing methods, especially Scheme(), AUthority(), Path(), Query(), and Fragment().\n"},{"id":200,"href":"/docs/api/urireadcloser/","title":"fyne.URIReadCloser","section":"Api document","content":"fyne.URIReadCloser\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype URIReadCloser\r#\r\rtype URIReadCloser interface { \tio.ReadCloser  \tURI() URI } URIReadCloser represents a cross platform data stream from a file or provider of data. It may refer to an item on a filesystem or data in another application that we have access to.\n"},{"id":201,"href":"/docs/api/uriwritecloser/","title":"fyne.URIWriteCloser","section":"Api document","content":"fyne.URIWriteCloser\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype URIWriteCloser\r#\r\rtype URIWriteCloser interface { \tio.WriteCloser  \tURI() URI } URIWriteCloser represents a cross platform data writer for a file resource. This will normally refer to a local file resource.\n"},{"id":202,"href":"/docs/api/validatable/","title":"fyne.Validatable","section":"Api document","content":"fyne.Validatable\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Validatable\r#\r\rtype Validatable interface { \tValidate() error  \t// SetOnValidationChanged is used to set the callback that will be triggered when the validation state changes. \t// The function might be overwritten by a parent that cares about child validation (e.g. widget.Form). \tSetOnValidationChanged(func(error)) } Validatable is an interface for specifying if a widget is validatable.\nSince: \r1.4\r"},{"id":203,"href":"/docs/api/vector2/","title":"fyne.Vector2","section":"Api document","content":"fyne.Vector2\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Vector2\r#\r\rtype Vector2 interface { \tComponents() (float32, float32) \tIsZero() bool } Vector2 marks geometry types that can operate as a coordinate vector.\n"},{"id":204,"href":"/docs/api/widget/","title":"fyne.Widget","section":"Api document","content":"fyne.Widget\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Widget\r#\r\rtype Widget interface { \tCanvasObject  \t// CreateRenderer returns a new WidgetRenderer for this widget. \t// This should not be called by regular code, it is used internally to render a widget. \tCreateRenderer() WidgetRenderer } Widget defines the standard behaviours of any widget. This extends the CanvasObject - a widget behaves in the same basic way but will encapsulate many child objects to create the rendered widget.\n"},{"id":205,"href":"/docs/api/widgetrenderer/","title":"fyne.WidgetRenderer","section":"Api document","content":"fyne.WidgetRenderer\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype WidgetRenderer\r#\r\rtype WidgetRenderer interface { \t// Destroy is for internal use. \tDestroy() \t// Layout is a hook that is called if the widget needs to be laid out. \t// This should never call Refresh. \tLayout(Size) \t// MinSize returns the minimum size of the widget that is rendered by this renderer. \tMinSize() Size \t// Objects returns all objects that should be drawn. \tObjects() []CanvasObject \t// Refresh is a hook that is called if the widget has updated and needs to be redrawn. \t// This might trigger a Layout. \tRefresh() } WidgetRenderer defines the behaviour of a widget\u0026rsquo;s implementation. This is returned from a widget\u0026rsquo;s declarative object through the CreateRenderer() function and should be exactly one instance per widget in memory.\n"},{"id":206,"href":"/docs/api/window/","title":"fyne.Window","section":"Api document","content":"fyne.Window\r#\r\r import \u0026#34;fyne.io/fyne/v2\u0026#34; Usage\r#\r\rtype Window\r#\r\rtype Window interface { \t// Title returns the current window title. \t// This is typically displayed in the window decorations. \tTitle() string \t// SetTitle updates the current title of the window. \tSetTitle(string)  \t// FullScreen returns whether or not this window is currently full screen. \tFullScreen() bool \t// SetFullScreen changes the requested fullScreen property \t// true for a fullScreen window and false to unset this. \tSetFullScreen(bool)  \t// Resize this window to the requested content size. \t// The result may not be exactly as desired due to various desktop or \t// platform constraints. \tResize(Size)  \t// RequestFocus attempts to raise and focus this window. \t// This should only be called when you are sure the user would want this window \t// to steal focus from any current focused window. \tRequestFocus()  \t// FixedSize returns whether or not this window should disable resizing. \tFixedSize() bool \t// SetFixedSize sets a hint that states whether the window should be a fixed \t// size or allow resizing. \tSetFixedSize(bool)  \t// CenterOnScreen places a window at the center of the monitor \t// the Window object is currently positioned on. \tCenterOnScreen()  \t// Padded, normally true, states whether the window should have inner \t// padding so that components do not touch the window edge. \tPadded() bool \t// SetPadded allows applications to specify that a window should have \t// no inner padding. Useful for fullscreen or graphic based applications. \tSetPadded(bool)  \t// Icon returns the window icon, this is used in various ways \t// depending on operating system. \t// Most commonly this is displayed on the window border or task switcher. \tIcon() Resource  \t// SetIcon sets the icon resource used for this window. \t// If none is set should return the application icon. \tSetIcon(Resource)  \t// SetMaster indicates that closing this window should exit the app \tSetMaster()  \t// MainMenu gets the content of the window\u0026#39;s top level menu. \tMainMenu() *MainMenu  \t// SetMainMenu adds a top level menu to this window. \t// The way this is rendered will depend on the loaded driver. \tSetMainMenu(*MainMenu)  \t// SetOnClosed sets a function that runs when the window is closed. \tSetOnClosed(func())  \t// SetCloseIntercept sets a function that runs instead of closing if defined. \t// Close() should be called explicitly in the interceptor to close the window. \t// \t// Since: 1.4 \tSetCloseIntercept(func())  \t// Show the window on screen. \tShow() \t// Hide the window from the user. \t// This will not destroy the window or cause the app to exit. \tHide() \t// Close the window. \t// If it is the only open window, or the \u0026#34;master\u0026#34; window the app will Quit. \tClose()  \t// ShowAndRun is a shortcut to show the window and then run the application. \t// This should be called near the end of a main() function as it will block. \tShowAndRun()  \t// Content returns the content of this window. \tContent() CanvasObject \t// SetContent sets the content of this window. \tSetContent(CanvasObject) \t// Canvas returns the canvas context to render in the window. \t// This can be useful to set a key handler for the window, for example. \tCanvas() Canvas  \t// Clipboard returns the system clipboard \tClipboard() Clipboard } Window describes a user interface window. Depending on the platform an app may have many windows or just the one.\n"},{"id":207,"href":"/docs/api/layout/","title":"layout","section":"Api document","content":"layout\r#\r\r import \u0026#34;fyne.io/fyne/v2/layout\u0026#34; Package layout defines the various layouts available to Fyne apps\nUsage\r#\r\rfunc NewAdaptiveGridLayout\r#\r\rfunc NewAdaptiveGridLayout(rowcols int) fyne.Layout NewAdaptiveGridLayout returns a new grid layout which uses columns when horizontal but rows when vertical.\nfunc NewBorderLayout\r#\r\rfunc NewBorderLayout(top, bottom, left, right fyne.CanvasObject) fyne.Layout NewBorderLayout creates a new BorderLayout instance with top, bottom, left and right objects set. All other items in the container will fill the centre space\nfunc NewCenterLayout\r#\r\rfunc NewCenterLayout() fyne.Layout NewCenterLayout creates a new CenterLayout instance\nfunc NewFormLayout\r#\r\rfunc NewFormLayout() fyne.Layout NewFormLayout returns a new FormLayout instance\nfunc NewGridLayout\r#\r\rfunc NewGridLayout(cols int) fyne.Layout NewGridLayout returns a grid layout arranged in a specified number of columns. The number of rows will depend on how many children are in the container that uses this layout.\nfunc NewGridLayoutWithColumns\r#\r\rfunc NewGridLayoutWithColumns(cols int) fyne.Layout NewGridLayoutWithColumns returns a new grid layout that specifies a column count and wrap to new rows when needed.\nfunc NewGridLayoutWithRows\r#\r\rfunc NewGridLayoutWithRows(rows int) fyne.Layout NewGridLayoutWithRows returns a new grid layout that specifies a row count that creates new rows as required.\nfunc NewGridWrapLayout\r#\r\rfunc NewGridWrapLayout(size fyne.Size) fyne.Layout NewGridWrapLayout returns a new GridWrapLayout instance\nfunc NewHBoxLayout\r#\r\rfunc NewHBoxLayout() fyne.Layout NewHBoxLayout returns a horizontal box layout for stacking a number of child canvas objects or widgets left to right.\nfunc NewMaxLayout\r#\r\rfunc NewMaxLayout() fyne.Layout NewMaxLayout creates a new MaxLayout instance\nfunc NewPaddedLayout\r#\r\rfunc NewPaddedLayout() fyne.Layout NewPaddedLayout creates a new PaddedLayout instance\nSince: \r1.4\rfunc NewSpacer\r#\r\rfunc NewSpacer() fyne.CanvasObject NewSpacer returns a spacer object which can fill vertical and horizontal space. This is primarily used with a box layout.\nfunc NewVBoxLayout\r#\r\rfunc NewVBoxLayout() fyne.Layout NewVBoxLayout returns a vertical box layout for stacking a number of child canvas objects or widgets top to bottom.\ntypes\r#\r\r \rSpacer \rSpacerObject  "},{"id":208,"href":"/docs/api/layout/spacer/","title":"layout.Spacer","section":"layout","content":"layout.Spacer\r#\r\r import \u0026#34;fyne.io/fyne/v2/layout\u0026#34; Usage\r#\r\rtype Spacer\r#\r\rtype Spacer struct { \tFixHorizontal bool \tFixVertical bool } Spacer is any simple object that can be used in a box layout to space out child objects\nfunc (*Spacer) ExpandHorizontal\r#\r\rfunc (s *Spacer) ExpandHorizontal() bool ExpandHorizontal returns whether or not this spacer expands on the horizontal axis\nfunc (*Spacer) ExpandVertical\r#\r\rfunc (s *Spacer) ExpandVertical() bool ExpandVertical returns whether or not this spacer expands on the vertical axis\nfunc (*Spacer) Hide\r#\r\rfunc (s *Spacer) Hide() Hide removes this Spacer from layout calculations\nfunc (*Spacer) MinSize\r#\r\rfunc (s *Spacer) MinSize() fyne.Size MinSize returns a 0 size as a Spacer can shrink to no actual size\nfunc (*Spacer) Move\r#\r\rfunc (s *Spacer) Move(pos fyne.Position) Move sets a new position for the Spacer - this will be called by the layout\nfunc (*Spacer) Position\r#\r\rfunc (s *Spacer) Position() fyne.Position Position returns the current position of this Spacer\nfunc (*Spacer) Refresh\r#\r\rfunc (s *Spacer) Refresh() Refresh does nothing for a spacer but is part of the CanvasObject definition\nfunc (*Spacer) Resize\r#\r\rfunc (s *Spacer) Resize(size fyne.Size) Resize sets a new size for the Spacer - this will be called by the layout\nfunc (*Spacer) Show\r#\r\rfunc (s *Spacer) Show() Show sets the Spacer to be part of the layout calculations\nfunc (*Spacer) Size\r#\r\rfunc (s *Spacer) Size() fyne.Size Size returns the current size of this Spacer\nfunc (*Spacer) Visible\r#\r\rfunc (s *Spacer) Visible() bool Visible returns true if this spacer should affect the layout\n"},{"id":209,"href":"/docs/api/layout/spacerobject/","title":"layout.SpacerObject","section":"layout","content":"layout.SpacerObject\r#\r\r import \u0026#34;fyne.io/fyne/v2/layout\u0026#34; Usage\r#\r\rtype SpacerObject\r#\r\rtype SpacerObject interface { \tExpandVertical() bool \tExpandHorizontal() bool } SpacerObject is any object that can be used to space out child objects\n"},{"id":210,"href":"/docs/api/driver/mobile/","title":"mobile","section":"driver","content":"mobile\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/mobile\u0026#34; Package mobile provides mobile specific driver functionality.\nUsage\r#\r\rtypes\r#\r\r \rDevice \rKeyboardType \rKeyboardable \rTouchEvent \rTouchable  "},{"id":211,"href":"/docs/api/driver/mobile/device/","title":"mobile.Device","section":"mobile","content":"mobile.Device\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/mobile\u0026#34; Usage\r#\r\rtype Device\r#\r\rtype Device interface { \t// Request that the mobile device show the touch screen keyboard (standard layout) \tShowVirtualKeyboard() \t// Request that the mobile device show the touch screen keyboard (custom layout) \tShowVirtualKeyboardType(KeyboardType) \t// Request that the mobile device dismiss the touch screen keyboard \tHideVirtualKeyboard() } Device describes functionality only available on mobile\n"},{"id":212,"href":"/docs/api/driver/mobile/keyboardable/","title":"mobile.Keyboardable","section":"mobile","content":"mobile.Keyboardable\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/mobile\u0026#34; Usage\r#\r\rtype Keyboardable\r#\r\rtype Keyboardable interface { \tfyne.Focusable  \tKeyboard() KeyboardType } Keyboardable describes any CanvasObject that needs a keyboard\n"},{"id":213,"href":"/docs/api/driver/mobile/keyboardtype/","title":"mobile.KeyboardType","section":"mobile","content":"mobile.KeyboardType\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/mobile\u0026#34; Usage\r#\r\rtype KeyboardType\r#\r\rtype KeyboardType int32 KeyboardType represents a type of virtual keyboard\nconst ( \t// DefaultKeyboard is the keyboard with default input style and \u0026#34;return\u0026#34; return key \tDefaultKeyboard KeyboardType = iota \t// SingleLineKeyboard is the keyboard with default input style and \u0026#34;Done\u0026#34; return key \tSingleLineKeyboard \t// NumberKeyboard is the keyboard with number input style and \u0026#34;Done\u0026#34; return key \tNumberKeyboard \t// PasswordKeyboard is used to ensure that text is not leaked to 3rd party keyboard providers \tPasswordKeyboard ) "},{"id":214,"href":"/docs/api/driver/mobile/touchable/","title":"mobile.Touchable","section":"mobile","content":"mobile.Touchable\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/mobile\u0026#34; Usage\r#\r\rtype Touchable\r#\r\rtype Touchable interface { \tTouchDown(*TouchEvent) \tTouchUp(*TouchEvent) \tTouchCancel(*TouchEvent) } Touchable represents mobile touch events that can be sent to CanvasObjects\n"},{"id":215,"href":"/docs/api/driver/mobile/touchevent/","title":"mobile.TouchEvent","section":"mobile","content":"mobile.TouchEvent\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/mobile\u0026#34; Usage\r#\r\rtype TouchEvent\r#\r\rtype TouchEvent struct { \tfyne.PointEvent } TouchEvent contains data relating to mobile touch events\n"},{"id":216,"href":"/docs/api/storage/repository/copyablerepository/","title":"repository.CopyableRepository\"","section":"repository\"","content":"repository.CopyableRepository\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage/repository\u0026#34; Usage\r#\r\rtype CopyableRepository\r#\r\rtype CopyableRepository interface { \tRepository  \t// Copy will be used to implement calls to storage.Copy() for the \t// registered scheme of this repository. \t// \t// A generic implementation is provided by GenericCopy(). \t// \t// NOTE: the first parameter is the source, the second is the \t// destination. \t// \t// NOTE: if storage.Copy() is given two URIs of different schemes, it \t// is possible that only the source URI will be of the type this \t// repository is registered to handle. In such cases, implementations \t// are suggested to fail-over to GenericCopy(). \t// \t// Since: 2.0 \tCopy(fyne.URI, fyne.URI) error } CopyableRepository is an extension of the Repository interface which also supports copying referenced resources from one URI to another.\nSince: \r2.0\r"},{"id":217,"href":"/docs/api/storage/repository/customurirepository/","title":"repository.CustomURIRepository\"","section":"repository\"","content":"repository.CustomURIRepository\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage/repository\u0026#34; Usage\r#\r\rtype CustomURIRepository\r#\r\rtype CustomURIRepository interface { \tRepository  \t// ParseURI will be used to implement calls to storage.ParseURI() \t// for the registered scheme of this repository. \tParseURI(string) (fyne.URI, error) } CustomURIRepository is an extension of the repository interface which allows the behavior of storage.ParseURI to be overridden. This is only needed if you wish to generate custom URI types, rather than using Fyne\u0026rsquo;s URI implementation and net/url based parsing.\nNOTE: even for URIs with non-RFC3986-compliant encoding, the URI MUST begin with \u0026lsquo;scheme:\u0026rsquo;, or storage.ParseURI() will not be able to determine which storage repository to delegate to for parsing.\nSince: \r2.0\r"},{"id":218,"href":"/docs/api/storage/repository/hierarchicalrepository/","title":"repository.HierarchicalRepository\"","section":"repository\"","content":"repository.HierarchicalRepository\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage/repository\u0026#34; Usage\r#\r\rtype HierarchicalRepository\r#\r\rtype HierarchicalRepository interface { \tRepository  \t// Parent will be used to implement calls to storage.Parent() for the \t// registered scheme of this repository. \t// \t// A generic implementation is provided in GenericParent(), which \t// is based on the RFC3986 definition of a URI parent. \t// \t// Since: 2.0 \tParent(fyne.URI) (fyne.URI, error)  \t// Child will be used to implement calls to storage.Child() for \t// the registered scheme of this repository. \t// \t// A generic implementation is provided in GenericParent(), which \t// is based on RFC3986. \t// \t// Since: 2.0 \tChild(fyne.URI, string) (fyne.URI, error) } HierarchicalRepository is an extension of the Repository interface which also supports determining the parent and child items of a URI.\nSince: \r2.0\r"},{"id":219,"href":"/docs/api/storage/repository/listablerepository/","title":"repository.ListableRepository\"","section":"repository\"","content":"repository.ListableRepository\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage/repository\u0026#34; Usage\r#\r\rtype ListableRepository\r#\r\rtype ListableRepository interface { \tRepository  \t// CanList will be used to implement calls to storage.Listable() for \t// the registered scheme of this repository. \t// \t// Since: 2.0 \tCanList(u fyne.URI) (bool, error)  \t// List will be used to implement calls to storage.List() for the \t// registered scheme of this repository. \t// \t// Since: 2.0 \tList(u fyne.URI) ([]fyne.URI, error)  \t// CreateListable will be used to implement calls to \t// storage.CreateListable() for the registered scheme of this \t// repository. \t// \t// Since: 2.0 \tCreateListable(u fyne.URI) error } ListableRepository is an extension of the Repository interface which also supports obtaining directory listings (generally analogous to a directory listing) for URIs of the scheme it is registered to.\nSince: \r2.0\r"},{"id":220,"href":"/docs/api/storage/repository/movablerepository/","title":"repository.MovableRepository\"","section":"repository\"","content":"repository.MovableRepository\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage/repository\u0026#34; Usage\r#\r\rtype MovableRepository\r#\r\rtype MovableRepository interface { \tRepository  \t// Move will be used to implement calls to storage.Move() for the \t// registered scheme of this repository. \t// \t// A generic implementation is provided by GenericMove(). \t// \t// NOTE: the first parameter is the source, the second is the \t// destination. \t// \t// NOTE: if storage.Move() is given two URIs of different schemes, it \t// is possible that only the source URI will be of the type this \t// repository is registered to handle. In such cases, implementations \t// are suggested to fail-over to GenericMove(). \t// \t// Since: 2.0 \tMove(fyne.URI, fyne.URI) error } MovableRepository is an extension of the Repository interface which also supports moving referenced resources from one URI to another.\nNote: both Moveable and Movable are correct spellings, but Movable is newer and more accepted. Source: https://grammarist.com/spelling/movable-moveable/\nSince: \r2.0\r"},{"id":221,"href":"/docs/api/storage/repository/repository/","title":"repository.Repository\"","section":"repository\"","content":"repository.Repository\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage/repository\u0026#34; Usage\r#\r\rtype Repository\r#\r\rtype Repository interface {  \t// Exists will be used to implement calls to storage.Exists() for the \t// registered scheme of this repository. \t// \t// Since: 2.0 \tExists(u fyne.URI) (bool, error)  \t// Reader will be used to implement calls to storage.Reader() \t// for the registered scheme of this repository. \t// \t// Since: 2.0 \tReader(u fyne.URI) (fyne.URIReadCloser, error)  \t// CanRead will be used to implement calls to storage.CanRead() for the \t// registered scheme of this repository. \t// \t// Since: 2.0 \tCanRead(u fyne.URI) (bool, error)  \t// Destroy is called when the repository is un-registered from a given \t// URI scheme. \t// \t// The string parameter will be the URI scheme that the repository was \t// registered for. This may be useful for repositories that need to \t// handle more than one URI scheme internally. \t// \t// Since: 2.0 \tDestroy(string) } Repository represents a storage repository, which is a set of methods which implement specific functions on a URI. Repositories are registered to handle specific URI schemes, and the higher-level functions that operate on URIs internally look up an appropriate method from the relevant Repository.\nThe repository interface includes only methods which must be implemented at a minimum. Without implementing all of the methods in this interface, a URI would not be usable in a useful way. Additional functionality can be exposed by using interfaces which extend Repository.\nRepositories are registered to handle a specific URI scheme (or schemes) using the Register() method. When a higher-level URI function such as storage.Copy() is called, the storage package will internally look up the repository associated with the scheme of the URI, then it will use a type assertion to check if the repository implements CopyableRepository. If so, the Copy() function will be run from the repository, otherwise storage.Copy() will return NotSupportedError. This works similarly for all other methods in repository-related interfaces.\nNote that a repository can be registered for multiple URI schemes. In such cases, the repository must internally select and implement the correct behavior for each URI scheme.\nA repository will only ever need to handle URIs with schemes for which it was registered, with the exception that functions with more than 1 operand such as Copy() and Move(), in which cases only the first operand is guaranteed to match a scheme for which the repository is registered.\nNOTE: most developers who use Fyne should not generally attempt to call repository methods directly. You should use the methods in the storage package, which will automatically detect the scheme of a URI and call into the appropriate repository.\nSince: \r2.0\rfunc ForScheme\r#\r\rfunc ForScheme(scheme string) (Repository, error) ForScheme returns the Repository instance which is registered to handle URIs of the given scheme.\nNOTE: this function is intended to be used specifically by the storage package. It generally should not be used outside of the fyne package - instead you should use the methods in the storage package.\nSince: \r2.0\rfunc ForURI\r#\r\rfunc ForURI(u fyne.URI) (Repository, error) ForURI returns the Repository instance which is registered to handle URIs of the given scheme. This is a helper method that calls ForScheme() on the scheme of the given URI.\nNOTE: this function is intended to be used specifically by the storage package. It generally should not be used outside of the fyne package - instead you should use the methods in the storage package.\nSince: \r2.0\r"},{"id":222,"href":"/docs/api/storage/repository/writablerepository/","title":"repository.WritableRepository\"","section":"repository\"","content":"repository.WritableRepository\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage/repository\u0026#34; Usage\r#\r\rtype WritableRepository\r#\r\rtype WritableRepository interface { \tRepository  \t// Writer will be used to implement calls to storage.WriterTo() for \t// the registered scheme of this repository. \t// \t// Since: 2.0 \tWriter(u fyne.URI) (fyne.URIWriteCloser, error)  \t// CanWrite will be used to implement calls to storage.CanWrite() for \t// the registered scheme of this repository. \t// \t// Since: 2.0 \tCanWrite(u fyne.URI) (bool, error)  \t// Delete will be used to implement calls to storage.Delete() for the \t// registered scheme of this repository. \t// \t// Since: 2.0 \tDelete(u fyne.URI) error } WritableRepository is an extension of the Repository interface which also supports obtaining a writer for URIs of the scheme it is registered to.\nSince: \r2.0\r"},{"id":223,"href":"/docs/api/storage/repository/","title":"repository\"","section":"storage","content":"repository\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage/repository\u0026#34; Usage\r#\r\rvar ( \t// ErrOperationNotSupported may be thrown by certain functions in the storage \t// or repository packages which operate on URIs if an operation is attempted \t// that is not supported for the scheme relevant to the URI, normally because \t// the underlying repository has either not implemented the relevant function, \t// or has explicitly returned this error. \t// \t// Since: 2.0 \tErrOperationNotSupported = errors.New(\u0026#34;operation not supported for this URI\u0026#34;)  \t// ErrURIRoot should be thrown by fyne.URI implementations when the caller \t// attempts to take the parent of the root. This way, downstream code that \t// wants to programmatically walk up a URIs parent\u0026#39;s will know when to stop \t// iterating. \t// \t// Since: 2.0 \tErrURIRoot = errors.New(\u0026#34;cannot take the parent of the root element in a URI\u0026#34;) ) func GenericChild\r#\r\rfunc GenericChild(u fyne.URI, component string) (fyne.URI, error) GenericChild can be used as a common-case implementation of HierarchicalRepository.Child(). It will create a child URI by separating the URI into it\u0026rsquo;s component parts as described in IETF RFC 3986, then appending \u0026ldquo;/\u0026rdquo; + component to the path, then concatenating the result and parsing it as a new URI.\nNOTE: this function should not be called except by an implementation of the Repository interface - using this for unknown URIs may break.\nSince: \r2.0\rfunc GenericCopy\r#\r\rfunc GenericCopy(source fyne.URI, destination fyne.URI) error GenericCopy can be used a common-case implementation of CopyableRepository.Copy(). It will perform the copy by obtaining a reader for the source URI, a writer for the destination URI, then writing the contents of the source to the destination.\nFor obvious reasons, the destination URI must have a registered WritableRepository.\nNOTE: this function should not be called except by an implementation of the Repository interface - using this for unknown URIs may break.\nSince: \r2.0\rfunc GenericMove\r#\r\rfunc GenericMove(source fyne.URI, destination fyne.URI) error GenericMove can be used a common-case implementation of MovableRepository.Move(). It will perform the move by obtaining a reader for the source URI, a writer for the destination URI, then writing the contents of the source to the destination. Following this, the source will be deleted using WritableRepository.Delete.\nFor obvious reasons, the source and destination URIs must both be writable.\nNOTE: this function should not be called except by an implementation of the Repository interface - using this for unknown URIs may break.\nSince: \r2.0\rfunc GenericParent\r#\r\rfunc GenericParent(u fyne.URI) (fyne.URI, error) GenericParent can be used as a common-case implementation of HierarchicalRepository.Parent(). It will create a parent URI based on IETF RFC3986.\nIn short, the URI is separated into it\u0026rsquo;s component parts, the path component is split along instances of \u0026lsquo;/\u0026rsquo;, and the trailing element is removed. The result is concatenated and parsed as a new URI.\nIf the URI path is empty or \u0026lsquo;/\u0026rsquo;, then a nil URI is returned, along with ErrURIRoot.\nNOTE: this function should not be called except by an implementation of the Repository interface - using this for unknown URIs may break.\nSince: \r2.0\rfunc NewFileURI\r#\r\rfunc NewFileURI(path string) fyne.URI NewFileURI implements the back-end logic to storage.NewFileURI, which you should use instead. This is only here because other functions in repository need to call it, and it prevents a circular import.\nSince: \r2.0\rfunc ParseURI\r#\r\rfunc ParseURI(s string) (fyne.URI, error) ParseURI implements the back-end logic for storage.ParseURI, which you should use instead. This is only here because other functions in repository need to call it, and it prevents a circular import.\nSince: \r2.0\rfunc Register\r#\r\rfunc Register(scheme string, repository Repository) Register registers a storage repository so that operations on URIs of the registered scheme will use methods implemented by the relevant repository implementation.\nSince: \r2.0\rtypes\r#\r\r \rCopyableRepository \rCustomURIRepository \rHierarchicalRepository \rListableRepository \rMovableRepository \rRepository \rWritableRepository  "},{"id":224,"href":"/docs/api/driver/software/","title":"software","section":"driver","content":"software\r#\r\r import \u0026#34;fyne.io/fyne/v2/driver/software\u0026#34; Usage\r#\r\rfunc NewCanvas\r#\r\rfunc NewCanvas() test.WindowlessCanvas NewCanvas creates a new canvas in memory that can render without hardware support\nfunc Render\r#\r\rfunc Render(obj fyne.CanvasObject, t fyne.Theme) image.Image Render takes a canvas object and renders it to a regular Go image using the provided Theme. The returned image will be set to the object\u0026rsquo;s minimum size. Use the theme.LightTheme() or theme.DarkTheme() to access the builtin themes.\nfunc RenderCanvas\r#\r\rfunc RenderCanvas(c fyne.Canvas, t fyne.Theme) image.Image RenderCanvas takes a canvas and renders it to a regular Go image using the provided Theme. This is the same as setting the application theme and then calling Canvas.Capture().\ntypes\r#\r\r"},{"id":225,"href":"/docs/api/storage/","title":"storage","section":"Api document","content":"storage\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage\u0026#34; Package storage provides storage access and management functionality.\nUsage\r#\r\rvar URIRootError = repository.ErrURIRoot URIRootError is a wrapper for repository.URIRootError\nDeprecated - use repository.ErrURIRoot instead\nfunc CanList\r#\r\rfunc CanList(u fyne.URI) (bool, error) CanList will determine if the URI is listable or not.\nThis method may fail in several ways:\n Different permissions or credentials are required to check if the   URI supports listing.  This URI scheme could represent some resources that can be listed,   but this specific URI is not one of them (e.g. a file on a  filesystem, as opposed to a directory).  Checking for listability depended on a lower level operation   such as network or filesystem access that has failed in some way.  If the scheme of the given URI does not have a registered   ListableRepository instance, then this method will fail with a  repository.ErrOperationNotSupported. CanList is backed by the repository system - this function calls into a scheme-specific implementation from a registered repository.\nSince: \r2.0\rfunc CanRead\r#\r\rfunc CanRead(u fyne.URI) (bool, error) CanRead determines if a given URI could be written to using the Reader() method. It is preferred to check if a URI is readable using this method before calling Reader(), because the underlying operations required to attempt to read and then report an error may be slower than the operations needed to test if a URI is readable. Keep in mind however that even if CanRead returns true, you must still do appropriate error handling for Reader(), as the underlying filesystem may have changed since you called CanRead.\nThe non-existence of a resource should not be treated as an error. In other words, a Repository implementation which for some URI u returns false, nil for Exists(u), CanRead(u) should also return false, nil.\nCanRead is backed by the repository system - this function calls into a scheme-specific implementation from a registered repository.\nSince: \r2.0\rfunc CanWrite\r#\r\rfunc CanWrite(u fyne.URI) (bool, error) CanWrite is backed by the repository system - this function calls into a scheme-specific implementation from a registered repository.\nSince: \r2.0\rfunc Child\r#\r\rfunc Child(u fyne.URI, component string) (fyne.URI, error) Child returns a URI referencing a resource nested hierarchically below the given URI, identified by a string. For example, the child with the string component \u0026lsquo;quux\u0026rsquo; of \u0026lsquo;file://foo/bar\u0026rsquo; is \u0026lsquo;file://foo/bar/quux\u0026rsquo;.\nThis can fail in several ways:\n If the URI refers to a resource which does not exist in a hierarchical   context (e.g. the URI references something which does not have a  semantically meaningful \u0026#34;child\u0026#34;), the Child() implementation may return an  error.  If generating a reference to a child of the referenced resource requires   interfacing with some external system, failures may propagate through the  Child() implementation. It is expected that this case would occur very  rarely if ever.  If the scheme of the given URI does not have a registered   HierarchicalRepository instance, then this method will fail with a  repository.ErrOperationNotSupported. NOTE: since v2.0.0, Child() is backed by the repository system - this function is a helper which calls into an appropriate repository instance for the scheme of the URI it is given.\nSince: \r1.4\rfunc Copy\r#\r\rfunc Copy(source fyne.URI, destination fyne.URI) error Copy given two URIs, \u0026lsquo;src\u0026rsquo;, and \u0026lsquo;dest\u0026rsquo; both of the same scheme, will copy one to the other. If the source and destination are of different schemes, then the Copy implementation for the storage repository registered to the scheme of the source will be used. Implementations are recommended to use repository.GenericCopy() as a fail-over in the case that they do not understand how to operate on the scheme of the destination URI. However, the behavior of calling Copy() on URIs of non-matching schemes is ultimately defined by the storage repository registered to the scheme of the source URI.\nThis method may fail in several ways:\n Different permissions or credentials are required to perform the   copy operation.  This URI scheme could represent some resources that can be copied,   but either the source, destination, or both are not resources  that support copying.  Performing the copy operation depended on a lower level operation   such as network or filesystem access that has failed in some way.  If the scheme of the given URI does not have a registered   CopyableRepository instance, then this method will fail with a  repository.ErrOperationNotSupported. Copy is backed by the repository system - this function calls into a scheme-specific implementation from a registered repository.\nSince: \r2.0\rfunc CreateListable\r#\r\rfunc CreateListable(u fyne.URI) error CreateListable creates a new listable resource referenced by the given URI. CreateListable will error if the URI already references an extant resource. This method is used for storage repositories where listable resources are of a different underlying type than other resources - for example, in a typical filesystem (\u0026lsquo;file://\u0026rsquo;), CreateListable() corresponds to directory creation, and Writer() implies file creation for non-extant operands.\nFor storage repositories where listable and non-listable resources are the of the same underlying type, CreateListable should be equivalent to calling Writer(), writing zero bytes, and then closing the `URIWriteCloser - in filesystem terms, the same as calling \u0026rsquo;touch;\u0026rsquo;.\nStorage repositories which support listing, but not creation of listable objects may return repository.ErrOperationNotSupported.\nCreateListable should generally fail if the parent of it\u0026rsquo;s operand does not exist, however this can vary by the implementation details of the specific storage repository. In filesystem terms, this function is \u0026ldquo;mkdir\u0026rdquo; not \u0026ldquo;mkdir -p\u0026rdquo;.\nThis method may fail in several ways:\n Different permissions or credentials are required to create the requested   resource.  Creating the resource depended on a lower level operation such as network   or filesystem access that has failed in some way.  If the scheme of the given URI does not have a registered   ListableRepository instance, then this method will fail with a  repository.ErrOperationNotSupported. CreateListable is backed by the repository system - this function either calls into a scheme-specific implementation from a registered repository, or fails with a URIOperationNotSupported error.\nSince: \r2.0\rfunc Delete\r#\r\rfunc Delete(u fyne.URI) error Delete destroys, deletes, or otherwise removes the resource referenced by the URI.\nThis can fail in several ways:\n If removing the resource requires interfacing with some external system,   failures may propagate through Destroy(). For example, deleting a file may  fail with a permissions error.  If the referenced resource does not exist, attempting to destroy it should   throw an error.  If the scheme of the given URI does not have a registered   WritableRepository instance, then this method will fail with a  repository.ErrOperationNotSupported. Delete is backed by the repository system - this function calls into a scheme-specific implementation from a registered repository.\nSince: \r2.0\rfunc Exists\r#\r\rfunc Exists(u fyne.URI) (bool, error) Exists determines if the resource referenced by the URI exists.\nThis can fail in several ways:\n If checking the existence of a resource requires interfacing with some   external system, then failures may propagate through Exists(). For  example, checking the existence of a resource requires reading a directory  may result in a permissions error. It is understood that a non-nil error value signals that the existence or non-existence of the resource cannot be determined and is undefined.\nNOTE: since v2.0.0, Exists is backed by the repository system - this function calls into a scheme-specific implementation from a registered repository.\nExists may call into either a generic implementation, or into a scheme-specific implementation depending on which storage repositories have been registered.\nSince: \r1.4\rfunc List\r#\r\rfunc List(u fyne.URI) ([]fyne.URI, error) List returns a list of URIs that reference resources which are nested below the resource referenced by the argument. For example, listing a directory on a filesystem should return a list of files and directories it contains.\nThis method may fail in several ways:\n Different permissions or credentials are required to obtain a   listing for the given URI.  This URI scheme could represent some resources that can be listed,   but this specific URI is not one of them (e.g. a file on a  filesystem, as opposed to a directory). This can be tested in advance  using the Listable() function.  Obtaining the listing depended on a lower level operation such as   network or filesystem access that has failed in some way.  If the scheme of the given URI does not have a registered   ListableRepository instance, then this method will fail with a  repository.ErrOperationNotSupported. List is backed by the repository system - this function either calls into a scheme-specific implementation from a registered repository, or fails with a URIOperationNotSupported error.\nSince: \r2.0\rfunc ListerForURI\r#\r\rfunc ListerForURI(uri fyne.URI) (fyne.ListableURI, error) ListerForURI will attempt to use the application\u0026rsquo;s driver to convert a standard URI into a listable URI.\nSince: \r1.4\rfunc LoadResourceFromURI\r#\r\rfunc LoadResourceFromURI(u fyne.URI) (fyne.Resource, error) LoadResourceFromURI creates a new StaticResource in memory using the contents of the specified URI. The URI will be opened using the current driver, so valid schemas will vary from platform to platform. The file:// schema will always work.\nfunc Move\r#\r\rfunc Move(source fyne.URI, destination fyne.URI) error Move returns a method that given two URIs, \u0026lsquo;src\u0026rsquo; and \u0026lsquo;dest\u0026rsquo; both of the same scheme this will move src to dest. This means the resource referenced by src will be copied into the resource referenced by dest, and the resource referenced by src will no longer exist after the operation is complete.\nIf the source and destination are of different schemes, then the Move implementation for the storage repository registered to the scheme of the source will be used. Implementations are recommended to use repository.GenericMove() as a fail-over in the case that they do not understand how to operate on the scheme of the destination URI. However, the behavior of calling Move() on URIs of non-matching schemes is ultimately defined by the storage repository registered to the scheme of the source URI.\nThis method may fail in several ways:\n Different permissions or credentials are required to perform the   rename operation.  This URI scheme could represent some resources that can be renamed,   but either the source, destination, or both are not resources  that support renaming.  Performing the rename operation depended on a lower level operation   such as network or filesystem access that has failed in some way.  If the scheme of the given URI does not have a registered   MovableRepository instance, then this method will fail with a  repository.ErrOperationNotSupported. Move is backed by the repository system - this function calls into a scheme-specific implementation from a registered repository.\nSince: \r2.0\rfunc NewFileURI\r#\r\rfunc NewFileURI(path string) fyne.URI NewFileURI creates a new URI from the given file path.\nfunc NewURI\r#\r\rfunc NewURI(s string) fyne.URI NewURI creates a new URI from the given string representation. This could be a URI from an external source or one saved from URI.String()\nDeprecated: use ParseURI instead\rfunc OpenFileFromURI\r#\r\rfunc OpenFileFromURI(uri fyne.URI) (fyne.URIReadCloser, error) OpenFileFromURI loads a file read stream from a resource identifier. This is mostly provided so that file references can be saved using their URI and loaded again later.\nDeprecated: this has been replaced by storage.Reader(URI)\rfunc Parent\r#\r\rfunc Parent(u fyne.URI) (fyne.URI, error) Parent returns a URI referencing the parent resource of the resource referenced by the URI. For example, the Parent() of \u0026lsquo;file://foo/bar.baz\u0026rsquo; is \u0026lsquo;file://foo\u0026rsquo;. The URI which is returned will be listable.\nNOTE: it is not a given that Parent() return a parent URI with the same Scheme(), though this will normally be the case.\nThis can fail in several ways:\n If the URI refers to a filesystem root, then the Parent() implementation   must return (nil, URIRootError).  If the URI refers to a resource which does not exist in a hierarchical   context (e.g. the URI references something which does not have a  semantically meaningful \u0026#34;parent\u0026#34;), the Parent() implementation may return  an error.  If determining the parent of the referenced resource requires   interfacing with some external system, failures may propagate  through the Parent() implementation. For example if determining  the parent of a file:// URI requires reading information from  the filesystem, it could fail with a permission error.  If the scheme of the given URI does not have a registered   HierarchicalRepository instance, then this method will fail with a  repository.ErrOperationNotSupported. NOTE: since v2.0.0, Parent() is backed by the repository system - this function is a helper which calls into an appropriate repository instance for the scheme of the URI it is given.\nSince: \r1.4\rfunc ParseURI\r#\r\rfunc ParseURI(s string) (fyne.URI, error) ParseURI creates a new URI instance by parsing a URI string.\nParse URI will parse up to the first \u0026lsquo;:\u0026rsquo; present in the URI string to extract the scheme, and then delegate further parsing to the registered repository for the given scheme. If no repository is registered for that scheme, the URI is parsed on a best-effort basis using net/url.\nAs a special exception, URIs beginning with \u0026lsquo;file:\u0026rsquo; are always parsed using NewFileURI(), which will correctly handle back-slashes appearing in the URI path component on Windows.\nSince: \r2.0\rfunc Reader\r#\r\rfunc Reader(u fyne.URI) (fyne.URIReadCloser, error) Reader returns URIReadCloser set up to read from the resource that the URI references.\nThis method can fail in several ways:\n Different permissions or credentials are required to read the   referenced resource.  This URI scheme could represent some resources that can be read,   but this particular URI references a resources that is not  something that can be read.  Attempting to set up the reader depended on a lower level   operation such as a network or filesystem access that has failed  in some way. Reader is backed by the repository system - this function calls into a scheme-specific implementation from a registered repository.\nSince: \r2.0\rfunc SaveFileToURI\r#\r\rfunc SaveFileToURI(uri fyne.URI) (fyne.URIWriteCloser, error) SaveFileToURI loads a file write stream to a resource identifier. This is mostly provided so that file references can be saved using their URI and written to again later.\nDeprecated: this has been replaced by storage.Writer(URI)\rfunc Writer\r#\r\rfunc Writer(u fyne.URI) (fyne.URIWriteCloser, error) Writer returns URIWriteCloser set up to write to the resource that the URI references.\nWriting to a non-extant resource should create that resource if possible (and if not possible, this should be reflected in the return of CanWrite()). Writing to an extant resource should overwrite it in-place. At present, this API does not provide a mechanism for appending to an already-extant resource, except for reading it in and writing all the data back out.\nThis method can fail in several ways:\n Different permissions or credentials are required to write to the   referenced resource.  This URI scheme could represent some resources that can be   written, but this particular URI references a resources that is  not something that can be written.  Attempting to set up the writer depended on a lower level   operation such as a network or filesystem access that has failed  in some way.  If the scheme of the given URI does not have a registered   WritableRepository instance, then this method will fail with a  repository.ErrOperationNotSupported. Writer is backed by the repository system - this function calls into a scheme-specific implementation from a registered repository.\nSince: \r2.0\rtypes\r#\r\r \rExtensionFileFilter \rFileFilter \rMimeTypeFileFilter  "},{"id":226,"href":"/docs/api/storage/extensionfilefilter/","title":"storage.ExtensionFileFilter","section":"storage","content":"storage.ExtensionFileFilter\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage\u0026#34; Usage\r#\r\rtype ExtensionFileFilter\r#\r\rtype ExtensionFileFilter struct { \tExtensions []string } ExtensionFileFilter represents a file filter based on the the ending of file names, for example \u0026ldquo;.txt\u0026rdquo; and \u0026ldquo;.png\u0026rdquo;.\nfunc (*ExtensionFileFilter) Matches\r#\r\rfunc (e *ExtensionFileFilter) Matches(uri fyne.URI) bool Matches returns true if a file URI has one of the filtered extensions.\n"},{"id":227,"href":"/docs/api/storage/filefilter/","title":"storage.FileFilter","section":"storage","content":"storage.FileFilter\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage\u0026#34; Usage\r#\r\rtype FileFilter\r#\r\rtype FileFilter interface { \tMatches(fyne.URI) bool } FileFilter is an interface that can be implemented to provide a filter to a file dialog.\nfunc NewExtensionFileFilter\r#\r\rfunc NewExtensionFileFilter(extensions []string) FileFilter NewExtensionFileFilter takes a string slice of extensions with a leading . and creates a filter for the file dialog. Example: .jpg, .mp3, .txt, .sh\nfunc NewMimeTypeFileFilter\r#\r\rfunc NewMimeTypeFileFilter(mimeTypes []string) FileFilter NewMimeTypeFileFilter takes a string slice of mimetypes, including globs, and creates a filter for the file dialog. Example: image/, audio/mp3, text/plain, application/\n"},{"id":228,"href":"/docs/api/storage/mimetypefilefilter/","title":"storage.MimeTypeFileFilter","section":"storage","content":"storage.MimeTypeFileFilter\r#\r\r import \u0026#34;fyne.io/fyne/v2/storage\u0026#34; Usage\r#\r\rtype MimeTypeFileFilter\r#\r\rtype MimeTypeFileFilter struct { \tMimeTypes []string } MimeTypeFileFilter represents a file filter based on the files mime type, for example \u0026ldquo;image/*\u0026rdquo;, \u0026ldquo;audio/mp3\u0026rdquo;.\nfunc (*MimeTypeFileFilter) Matches\r#\r\rfunc (mt *MimeTypeFileFilter) Matches(uri fyne.URI) bool Matches returns true if a file URI has one of the filtered mimetypes.\n"},{"id":229,"href":"/docs/api/test/","title":"test","section":"Api document","content":"test\r#\r\r import \u0026#34;fyne.io/fyne/v2/test\u0026#34; Package test provides utility drivers for running UI tests without rendering\nUsage\r#\r\rfunc ApplyTheme\r#\r\rfunc ApplyTheme(t *testing.T, theme fyne.Theme) ApplyTheme sets the given theme and waits for it to be applied to the current app.\nfunc AssertCanvasTappableAt\r#\r\rfunc AssertCanvasTappableAt(t *testing.T, c fyne.Canvas, pos fyne.Position) bool AssertCanvasTappableAt asserts that the canvas is tappable at the given position.\nfunc AssertImageMatches\r#\r\rfunc AssertImageMatches(t *testing.T, masterFilename string, img image.Image, msgAndArgs ...interface{}) bool AssertImageMatches asserts that the given image is the same as the one stored in the master file. The master filename is relative to the testdata directory which is relative to the test. The test t fails if the given image is not equal to the loaded master image. In this case the given image is written into a file in testdata/failed/\u0026lt;masterFilename\u0026gt; (relative to the test). This path is also reported, thus the file can be used as new master.\nfunc AssertNotificationSent\r#\r\rfunc AssertNotificationSent(t *testing.T, n *fyne.Notification, f func()) AssertNotificationSent allows an app developer to assert that a notification was sent. After the content of f has executed this utility will check that the specified notification was sent.\nfunc AssertRendersToMarkup\r#\r\rfunc AssertRendersToMarkup(t *testing.T, masterFilename string, c fyne.Canvas, msgAndArgs ...interface{}) bool AssertRendersToMarkup asserts that the given canvas renders the same markup as the one stored in the master file. The master filename is relative to the testdata directory which is relative to the test. The test t fails if the rendered markup is not equal to the loaded master markup. In this case the rendered markup is written into a file in testdata/failed/\u0026lt;masterFilename\u0026gt; (relative to the test). This path is also reported, thus the file can be used as new master.\nBe aware, that the indentation has to use tab characters (\u0026rsquo;\\t\u0026rsquo;) instead of spaces. Every element starts on a new line indented one more than its parent. Closing elements stand on their own line, too, using the same indentation as the opening element. The only exception to this are text elements which do not contain line breaks unless the text includes them.\nSince: \r2.0\rfunc Canvas\r#\r\rfunc Canvas() fyne.Canvas Canvas returns a reusable in-memory canvas used for testing\nfunc DoubleTap\r#\r\rfunc DoubleTap(obj fyne.DoubleTappable) DoubleTap simulates a double left mouse click on the specified object.\nfunc Drag\r#\r\rfunc Drag(c fyne.Canvas, pos fyne.Position, deltaX, deltaY float32) Drag drags at an absolute position on the canvas. deltaX/Y is the dragging distance: \u0026lt;0 for dragging up/left, \u0026gt;0 for dragging down/right.\nfunc FocusNext\r#\r\rfunc FocusNext(c fyne.Canvas) FocusNext focuses the next focusable on the canvas.\nfunc FocusPrevious\r#\r\rfunc FocusPrevious(c fyne.Canvas) FocusPrevious focuses the previous focusable on the canvas.\nfunc LaidOutObjects\r#\r\rfunc LaidOutObjects(o fyne.CanvasObject) (objects []fyne.CanvasObject) LaidOutObjects returns all fyne.CanvasObject starting at the given fyne.CanvasObject which is laid out previously.\nfunc MoveMouse\r#\r\rfunc MoveMouse(c fyne.Canvas, pos fyne.Position) MoveMouse simulates a mouse movement to the given position.\nfunc NewApp\r#\r\rfunc NewApp() fyne.App NewApp returns a new dummy app used for testing. It loads a test driver which creates a virtual window in memory for testing.\nfunc NewClipboard\r#\r\rfunc NewClipboard() fyne.Clipboard NewClipboard returns a single use in-memory clipboard used for testing\nfunc NewDriver\r#\r\rfunc NewDriver() fyne.Driver NewDriver sets up and registers a new dummy driver for test purpose\nfunc NewDriverWithPainter\r#\r\rfunc NewDriverWithPainter(painter SoftwarePainter) fyne.Driver NewDriverWithPainter creates a new dummy driver that will pass the given painter to all canvases created\nfunc NewTheme\r#\r\rfunc NewTheme() fyne.Theme NewTheme returns a new testTheme.\nfunc NewWindow\r#\r\rfunc NewWindow(content fyne.CanvasObject) fyne.Window NewWindow creates and registers a new window for test purposes\nfunc Scroll\r#\r\rfunc Scroll(c fyne.Canvas, pos fyne.Position, deltaX, deltaY float32) Scroll scrolls at an absolute position on the canvas. deltaX/Y is the scrolling distance: \u0026lt;0 for scrolling up/left, \u0026gt;0 for scrolling down/right.\nfunc Tap\r#\r\rfunc Tap(obj fyne.Tappable) Tap simulates a left mouse click on the specified object.\nfunc TapAt\r#\r\rfunc TapAt(obj fyne.Tappable, pos fyne.Position) TapAt simulates a left mouse click on the passed object at a specified place within it.\nfunc TapCanvas\r#\r\rfunc TapCanvas(c fyne.Canvas, pos fyne.Position) TapCanvas taps at an absolute position on the canvas.\nfunc TapSecondary\r#\r\rfunc TapSecondary(obj fyne.SecondaryTappable) TapSecondary simulates a right mouse click on the specified object.\nfunc TapSecondaryAt\r#\r\rfunc TapSecondaryAt(obj fyne.SecondaryTappable, pos fyne.Position) TapSecondaryAt simulates a right mouse click on the passed object at a specified place within it.\nfunc Theme\r#\r\rfunc Theme() fyne.Theme Theme returns a theme useful for image based tests.\nfunc Type\r#\r\rfunc Type(obj fyne.Focusable, chars string) Type performs a series of key events to simulate typing of a value into the specified object. The focusable object will be focused before typing begins. The chars parameter will be input one rune at a time to the focused object.\nfunc TypeOnCanvas\r#\r\rfunc TypeOnCanvas(c fyne.Canvas, chars string) TypeOnCanvas is like the Type function but it passes the key events to the canvas object rather than a focusable widget.\nfunc WidgetRenderer\r#\r\rfunc WidgetRenderer(wid fyne.Widget) fyne.WidgetRenderer WidgetRenderer allows test scripts to gain access to the current renderer for a widget. This can be used for verifying correctness of rendered components for a widget in unit tests.\nfunc WithTestTheme\r#\r\rfunc WithTestTheme(t *testing.T, f func()) WithTestTheme runs a function with the testTheme temporarily set.\ntypes\r#\r\r \rSoftwarePainter \rWindowlessCanvas  "},{"id":230,"href":"/docs/api/test/softwarepainter/","title":"test.SoftwarePainter","section":"test","content":"test.SoftwarePainter\r#\r\r import \u0026#34;fyne.io/fyne/v2/test\u0026#34; Usage\r#\r\rtype SoftwarePainter\r#\r\rtype SoftwarePainter interface { \tPaint(fyne.Canvas) image.Image } SoftwarePainter describes a simple type that can render canvases\n"},{"id":231,"href":"/docs/api/test/windowlesscanvas/","title":"test.WindowlessCanvas","section":"test","content":"test.WindowlessCanvas\r#\r\r import \u0026#34;fyne.io/fyne/v2/test\u0026#34; Usage\r#\r\rtype WindowlessCanvas\r#\r\rtype WindowlessCanvas interface { \tfyne.Canvas  \tPadded() bool \tResize(fyne.Size) \tSetPadded(bool) \tSetScale(float32) } WindowlessCanvas provides functionality for a canvas to operate without a window\nfunc NewCanvas\r#\r\rfunc NewCanvas() WindowlessCanvas NewCanvas returns a single use in-memory canvas used for testing\nfunc NewCanvasWithPainter\r#\r\rfunc NewCanvasWithPainter(painter SoftwarePainter) WindowlessCanvas NewCanvasWithPainter allows creation of an in-memory canvas with a specific painter. The painter will be used to render in the Capture() call.\n"},{"id":232,"href":"/docs/api/theme/","title":"theme","section":"Api document","content":"theme\r#\r\r import \u0026#34;fyne.io/fyne/v2/theme\u0026#34; Package theme defines how a Fyne app should look when rendered\nUsage\r#\r\rconst ( \t// IconNameCancel is the name of theme lookup for cancel icon. \t// \t// Since: 2.0 \tIconNameCancel fyne.ThemeIconName = \u0026#34;cancel\u0026#34;  \t// IconNameConfirm is the name of theme lookup for confirm icon. \t// \t// Since: 2.0 \tIconNameConfirm fyne.ThemeIconName = \u0026#34;confirm\u0026#34;  \t// IconNameDelete is the name of theme lookup for delete icon. \t// \t// Since: 2.0 \tIconNameDelete fyne.ThemeIconName = \u0026#34;delete\u0026#34;  \t// IconNameSearch is the name of theme lookup for search icon. \t// \t// Since: 2.0 \tIconNameSearch fyne.ThemeIconName = \u0026#34;search\u0026#34;  \t// IconNameSearchReplace is the name of theme lookup for search and replace icon. \t// \t// Since: 2.0 \tIconNameSearchReplace fyne.ThemeIconName = \u0026#34;searchReplace\u0026#34;  \t// IconNameMenu is the name of theme lookup for menu icon. \t// \t// Since: 2.0 \tIconNameMenu fyne.ThemeIconName = \u0026#34;menu\u0026#34;  \t// IconNameMenuExpand is the name of theme lookup for menu expansion icon. \t// \t// Since: 2.0 \tIconNameMenuExpand fyne.ThemeIconName = \u0026#34;menuExpand\u0026#34;  \t// IconNameCheckButtonChecked is the name of theme lookup for checked check button icon. \t// \t// Since: 2.0 \tIconNameCheckButtonChecked fyne.ThemeIconName = \u0026#34;checked\u0026#34;  \t// IconNameCheckButton is the name of theme lookup for unchecked check button icon. \t// \t// Since: 2.0 \tIconNameCheckButton fyne.ThemeIconName = \u0026#34;unchecked\u0026#34;  \t// IconNameRadioButton is the name of theme lookup for radio button unchecked icon. \t// \t// Since: 2.0 \tIconNameRadioButton fyne.ThemeIconName = \u0026#34;radioButton\u0026#34;  \t// IconNameRadioButtonChecked is the name of theme lookup for radio button checked icon. \t// \t// Since: 2.0 \tIconNameRadioButtonChecked fyne.ThemeIconName = \u0026#34;radioButtonChecked\u0026#34;  \t// IconNameColorAchromatic is the name of theme lookup for greyscale color icon. \t// \t// Since: 2.0 \tIconNameColorAchromatic fyne.ThemeIconName = \u0026#34;colorAchromatic\u0026#34;  \t// IconNameColorChromatic is the name of theme lookup for full color icon. \t// \t// Since: 2.0 \tIconNameColorChromatic fyne.ThemeIconName = \u0026#34;colorChromatic\u0026#34;  \t// IconNameColorPalette is the name of theme lookup for color palette icon. \t// \t// Since: 2.0 \tIconNameColorPalette fyne.ThemeIconName = \u0026#34;colorPalette\u0026#34;  \t// IconNameContentAdd is the name of theme lookup for content add icon. \t// \t// Since: 2.0 \tIconNameContentAdd fyne.ThemeIconName = \u0026#34;contentAdd\u0026#34;  \t// IconNameContentRemove is the name of theme lookup for content remove icon. \t// \t// Since: 2.0 \tIconNameContentRemove fyne.ThemeIconName = \u0026#34;contentRemove\u0026#34;  \t// IconNameContentCut is the name of theme lookup for content cut icon. \t// \t// Since: 2.0 \tIconNameContentCut fyne.ThemeIconName = \u0026#34;contentCut\u0026#34;  \t// IconNameContentCopy is the name of theme lookup for content copy icon. \t// \t// Since: 2.0 \tIconNameContentCopy fyne.ThemeIconName = \u0026#34;contentCopy\u0026#34;  \t// IconNameContentPaste is the name of theme lookup for content paste icon. \t// \t// Since: 2.0 \tIconNameContentPaste fyne.ThemeIconName = \u0026#34;contentPaste\u0026#34;  \t// IconNameContentClear is the name of theme lookup for content clear icon. \t// \t// Since: 2.0 \tIconNameContentClear fyne.ThemeIconName = \u0026#34;contentClear\u0026#34;  \t// IconNameContentRedo is the name of theme lookup for content redo icon. \t// \t// Since: 2.0 \tIconNameContentRedo fyne.ThemeIconName = \u0026#34;contentRedo\u0026#34;  \t// IconNameContentUndo is the name of theme lookup for content undo icon. \t// \t// Since: 2.0 \tIconNameContentUndo fyne.ThemeIconName = \u0026#34;contentUndo\u0026#34;  \t// IconNameInfo is the name of theme lookup for info icon. \t// \t// Since: 2.0 \tIconNameInfo fyne.ThemeIconName = \u0026#34;info\u0026#34;  \t// IconNameQuestion is the name of theme lookup for question icon. \t// \t// Since: 2.0 \tIconNameQuestion fyne.ThemeIconName = \u0026#34;question\u0026#34;  \t// IconNameWarning is the name of theme lookup for warning icon. \t// \t// Since: 2.0 \tIconNameWarning fyne.ThemeIconName = \u0026#34;warning\u0026#34;  \t// IconNameError is the name of theme lookup for error icon. \t// \t// Since: 2.0 \tIconNameError fyne.ThemeIconName = \u0026#34;error\u0026#34;  \t// IconNameDocument is the name of theme lookup for document icon. \t// \t// Since: 2.0 \tIconNameDocument fyne.ThemeIconName = \u0026#34;document\u0026#34;  \t// IconNameDocumentCreate is the name of theme lookup for document create icon. \t// \t// Since: 2.0 \tIconNameDocumentCreate fyne.ThemeIconName = \u0026#34;documentCreate\u0026#34;  \t// IconNameDocumentPrint is the name of theme lookup for document print icon. \t// \t// Since: 2.0 \tIconNameDocumentPrint fyne.ThemeIconName = \u0026#34;documentPrint\u0026#34;  \t// IconNameDocumentSave is the name of theme lookup for document save icon. \t// \t// Since: 2.0 \tIconNameDocumentSave fyne.ThemeIconName = \u0026#34;documentSave\u0026#34;  \t// IconNameMoreHorizontal is the name of theme lookup for horizontal more. \t// \t// Since 2.0 \tIconNameMoreHorizontal fyne.ThemeIconName = \u0026#34;moreHorizontal\u0026#34;  \t// IconNameMoreVertical is the name of theme lookup for vertical more. \t// \t// Since 2.0 \tIconNameMoreVertical fyne.ThemeIconName = \u0026#34;moreVertical\u0026#34;  \t// IconNameMailAttachment is the name of theme lookup for mail attachment icon. \t// \t// Since: 2.0 \tIconNameMailAttachment fyne.ThemeIconName = \u0026#34;mailAttachment\u0026#34;  \t// IconNameMailCompose is the name of theme lookup for mail compose icon. \t// \t// Since: 2.0 \tIconNameMailCompose fyne.ThemeIconName = \u0026#34;mailCompose\u0026#34;  \t// IconNameMailForward is the name of theme lookup for mail forward icon. \t// \t// Since: 2.0 \tIconNameMailForward fyne.ThemeIconName = \u0026#34;mailForward\u0026#34;  \t// IconNameMailReply is the name of theme lookup for mail reply icon. \t// \t// Since: 2.0 \tIconNameMailReply fyne.ThemeIconName = \u0026#34;mailReply\u0026#34;  \t// IconNameMailReplyAll is the name of theme lookup for mail reply-all icon. \t// \t// Since: 2.0 \tIconNameMailReplyAll fyne.ThemeIconName = \u0026#34;mailReplyAll\u0026#34;  \t// IconNameMailSend is the name of theme lookup for mail send icon. \t// \t// Since: 2.0 \tIconNameMailSend fyne.ThemeIconName = \u0026#34;mailSend\u0026#34;  \t// IconNameMediaMusic is the name of theme lookup for media music icon. \t// \t// Since: 2.1 \tIconNameMediaMusic fyne.ThemeIconName = \u0026#34;mediaMusic\u0026#34;  \t// IconNameMediaPhoto is the name of theme lookup for media photo icon. \t// \t// Since: 2.1 \tIconNameMediaPhoto fyne.ThemeIconName = \u0026#34;mediaPhoto\u0026#34;  \t// IconNameMediaVideo is the name of theme lookup for media video icon. \t// \t// Since: 2.1 \tIconNameMediaVideo fyne.ThemeIconName = \u0026#34;mediaVideo\u0026#34;  \t// IconNameMediaFastForward is the name of theme lookup for media fast-forward icon. \t// \t// Since: 2.0 \tIconNameMediaFastForward fyne.ThemeIconName = \u0026#34;mediaFastForward\u0026#34;  \t// IconNameMediaFastRewind is the name of theme lookup for media fast-rewind icon. \t// \t// Since: 2.0 \tIconNameMediaFastRewind fyne.ThemeIconName = \u0026#34;mediaFastRewind\u0026#34;  \t// IconNameMediaPause is the name of theme lookup for media pause icon. \t// \t// Since: 2.0 \tIconNameMediaPause fyne.ThemeIconName = \u0026#34;mediaPause\u0026#34;  \t// IconNameMediaPlay is the name of theme lookup for media play icon. \t// \t// Since: 2.0 \tIconNameMediaPlay fyne.ThemeIconName = \u0026#34;mediaPlay\u0026#34;  \t// IconNameMediaRecord is the name of theme lookup for media record icon. \t// \t// Since: 2.0 \tIconNameMediaRecord fyne.ThemeIconName = \u0026#34;mediaRecord\u0026#34;  \t// IconNameMediaReplay is the name of theme lookup for media replay icon. \t// \t// Since: 2.0 \tIconNameMediaReplay fyne.ThemeIconName = \u0026#34;mediaReplay\u0026#34;  \t// IconNameMediaSkipNext is the name of theme lookup for media skip next icon. \t// \t// Since: 2.0 \tIconNameMediaSkipNext fyne.ThemeIconName = \u0026#34;mediaSkipNext\u0026#34;  \t// IconNameMediaSkipPrevious is the name of theme lookup for media skip previous icon. \t// \t// Since: 2.0 \tIconNameMediaSkipPrevious fyne.ThemeIconName = \u0026#34;mediaSkipPrevious\u0026#34;  \t// IconNameMediaStop is the name of theme lookup for media stop icon. \t// \t// Since: 2.0 \tIconNameMediaStop fyne.ThemeIconName = \u0026#34;mediaStop\u0026#34;  \t// IconNameMoveDown is the name of theme lookup for move down icon. \t// \t// Since: 2.0 \tIconNameMoveDown fyne.ThemeIconName = \u0026#34;arrowDown\u0026#34;  \t// IconNameMoveUp is the name of theme lookup for move up icon. \t// \t// Since: 2.0 \tIconNameMoveUp fyne.ThemeIconName = \u0026#34;arrowUp\u0026#34;  \t// IconNameNavigateBack is the name of theme lookup for navigate back icon. \t// \t// Since: 2.0 \tIconNameNavigateBack fyne.ThemeIconName = \u0026#34;arrowBack\u0026#34;  \t// IconNameNavigateNext is the name of theme lookup for navigate next icon. \t// \t// Since: 2.0 \tIconNameNavigateNext fyne.ThemeIconName = \u0026#34;arrowForward\u0026#34;  \t// IconNameArrowDropDown is the name of theme lookup for drop-down arrow icon. \t// \t// Since: 2.0 \tIconNameArrowDropDown fyne.ThemeIconName = \u0026#34;arrowDropDown\u0026#34;  \t// IconNameArrowDropUp is the name of theme lookup for drop-up arrow icon. \t// \t// Since: 2.0 \tIconNameArrowDropUp fyne.ThemeIconName = \u0026#34;arrowDropUp\u0026#34;  \t// IconNameFile is the name of theme lookup for file icon. \t// \t// Since: 2.0 \tIconNameFile fyne.ThemeIconName = \u0026#34;file\u0026#34;  \t// IconNameFileApplication is the name of theme lookup for file application icon. \t// \t// Since: 2.0 \tIconNameFileApplication fyne.ThemeIconName = \u0026#34;fileApplication\u0026#34;  \t// IconNameFileAudio is the name of theme lookup for file audio icon. \t// \t// Since: 2.0 \tIconNameFileAudio fyne.ThemeIconName = \u0026#34;fileAudio\u0026#34;  \t// IconNameFileImage is the name of theme lookup for file image icon. \t// \t// Since: 2.0 \tIconNameFileImage fyne.ThemeIconName = \u0026#34;fileImage\u0026#34;  \t// IconNameFileText is the name of theme lookup for file text icon. \t// \t// Since: 2.0 \tIconNameFileText fyne.ThemeIconName = \u0026#34;fileText\u0026#34;  \t// IconNameFileVideo is the name of theme lookup for file video icon. \t// \t// Since: 2.0 \tIconNameFileVideo fyne.ThemeIconName = \u0026#34;fileVideo\u0026#34;  \t// IconNameFolder is the name of theme lookup for folder icon. \t// \t// Since: 2.0 \tIconNameFolder fyne.ThemeIconName = \u0026#34;folder\u0026#34;  \t// IconNameFolderNew is the name of theme lookup for folder new icon. \t// \t// Since: 2.0 \tIconNameFolderNew fyne.ThemeIconName = \u0026#34;folderNew\u0026#34;  \t// IconNameFolderOpen is the name of theme lookup for folder open icon. \t// \t// Since: 2.0 \tIconNameFolderOpen fyne.ThemeIconName = \u0026#34;folderOpen\u0026#34;  \t// IconNameHelp is the name of theme lookup for help icon. \t// \t// Since: 2.0 \tIconNameHelp fyne.ThemeIconName = \u0026#34;help\u0026#34;  \t// IconNameHistory is the name of theme lookup for history icon. \t// \t// Since: 2.0 \tIconNameHistory fyne.ThemeIconName = \u0026#34;history\u0026#34;  \t// IconNameHome is the name of theme lookup for home icon. \t// \t// Since: 2.0 \tIconNameHome fyne.ThemeIconName = \u0026#34;home\u0026#34;  \t// IconNameSettings is the name of theme lookup for settings icon. \t// \t// Since: 2.0 \tIconNameSettings fyne.ThemeIconName = \u0026#34;settings\u0026#34;  \t// IconNameStorage is the name of theme lookup for storage icon. \t// \t// Since: 2.0 \tIconNameStorage fyne.ThemeIconName = \u0026#34;storage\u0026#34;  \t// IconNameUpload is the name of theme lookup for upload icon. \t// \t// Since: 2.0 \tIconNameUpload fyne.ThemeIconName = \u0026#34;upload\u0026#34;  \t// IconNameViewFullScreen is the name of theme lookup for view fullscreen icon. \t// \t// Since: 2.0 \tIconNameViewFullScreen fyne.ThemeIconName = \u0026#34;viewFullScreen\u0026#34;  \t// IconNameViewRefresh is the name of theme lookup for view refresh icon. \t// \t// Since: 2.0 \tIconNameViewRefresh fyne.ThemeIconName = \u0026#34;viewRefresh\u0026#34;  \t// IconNameViewZoomFit is the name of theme lookup for view zoom fit icon. \t// \t// Since: 2.0 \tIconNameViewZoomFit fyne.ThemeIconName = \u0026#34;viewZoomFit\u0026#34;  \t// IconNameViewZoomIn is the name of theme lookup for view zoom in icon. \t// \t// Since: 2.0 \tIconNameViewZoomIn fyne.ThemeIconName = \u0026#34;viewZoomIn\u0026#34;  \t// IconNameViewZoomOut is the name of theme lookup for view zoom out icon. \t// \t// Since: 2.0 \tIconNameViewZoomOut fyne.ThemeIconName = \u0026#34;viewZoomOut\u0026#34;  \t// IconNameViewRestore is the name of theme lookup for view restore icon. \t// \t// Since: 2.0 \tIconNameViewRestore fyne.ThemeIconName = \u0026#34;viewRestore\u0026#34;  \t// IconNameVisibility is the name of theme lookup for visibility icon. \t// \t// Since: 2.0 \tIconNameVisibility fyne.ThemeIconName = \u0026#34;visibility\u0026#34;  \t// IconNameVisibilityOff is the name of theme lookup for invisibility icon. \t// \t// Since: 2.0 \tIconNameVisibilityOff fyne.ThemeIconName = \u0026#34;visibilityOff\u0026#34;  \t// IconNameVolumeDown is the name of theme lookup for volume down icon. \t// \t// Since: 2.0 \tIconNameVolumeDown fyne.ThemeIconName = \u0026#34;volumeDown\u0026#34;  \t// IconNameVolumeMute is the name of theme lookup for volume mute icon. \t// \t// Since: 2.0 \tIconNameVolumeMute fyne.ThemeIconName = \u0026#34;volumeMute\u0026#34;  \t// IconNameVolumeUp is the name of theme lookup for volume up icon. \t// \t// Since: 2.0 \tIconNameVolumeUp fyne.ThemeIconName = \u0026#34;volumeUp\u0026#34;  \t// IconNameDownload is the name of theme lookup for download icon. \t// \t// Since: 2.0 \tIconNameDownload fyne.ThemeIconName = \u0026#34;download\u0026#34;  \t// IconNameComputer is the name of theme lookup for computer icon. \t// \t// Since: 2.0 \tIconNameComputer fyne.ThemeIconName = \u0026#34;computer\u0026#34;  \t// IconNameAccount is the name of theme lookup for account icon. \t// \t// Since: 2.1 \tIconNameAccount fyne.ThemeIconName = \u0026#34;account\u0026#34;  \t// IconNameLogin is the name of theme lookup for login icon. \t// \t// Since: 2.1 \tIconNameLogin fyne.ThemeIconName = \u0026#34;login\u0026#34;  \t// IconNameLogout is the name of theme lookup for logout icon. \t// \t// Since: 2.1 \tIconNameLogout fyne.ThemeIconName = \u0026#34;logout\u0026#34;  \t// IconNameList is the name of theme lookup for list icon. \t// \t// Since: 2.1 \tIconNameList fyne.ThemeIconName = \u0026#34;list\u0026#34;  \t// IconNameGrid is the name of theme lookup for grid icon. \t// \t// Since: 2.1 \tIconNameGrid fyne.ThemeIconName = \u0026#34;grid\u0026#34; ) const ( \t// ColorRed is the red primary color name \t// \t// Since: 1.4 \tColorRed = \u0026#34;red\u0026#34; \t// ColorOrange is the orange primary color name \t// \t// Since: 1.4 \tColorOrange = \u0026#34;orange\u0026#34; \t// ColorYellow is the yellow primary color name \t// \t// Since: 1.4 \tColorYellow = \u0026#34;yellow\u0026#34; \t// ColorGreen is the green primary color name \t// \t// Since: 1.4 \tColorGreen = \u0026#34;green\u0026#34; \t// ColorBlue is the blue primary color name \t// \t// Since: 1.4 \tColorBlue = \u0026#34;blue\u0026#34; \t// ColorPurple is the purple primary color name \t// \t// Since: 1.4 \tColorPurple = \u0026#34;purple\u0026#34; \t// ColorBrown is the brown primary color name \t// \t// Since: 1.4 \tColorBrown = \u0026#34;brown\u0026#34; \t// ColorGray is the gray primary color name \t// \t// Since: 1.4 \tColorGray = \u0026#34;gray\u0026#34;  \t// ColorNameBackground is the name of theme lookup for background color. \t// \t// Since: 2.0 \tColorNameBackground fyne.ThemeColorName = \u0026#34;background\u0026#34;  \t// ColorNameButton is the name of theme lookup for button color. \t// \t// Since: 2.0 \tColorNameButton fyne.ThemeColorName = \u0026#34;button\u0026#34;  \t// ColorNameDisabledButton is the name of theme lookup for disabled button color. \t// \t// Since: 2.0 \tColorNameDisabledButton fyne.ThemeColorName = \u0026#34;disabledButton\u0026#34;  \t// ColorNameDisabled is the name of theme lookup for disabled foreground color. \t// \t// Since: 2.0 \tColorNameDisabled fyne.ThemeColorName = \u0026#34;disabled\u0026#34;  \t// ColorNameError is the name of theme lookup for foreground error color. \t// \t// Since: 2.0 \tColorNameError fyne.ThemeColorName = \u0026#34;error\u0026#34;  \t// ColorNameFocus is the name of theme lookup for focus color. \t// \t// Since: 2.0 \tColorNameFocus fyne.ThemeColorName = \u0026#34;focus\u0026#34;  \t// ColorNameForeground is the name of theme lookup for foreground color. \t// \t// Since: 2.0 \tColorNameForeground fyne.ThemeColorName = \u0026#34;foreground\u0026#34;  \t// ColorNameHover is the name of theme lookup for hover color. \t// \t// Since: 2.0 \tColorNameHover fyne.ThemeColorName = \u0026#34;hover\u0026#34;  \t// ColorNameInputBackground is the name of theme lookup for background color of an input field. \t// \t// Since: 2.0 \tColorNameInputBackground fyne.ThemeColorName = \u0026#34;inputBackground\u0026#34;  \t// ColorNamePlaceHolder is the name of theme lookup for placeholder text color. \t// \t// Since: 2.0 \tColorNamePlaceHolder fyne.ThemeColorName = \u0026#34;placeholder\u0026#34;  \t// ColorNamePressed is the name of theme lookup for the tap overlay color. \t// \t// Since: 2.0 \tColorNamePressed fyne.ThemeColorName = \u0026#34;pressed\u0026#34;  \t// ColorNamePrimary is the name of theme lookup for primary color. \t// \t// Since: 2.0 \tColorNamePrimary fyne.ThemeColorName = \u0026#34;primary\u0026#34;  \t// ColorNameScrollBar is the name of theme lookup for scrollbar color. \t// \t// Since: 2.0 \tColorNameScrollBar fyne.ThemeColorName = \u0026#34;scrollBar\u0026#34;  \t// ColorNameSelection is the name of theme lookup for selection color. \t// \t// Since: 2.1 \tColorNameSelection fyne.ThemeColorName = \u0026#34;selection\u0026#34;  \t// ColorNameShadow is the name of theme lookup for shadow color. \t// \t// Since: 2.0 \tColorNameShadow fyne.ThemeColorName = \u0026#34;shadow\u0026#34;  \t// SizeNameCaptionText is the name of theme lookup for helper text size, normally smaller than regular text size. \t// \t// Since: 2.0 \tSizeNameCaptionText fyne.ThemeSizeName = \u0026#34;helperText\u0026#34;  \t// SizeNameInlineIcon is the name of theme lookup for inline icons size. \t// \t// Since: 2.0 \tSizeNameInlineIcon fyne.ThemeSizeName = \u0026#34;iconInline\u0026#34;  \t// SizeNamePadding is the name of theme lookup for padding size. \t// \t// Since: 2.0 \tSizeNamePadding fyne.ThemeSizeName = \u0026#34;padding\u0026#34;  \t// SizeNameScrollBar is the name of theme lookup for the scrollbar size. \t// \t// Since: 2.0 \tSizeNameScrollBar fyne.ThemeSizeName = \u0026#34;scrollBar\u0026#34;  \t// SizeNameScrollBarSmall is the name of theme lookup for the shrunk scrollbar size. \t// \t// Since: 2.0 \tSizeNameScrollBarSmall fyne.ThemeSizeName = \u0026#34;scrollBarSmall\u0026#34;  \t// SizeNameSeparatorThickness is the name of theme lookup for the thickness of a separator. \t// \t// Since: 2.0 \tSizeNameSeparatorThickness fyne.ThemeSizeName = \u0026#34;separator\u0026#34;  \t// SizeNameText is the name of theme lookup for text size. \t// \t// Since: 2.0 \tSizeNameText fyne.ThemeSizeName = \u0026#34;text\u0026#34;  \t// SizeNameHeadingText is the name of theme lookup for text size of a heading. \t// \t// Since: 2.1 \tSizeNameHeadingText fyne.ThemeSizeName = \u0026#34;headingText\u0026#34;  \t// SizeNameSubHeadingText is the name of theme lookup for text size of a sub-heading. \t// \t// Since: 2.1 \tSizeNameSubHeadingText fyne.ThemeSizeName = \u0026#34;subHeadingText\u0026#34;  \t// SizeNameInputBorder is the name of theme lookup for input border size. \t// \t// Since: 2.0 \tSizeNameInputBorder fyne.ThemeSizeName = \u0026#34;inputBorder\u0026#34;  \t// VariantDark is the version of a theme that satisfies a user preference for a light look. \t// \t// Since: 2.0 \tVariantDark fyne.ThemeVariant = 0  \t// VariantLight is the version of a theme that satisfies a user preference for a dark look. \t// \t// Since: 2.0 \tVariantLight fyne.ThemeVariant = 1 ) func AccountIcon\r#\r\rfunc AccountIcon() fyne.Resource AccountIcon returns a resource containing the standard account icon for the current theme\nfunc BackgroundColor\r#\r\rfunc BackgroundColor() color.Color BackgroundColor returns the theme\u0026rsquo;s background color\nfunc ButtonColor\r#\r\rfunc ButtonColor() color.Color ButtonColor returns the theme\u0026rsquo;s standard button color.\nfunc CancelIcon\r#\r\rfunc CancelIcon() fyne.Resource CancelIcon returns a resource containing the standard cancel icon for the current theme\nfunc CaptionTextSize\r#\r\rfunc CaptionTextSize() float32 CaptionTextSize returns the size for caption text.\nfunc CheckButtonCheckedIcon\r#\r\rfunc CheckButtonCheckedIcon() fyne.Resource CheckButtonCheckedIcon returns a resource containing the standard checkbox checked icon for the current theme\nfunc CheckButtonIcon\r#\r\rfunc CheckButtonIcon() fyne.Resource CheckButtonIcon returns a resource containing the standard checkbox icon for the current theme\nfunc ColorAchromaticIcon\r#\r\rfunc ColorAchromaticIcon() fyne.Resource ColorAchromaticIcon returns a resource containing the standard achromatic color icon for the current theme\nfunc ColorChromaticIcon\r#\r\rfunc ColorChromaticIcon() fyne.Resource ColorChromaticIcon returns a resource containing the standard chromatic color icon for the current theme\nfunc ColorPaletteIcon\r#\r\rfunc ColorPaletteIcon() fyne.Resource ColorPaletteIcon returns a resource containing the standard color palette icon for the current theme\nfunc ComputerIcon\r#\r\rfunc ComputerIcon() fyne.Resource ComputerIcon returns a resource containing the standard computer icon for the current theme\nfunc ConfirmIcon\r#\r\rfunc ConfirmIcon() fyne.Resource ConfirmIcon returns a resource containing the standard confirm icon for the current theme\nfunc ContentAddIcon\r#\r\rfunc ContentAddIcon() fyne.Resource ContentAddIcon returns a resource containing the standard content add icon for the current theme\nfunc ContentClearIcon\r#\r\rfunc ContentClearIcon() fyne.Resource ContentClearIcon returns a resource containing the standard content clear icon for the current theme\nfunc ContentCopyIcon\r#\r\rfunc ContentCopyIcon() fyne.Resource ContentCopyIcon returns a resource containing the standard content copy icon for the current theme\nfunc ContentCutIcon\r#\r\rfunc ContentCutIcon() fyne.Resource ContentCutIcon returns a resource containing the standard content cut icon for the current theme\nfunc ContentPasteIcon\r#\r\rfunc ContentPasteIcon() fyne.Resource ContentPasteIcon returns a resource containing the standard content paste icon for the current theme\nfunc ContentRedoIcon\r#\r\rfunc ContentRedoIcon() fyne.Resource ContentRedoIcon returns a resource containing the standard content redo icon for the current theme\nfunc ContentRemoveIcon\r#\r\rfunc ContentRemoveIcon() fyne.Resource ContentRemoveIcon returns a resource containing the standard content remove icon for the current theme\nfunc ContentUndoIcon\r#\r\rfunc ContentUndoIcon() fyne.Resource ContentUndoIcon returns a resource containing the standard content undo icon for the current theme\nfunc DarkTheme\r#\r\rfunc DarkTheme() fyne.Theme DarkTheme defines the built in dark theme colors and sizes.\nDeprecated: This method ignores user preference and should not be used, it will be removed in v3.0.\rfunc DefaultTextBoldFont\r#\r\rfunc DefaultTextBoldFont() fyne.Resource DefaultTextBoldFont returns the font resource for the built-in bold font style\nfunc DefaultTextBoldItalicFont\r#\r\rfunc DefaultTextBoldItalicFont() fyne.Resource DefaultTextBoldItalicFont returns the font resource for the built-in bold and italic font style\nfunc DefaultTextFont\r#\r\rfunc DefaultTextFont() fyne.Resource DefaultTextFont returns the font resource for the built-in regular font style\nfunc DefaultTextItalicFont\r#\r\rfunc DefaultTextItalicFont() fyne.Resource DefaultTextItalicFont returns the font resource for the built-in italic font style\nfunc DefaultTextMonospaceFont\r#\r\rfunc DefaultTextMonospaceFont() fyne.Resource DefaultTextMonospaceFont returns the font resource for the built-in monospace font face\nfunc DefaultTheme\r#\r\rfunc DefaultTheme() fyne.Theme DefaultTheme returns a built-in theme that can adapt to the user preference of light or dark colors.\nSince: \r2.0\rfunc DeleteIcon\r#\r\rfunc DeleteIcon() fyne.Resource DeleteIcon returns a resource containing the standard delete icon for the current theme\nfunc DisabledButtonColor\r#\r\rfunc DisabledButtonColor() color.Color DisabledButtonColor returns the theme\u0026rsquo;s disabled button color.\nfunc DisabledColor\r#\r\rfunc DisabledColor() color.Color DisabledColor returns the foreground color for a disabled UI element\nSince: \r2.0\rfunc DisabledTextColor\r#\r\rfunc DisabledTextColor() color.Color DisabledTextColor returns the theme\u0026rsquo;s disabled text color - this is actually the disabled color since 1.4.\nDeprecated: Use theme.DisabledColor() colour instead\rfunc DocumentCreateIcon\r#\r\rfunc DocumentCreateIcon() fyne.Resource DocumentCreateIcon returns a resource containing the standard document create icon for the current theme\nfunc DocumentIcon\r#\r\rfunc DocumentIcon() fyne.Resource DocumentIcon returns a resource containing the standard document icon for the current theme\nfunc DocumentPrintIcon\r#\r\rfunc DocumentPrintIcon() fyne.Resource DocumentPrintIcon returns a resource containing the standard document print icon for the current theme\nfunc DocumentSaveIcon\r#\r\rfunc DocumentSaveIcon() fyne.Resource DocumentSaveIcon returns a resource containing the standard document save icon for the current theme\nfunc DownloadIcon\r#\r\rfunc DownloadIcon() fyne.Resource DownloadIcon returns a resource containing the standard download icon for the current theme\nfunc ErrorColor\r#\r\rfunc ErrorColor() color.Color ErrorColor returns the theme\u0026rsquo;s error text color\nSince: \r2.0\rfunc ErrorIcon\r#\r\rfunc ErrorIcon() fyne.Resource ErrorIcon returns a resource containing the standard dialog error icon for the current theme\nfunc FileApplicationIcon\r#\r\rfunc FileApplicationIcon() fyne.Resource FileApplicationIcon returns a resource containing the file icon representing application files for the current theme\nfunc FileAudioIcon\r#\r\rfunc FileAudioIcon() fyne.Resource FileAudioIcon returns a resource containing the file icon representing audio files for the current theme\nfunc FileIcon\r#\r\rfunc FileIcon() fyne.Resource FileIcon returns a resource containing the appropriate file icon for the current theme\nfunc FileImageIcon\r#\r\rfunc FileImageIcon() fyne.Resource FileImageIcon returns a resource containing the file icon representing image files for the current theme\nfunc FileTextIcon\r#\r\rfunc FileTextIcon() fyne.Resource FileTextIcon returns a resource containing the file icon representing text files for the current theme\nfunc FileVideoIcon\r#\r\rfunc FileVideoIcon() fyne.Resource FileVideoIcon returns a resource containing the file icon representing video files for the current theme\nfunc FocusColor\r#\r\rfunc FocusColor() color.Color FocusColor returns the color used to highlight a focused widget\nfunc FolderIcon\r#\r\rfunc FolderIcon() fyne.Resource FolderIcon returns a resource containing the standard folder icon for the current theme\nfunc FolderNewIcon\r#\r\rfunc FolderNewIcon() fyne.Resource FolderNewIcon returns a resource containing the standard folder creation icon for the current theme\nfunc FolderOpenIcon\r#\r\rfunc FolderOpenIcon() fyne.Resource FolderOpenIcon returns a resource containing the standard folder open icon for the current theme\nfunc ForegroundColor\r#\r\rfunc ForegroundColor() color.Color ForegroundColor returns the theme\u0026rsquo;s standard foreground color for text and icons\nSince: \r2.0\rfunc FromLegacy\r#\r\rfunc FromLegacy(t fyne.LegacyTheme) fyne.Theme FromLegacy returns a 2.0 Theme created from the given LegacyTheme data. This is a transition path and will be removed in the future (probably version 3.0).\nSince: \r2.0\rfunc FyneLogo\r#\r\rfunc FyneLogo() fyne.Resource FyneLogo returns a resource containing the Fyne logo\nfunc GridIcon\r#\r\rfunc GridIcon() fyne.Resource GridIcon returns a resource containing the standard grid icon for the current theme\nfunc HelpIcon\r#\r\rfunc HelpIcon() fyne.Resource HelpIcon returns a resource containing the standard help icon for the current theme\nfunc HistoryIcon\r#\r\rfunc HistoryIcon() fyne.Resource HistoryIcon returns a resource containing the standard history icon for the current theme\nfunc HomeIcon\r#\r\rfunc HomeIcon() fyne.Resource HomeIcon returns a resource containing the standard home folder icon for the current theme\nfunc HoverColor\r#\r\rfunc HoverColor() color.Color HoverColor returns the color used to highlight interactive elements currently under a cursor\nfunc IconInlineSize\r#\r\rfunc IconInlineSize() float32 IconInlineSize is the standard size of icons which appear within buttons, labels etc.\nfunc InfoIcon\r#\r\rfunc InfoIcon() fyne.Resource InfoIcon returns a resource containing the standard dialog info icon for the current theme\nfunc InputBackgroundColor\r#\r\rfunc InputBackgroundColor() color.Color InputBackgroundColor returns the color used to draw underneath input elements.\nfunc InputBorderSize\r#\r\rfunc InputBorderSize() float32 InputBorderSize returns the input border size (or underline size for an entry).\nSince: \r2.0\rfunc LightTheme\r#\r\rfunc LightTheme() fyne.Theme LightTheme defines the built in light theme colors and sizes.\nDeprecated: This method ignores user preference and should not be used, it will be removed in v3.0.\rfunc ListIcon\r#\r\rfunc ListIcon() fyne.Resource ListIcon returns a resource containing the standard list icon for the current theme\nfunc LoginIcon\r#\r\rfunc LoginIcon() fyne.Resource LoginIcon returns a resource containing the standard login icon for the current theme\nfunc LogoutIcon\r#\r\rfunc LogoutIcon() fyne.Resource LogoutIcon returns a resource containing the standard logout icon for the current theme\nfunc MailAttachmentIcon\r#\r\rfunc MailAttachmentIcon() fyne.Resource MailAttachmentIcon returns a resource containing the standard mail attachment icon for the current theme\nfunc MailComposeIcon\r#\r\rfunc MailComposeIcon() fyne.Resource MailComposeIcon returns a resource containing the standard mail compose icon for the current theme\nfunc MailForwardIcon\r#\r\rfunc MailForwardIcon() fyne.Resource MailForwardIcon returns a resource containing the standard mail forward icon for the current theme\nfunc MailReplyAllIcon\r#\r\rfunc MailReplyAllIcon() fyne.Resource MailReplyAllIcon returns a resource containing the standard mail reply all icon for the current theme\nfunc MailReplyIcon\r#\r\rfunc MailReplyIcon() fyne.Resource MailReplyIcon returns a resource containing the standard mail reply icon for the current theme\nfunc MailSendIcon\r#\r\rfunc MailSendIcon() fyne.Resource MailSendIcon returns a resource containing the standard mail send icon for the current theme\nfunc MediaFastForwardIcon\r#\r\rfunc MediaFastForwardIcon() fyne.Resource MediaFastForwardIcon returns a resource containing the standard media fast-forward icon for the current theme\nfunc MediaFastRewindIcon\r#\r\rfunc MediaFastRewindIcon() fyne.Resource MediaFastRewindIcon returns a resource containing the standard media fast-rewind icon for the current theme\nfunc MediaMusicIcon\r#\r\rfunc MediaMusicIcon() fyne.Resource MediaMusicIcon returns a resource containing the standard media music icon for the current theme\nSince: \r2.1\rfunc MediaPauseIcon\r#\r\rfunc MediaPauseIcon() fyne.Resource MediaPauseIcon returns a resource containing the standard media pause icon for the current theme\nfunc MediaPhotoIcon\r#\r\rfunc MediaPhotoIcon() fyne.Resource MediaPhotoIcon returns a resource containing the standard media photo icon for the current theme\nSince: \r2.1\rfunc MediaPlayIcon\r#\r\rfunc MediaPlayIcon() fyne.Resource MediaPlayIcon returns a resource containing the standard media play icon for the current theme\nfunc MediaRecordIcon\r#\r\rfunc MediaRecordIcon() fyne.Resource MediaRecordIcon returns a resource containing the standard media record icon for the current theme\nfunc MediaReplayIcon\r#\r\rfunc MediaReplayIcon() fyne.Resource MediaReplayIcon returns a resource containing the standard media replay icon for the current theme\nfunc MediaSkipNextIcon\r#\r\rfunc MediaSkipNextIcon() fyne.Resource MediaSkipNextIcon returns a resource containing the standard media skip next icon for the current theme\nfunc MediaSkipPreviousIcon\r#\r\rfunc MediaSkipPreviousIcon() fyne.Resource MediaSkipPreviousIcon returns a resource containing the standard media skip previous icon for the current theme\nfunc MediaStopIcon\r#\r\rfunc MediaStopIcon() fyne.Resource MediaStopIcon returns a resource containing the standard media stop icon for the current theme\nfunc MediaVideoIcon\r#\r\rfunc MediaVideoIcon() fyne.Resource MediaVideoIcon returns a resource containing the standard media video icon for the current theme\nSince: \r2.1\rfunc MenuDropDownIcon\r#\r\rfunc MenuDropDownIcon() fyne.Resource MenuDropDownIcon returns a resource containing the standard menu drop down icon for the current theme\nfunc MenuDropUpIcon\r#\r\rfunc MenuDropUpIcon() fyne.Resource MenuDropUpIcon returns a resource containing the standard menu drop up icon for the current theme\nfunc MenuExpandIcon\r#\r\rfunc MenuExpandIcon() fyne.Resource MenuExpandIcon returns a resource containing the standard (mobile) expand \u0026ldquo;submenu icon for the current theme\nfunc MenuIcon\r#\r\rfunc MenuIcon() fyne.Resource MenuIcon returns a resource containing the standard (mobile) menu icon for the current theme\nfunc MoreHorizontalIcon\r#\r\rfunc MoreHorizontalIcon() fyne.Resource MoreHorizontalIcon returns a resource containing the standard horizontal more icon for the current theme\nfunc MoreVerticalIcon\r#\r\rfunc MoreVerticalIcon() fyne.Resource MoreVerticalIcon returns a resource containing the standard vertical more icon for the current theme\nfunc MoveDownIcon\r#\r\rfunc MoveDownIcon() fyne.Resource MoveDownIcon returns a resource containing the standard down arrow icon for the current theme\nfunc MoveUpIcon\r#\r\rfunc MoveUpIcon() fyne.Resource MoveUpIcon returns a resource containing the standard up arrow icon for the current theme\nfunc NavigateBackIcon\r#\r\rfunc NavigateBackIcon() fyne.Resource NavigateBackIcon returns a resource containing the standard backward navigation icon for the current theme\nfunc NavigateNextIcon\r#\r\rfunc NavigateNextIcon() fyne.Resource NavigateNextIcon returns a resource containing the standard forward navigation icon for the current theme\nfunc Padding\r#\r\rfunc Padding() float32 Padding is the standard gap between elements and the border around interface elements\nfunc PlaceHolderColor\r#\r\rfunc PlaceHolderColor() color.Color PlaceHolderColor returns the theme\u0026rsquo;s standard text color\nfunc PressedColor\r#\r\rfunc PressedColor() color.Color PressedColor returns the color used to overlap tapped features\nSince: \r2.0\rfunc PrimaryColor\r#\r\rfunc PrimaryColor() color.Color PrimaryColor returns the color used to highlight primary features\nfunc PrimaryColorNamed\r#\r\rfunc PrimaryColorNamed(name string) color.Color PrimaryColorNamed returns a theme specific color value for a named primary color.\nSince: \r1.4\rfunc PrimaryColorNames\r#\r\rfunc PrimaryColorNames() []string PrimaryColorNames returns a list of the standard primary color options.\nSince: \r1.4\rfunc QuestionIcon\r#\r\rfunc QuestionIcon() fyne.Resource QuestionIcon returns a resource containing the standard dialog question icon for the current theme\nfunc RadioButtonCheckedIcon\r#\r\rfunc RadioButtonCheckedIcon() fyne.Resource RadioButtonCheckedIcon returns a resource containing the standard radio button checked icon for the current theme\nfunc RadioButtonIcon\r#\r\rfunc RadioButtonIcon() fyne.Resource RadioButtonIcon returns a resource containing the standard radio button icon for the current theme\nfunc ScrollBarColor\r#\r\rfunc ScrollBarColor() color.Color ScrollBarColor returns the color (and translucency) for a scrollBar\nfunc ScrollBarSize\r#\r\rfunc ScrollBarSize() float32 ScrollBarSize is the width (or height) of the bars on a ScrollContainer\nfunc ScrollBarSmallSize\r#\r\rfunc ScrollBarSmallSize() float32 ScrollBarSmallSize is the width (or height) of the minimized bars on a ScrollContainer\nfunc SearchIcon\r#\r\rfunc SearchIcon() fyne.Resource SearchIcon returns a resource containing the standard search icon for the current theme\nfunc SearchReplaceIcon\r#\r\rfunc SearchReplaceIcon() fyne.Resource SearchReplaceIcon returns a resource containing the standard search and replace icon for the current theme\nfunc SelectionColor\r#\r\rfunc SelectionColor() color.Color SelectionColor returns the color for a selected element.\nSince: \r2.1\rfunc SeparatorThicknessSize\r#\r\rfunc SeparatorThicknessSize() float32 SeparatorThicknessSize is the standard thickness of the separator widget.\nSince: \r2.0\rfunc SettingsIcon\r#\r\rfunc SettingsIcon() fyne.Resource SettingsIcon returns a resource containing the standard settings icon for the current theme\nfunc ShadowColor\r#\r\rfunc ShadowColor() color.Color ShadowColor returns the color (and translucency) for shadows used for indicating elevation\nfunc StorageIcon\r#\r\rfunc StorageIcon() fyne.Resource StorageIcon returns a resource containing the standard storage icon for the current theme\nfunc TextBoldFont\r#\r\rfunc TextBoldFont() fyne.Resource TextBoldFont returns the font resource for the bold font style\nfunc TextBoldItalicFont\r#\r\rfunc TextBoldItalicFont() fyne.Resource TextBoldItalicFont returns the font resource for the bold and italic font style\nfunc TextColor\r#\r\rfunc TextColor() color.Color TextColor returns the theme\u0026rsquo;s standard text color - this is actually the foreground color since 1.4.\nDeprecated: Use theme.ForegroundColor() colour instead\rfunc TextFont\r#\r\rfunc TextFont() fyne.Resource TextFont returns the font resource for the regular font style\nfunc TextHeadingSize\r#\r\rfunc TextHeadingSize() float32 TextHeadingSize returns the text size for header text.\nSince: \r2.1\rfunc TextItalicFont\r#\r\rfunc TextItalicFont() fyne.Resource TextItalicFont returns the font resource for the italic font style\nfunc TextMonospaceFont\r#\r\rfunc TextMonospaceFont() fyne.Resource TextMonospaceFont returns the font resource for the monospace font face\nfunc TextSize\r#\r\rfunc TextSize() float32 TextSize returns the standard text size\nfunc TextSubHeadingSize\r#\r\rfunc TextSubHeadingSize() float32 TextSubHeadingSize returns the text size for sub-header text.\nSince: \r2.1\rfunc UploadIcon\r#\r\rfunc UploadIcon() fyne.Resource UploadIcon returns a resource containing the standard upload icon for the current theme\nfunc ViewFullScreenIcon\r#\r\rfunc ViewFullScreenIcon() fyne.Resource ViewFullScreenIcon returns a resource containing the standard fullscreen icon for the current theme\nfunc ViewRefreshIcon\r#\r\rfunc ViewRefreshIcon() fyne.Resource ViewRefreshIcon returns a resource containing the standard refresh icon for the current theme\nfunc ViewRestoreIcon\r#\r\rfunc ViewRestoreIcon() fyne.Resource ViewRestoreIcon returns a resource containing the standard exit fullscreen icon for the current theme\nfunc VisibilityIcon\r#\r\rfunc VisibilityIcon() fyne.Resource VisibilityIcon returns a resource containing the standard visibility icon for the current theme\nfunc VisibilityOffIcon\r#\r\rfunc VisibilityOffIcon() fyne.Resource VisibilityOffIcon returns a resource containing the standard visibility off icon for the current theme\nfunc VolumeDownIcon\r#\r\rfunc VolumeDownIcon() fyne.Resource VolumeDownIcon returns a resource containing the standard volume down icon for the current theme\nfunc VolumeMuteIcon\r#\r\rfunc VolumeMuteIcon() fyne.Resource VolumeMuteIcon returns a resource containing the standard volume mute icon for the current theme\nfunc VolumeUpIcon\r#\r\rfunc VolumeUpIcon() fyne.Resource VolumeUpIcon returns a resource containing the standard volume up icon for the current theme\nfunc WarningIcon\r#\r\rfunc WarningIcon() fyne.Resource WarningIcon returns a resource containing the standard dialog warning icon for the current theme\nfunc ZoomFitIcon\r#\r\rfunc ZoomFitIcon() fyne.Resource ZoomFitIcon returns a resource containing the standard zoom fit icon for the current theme\nfunc ZoomInIcon\r#\r\rfunc ZoomInIcon() fyne.Resource ZoomInIcon returns a resource containing the standard zoom in icon for the current theme\nfunc ZoomOutIcon\r#\r\rfunc ZoomOutIcon() fyne.Resource ZoomOutIcon returns a resource containing the standard zoom out icon for the current theme\ntypes\r#\r\r \rDisabledResource \rErrorThemedResource \rInvertedThemedResource \rPrimaryThemedResource \rThemedResource  "},{"id":233,"href":"/docs/api/theme/disabledresource/","title":"theme.DisabledResource","section":"theme","content":"theme.DisabledResource\r#\r\r import \u0026#34;fyne.io/fyne/v2/theme\u0026#34; Usage\r#\r\rtype DisabledResource\r#\r\rtype DisabledResource struct { } DisabledResource is a resource wrapper that will return an appropriate resource colorized by the current theme\u0026rsquo;s DisabledIconColor color.\nfunc NewDisabledResource\r#\r\rfunc NewDisabledResource(res fyne.Resource) *DisabledResource NewDisabledResource creates a resource that adapts to the current theme\u0026rsquo;s DisabledIconColor setting.\nfunc (*DisabledResource) Content\r#\r\rfunc (res *DisabledResource) Content() []byte Content returns the disabled style content of the correct resource for the current theme\nfunc (*DisabledResource) Name\r#\r\rfunc (res *DisabledResource) Name() string Name returns the resource source name prefixed with disabled_ (used for caching)\n"},{"id":234,"href":"/docs/api/theme/errorthemedresource/","title":"theme.ErrorThemedResource","section":"theme","content":"theme.ErrorThemedResource\r#\r\r import \u0026#34;fyne.io/fyne/v2/theme\u0026#34; Usage\r#\r\rtype ErrorThemedResource\r#\r\rtype ErrorThemedResource struct { } ErrorThemedResource is a resource wrapper that will return a version of the resource with the main color changed to indicate an error.\nfunc NewErrorThemedResource\r#\r\rfunc NewErrorThemedResource(orig fyne.Resource) *ErrorThemedResource NewErrorThemedResource creates a resource that adapts to the error color for the current theme.\nfunc (*ErrorThemedResource) Content\r#\r\rfunc (res *ErrorThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current background color.\nfunc (*ErrorThemedResource) Name\r#\r\rfunc (res *ErrorThemedResource) Name() string Name returns the underlying resource name (used for caching).\nfunc (*ErrorThemedResource) Original\r#\r\rfunc (res *ErrorThemedResource) Original() fyne.Resource Original returns the underlying resource that this error themed resource was adapted from\n"},{"id":235,"href":"/docs/api/theme/invertedthemedresource/","title":"theme.InvertedThemedResource","section":"theme","content":"theme.InvertedThemedResource\r#\r\r import \u0026#34;fyne.io/fyne/v2/theme\u0026#34; Usage\r#\r\rtype InvertedThemedResource\r#\r\rtype InvertedThemedResource struct { } InvertedThemedResource is a resource wrapper that will return a version of the resource with the main color changed for use over highlighted elements.\nfunc NewInvertedThemedResource\r#\r\rfunc NewInvertedThemedResource(orig fyne.Resource) *InvertedThemedResource NewInvertedThemedResource creates a resource that adapts to the current theme for use over highlighted elements.\nfunc (*InvertedThemedResource) Content\r#\r\rfunc (res *InvertedThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current background color.\nfunc (*InvertedThemedResource) Name\r#\r\rfunc (res *InvertedThemedResource) Name() string Name returns the underlying resource name (used for caching).\nfunc (*InvertedThemedResource) Original\r#\r\rfunc (res *InvertedThemedResource) Original() fyne.Resource Original returns the underlying resource that this inverted themed resource was adapted from\n"},{"id":236,"href":"/docs/api/theme/primarythemedresource/","title":"theme.PrimaryThemedResource","section":"theme","content":"theme.PrimaryThemedResource\r#\r\r import \u0026#34;fyne.io/fyne/v2/theme\u0026#34; Usage\r#\r\rtype PrimaryThemedResource\r#\r\rtype PrimaryThemedResource struct { } PrimaryThemedResource is a resource wrapper that will return a version of the resource with the main color changed to the theme primary color.\nfunc NewPrimaryThemedResource\r#\r\rfunc NewPrimaryThemedResource(orig fyne.Resource) *PrimaryThemedResource NewPrimaryThemedResource creates a resource that adapts to the primary color for the current theme.\nfunc (*PrimaryThemedResource) Content\r#\r\rfunc (res *PrimaryThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current background color.\nfunc (*PrimaryThemedResource) Name\r#\r\rfunc (res *PrimaryThemedResource) Name() string Name returns the underlying resource name (used for caching).\nfunc (*PrimaryThemedResource) Original\r#\r\rfunc (res *PrimaryThemedResource) Original() fyne.Resource Original returns the underlying resource that this primary themed resource was adapted from\n"},{"id":237,"href":"/docs/api/theme/themedresource/","title":"theme.ThemedResource","section":"theme","content":"theme.ThemedResource\r#\r\r import \u0026#34;fyne.io/fyne/v2/theme\u0026#34; Usage\r#\r\rtype ThemedResource\r#\r\rtype ThemedResource struct { } ThemedResource is a resource wrapper that will return a version of the resource with the main color changed for the currently selected theme.\nfunc NewThemedResource\r#\r\rfunc NewThemedResource(src fyne.Resource) *ThemedResource NewThemedResource creates a resource that adapts to the current theme setting.\nfunc (*ThemedResource) Content\r#\r\rfunc (res *ThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current text color.\nfunc (*ThemedResource) Error\r#\r\rfunc (res *ThemedResource) Error() *ErrorThemedResource Error returns a different resource for indicating an error.\nfunc (*ThemedResource) Name\r#\r\rfunc (res *ThemedResource) Name() string Name returns the underlying resource name (used for caching).\n"},{"id":238,"href":"/docs/api/upgrading/","title":"Upgrading to v2.1","section":"Api document","content":"The 2.1 release is fully backward compatible with 2.0.4 and earlier, so upgrading is as simple as updating the version of code you compile with. This is different depending on whether or not you use go modules.\nModules\r#\r\rIf your project has a go.mod file then you can edit the require line to use version v2.1.0, or you can execute the following command inside the directory:\ngo get fyne.io/fyne/v2@v2.1.0 The next time you build or run your app it will be using the 2.1 release\nGOPATH\r#\r\rIf you are not using modules then you will need to update the Fyne checkout in your go source code. To do this execute the following command:\ngo get -u fyne.io/fyne/v2 Any apps without a module file will now use the 2.1 release.\nFyne command\r#\r\rAfter a major release of the Fyne toolkit it is advisable to upgrade the fyne commandline tool as well. This will bring new functionality and packaging options, and may be required to deliver certain bug fixes. You can make the upgrade by using the go get command similarly to above:\ngo get -u fyne.io/fyne/v2/cmd/fyne After that completes, check you have the new version installed by running fyne version.\nChanges\r#\r\rAlthough this release is backwards compatible so your code will compile and run as expected, there are some changes which you may notice.\n Focusable items are no longer focused automatically on Tap - you need to handle this in a Tapped function, calling: Canvas.Focus(myObj) if it should gain focus Padding in the collection widgets (List, Table, Tree) has been removed, so cells will be the size of the containing widget theme.LightTheme() and DarkTheme() have been deprecated, in preference to theme.DefaultTheme() if you require overriding user choice you can create a custom theme that extends DefaultTheme and in your Color method delegate to the DefaultTheme.Color and pass the variant you require fyne.TextStyle now has a TabWidth field, if you use unnamed struct initialisation this may require changes in your code  "},{"id":239,"href":"/docs/api/data/validation/","title":"validation","section":"data","content":"validation\r#\r\r import \u0026#34;fyne.io/fyne/v2/data/validation\u0026#34; Package validation provides validation for data inside widgets\nUsage\r#\r\rfunc NewRegexp\r#\r\rfunc NewRegexp(regexpstr, reason string) fyne.StringValidator NewRegexp creates a new validator that uses regular expression parsing. The validator will return nil if valid, otherwise returns an error with a reason text.\nSince: \r1.4\rfunc NewTime\r#\r\rfunc NewTime(format string) fyne.StringValidator NewTime creates a new validator that verifies times using time.Parse. The validator will return nil if valid, otherwise returns an error with a reason text. The reference time for the format: Mon Jan 2 15:04:05 -0700 MST 2006. See time.Parse() for more information about the reference time: https://pkg.go.dev/time#Parse\nSince: \r2.1\rtypes\r#\r\r"},{"id":240,"href":"/docs/api/widget/","title":"widget","section":"Api document","content":"widget\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Package widget defines the UI widgets within the Fyne toolkit\nUsage\r#\r\rvar ( \t// RichTextStyleBlockquote represents a quote presented in an indented block. \t// \t// Since: 2.1 \tRichTextStyleBlockquote = RichTextStyle{ \tColorName: theme.ColorNameForeground, \tInline: false, \tSizeName: theme.SizeNameText, \tTextStyle: fyne.TextStyle{Italic: true}, \t} \t// RichTextStyleCodeBlock represents a code blog segment. \t// \t// Since: 2.1 \tRichTextStyleCodeBlock = RichTextStyle{ \tColorName: theme.ColorNameForeground, \tInline: false, \tSizeName: theme.SizeNameText, \tTextStyle: fyne.TextStyle{Monospace: true}, \t} \t// RichTextStyleCodeInline represents an inline code segment. \t// \t// Since: 2.1 \tRichTextStyleCodeInline = RichTextStyle{ \tColorName: theme.ColorNameForeground, \tInline: true, \tSizeName: theme.SizeNameText, \tTextStyle: fyne.TextStyle{Monospace: true}, \t} \t// RichTextStyleEmphasis represents regular text with emphasis. \t// \t// Since: 2.1 \tRichTextStyleEmphasis = RichTextStyle{ \tColorName: theme.ColorNameForeground, \tInline: true, \tSizeName: theme.SizeNameText, \tTextStyle: fyne.TextStyle{Italic: true}, \t} \t// RichTextStyleHeading represents a heading text that stands on its own line. \t// \t// Since: 2.1 \tRichTextStyleHeading = RichTextStyle{ \tColorName: theme.ColorNameForeground, \tInline: false, \tSizeName: theme.SizeNameHeadingText, \tTextStyle: fyne.TextStyle{Bold: true}, \t} \t// RichTextStyleInline represents standard text that can be surrounded by other elements. \t// \t// Since: 2.1 \tRichTextStyleInline = RichTextStyle{ \tColorName: theme.ColorNameForeground, \tInline: true, \tSizeName: theme.SizeNameText, \t} \t// RichTextStyleParagraph represents standard text that should appear separate from other text. \t// \t// Since: 2.1 \tRichTextStyleParagraph = RichTextStyle{ \tColorName: theme.ColorNameForeground, \tInline: false, \tSizeName: theme.SizeNameText, \t} \t// RichTextStylePassword represents standard sized text where the characters are obscured. \t// \t// Since: 2.1 \tRichTextStylePassword = RichTextStyle{ \tColorName: theme.ColorNameForeground, \tInline: true, \tSizeName: theme.SizeNameText, \t} \t// RichTextStyleStrong represents regular text with a strong emphasis. \t// \t// Since: 2.1 \tRichTextStyleStrong = RichTextStyle{ \tColorName: theme.ColorNameForeground, \tInline: true, \tSizeName: theme.SizeNameText, \tTextStyle: fyne.TextStyle{Bold: true}, \t} \t// RichTextStyleSubHeading represents a sub-heading text that stands on its own line. \t// \t// Since: 2.1 \tRichTextStyleSubHeading = RichTextStyle{ \tColorName: theme.ColorNameForeground, \tInline: false, \tSizeName: theme.SizeNameSubHeadingText, \tTextStyle: fyne.TextStyle{Bold: true}, \t} ) func NewSimpleRenderer\r#\r\rfunc NewSimpleRenderer(object fyne.CanvasObject) fyne.WidgetRenderer NewSimpleRenderer creates a new SimpleRenderer to render a widget using a single fyne.CanvasObject.\nSince: \r2.1\rfunc ShowModalPopUp\r#\r\rfunc ShowModalPopUp(content fyne.CanvasObject, canvas fyne.Canvas) ShowModalPopUp creates a new popUp for the specified content and displays it on the passed canvas. A modal PopUp blocks interactions with underlying elements, covered with a semi-transparent overlay.\nfunc ShowPopUp\r#\r\rfunc ShowPopUp(content fyne.CanvasObject, canvas fyne.Canvas) ShowPopUp creates a new popUp for the specified content and displays it on the passed canvas.\nfunc ShowPopUpAtPosition\r#\r\rfunc ShowPopUpAtPosition(content fyne.CanvasObject, canvas fyne.Canvas, pos fyne.Position) ShowPopUpAtPosition creates a new popUp for the specified content at the specified absolute position. It will then display the popup on the passed canvas.\nfunc ShowPopUpMenuAtPosition\r#\r\rfunc ShowPopUpMenuAtPosition(menu *fyne.Menu, c fyne.Canvas, pos fyne.Position) ShowPopUpMenuAtPosition creates a PopUp menu populated with items from the passed menu structure. It will automatically be positioned at the provided location and shown as an overlay on the specified canvas.\ntypes\r#\r\r \rAccordion \rAccordionItem \rBaseWidget \rButton \rButtonAlign \rButtonIconPlacement \rButtonImportance \rButtonStyle \rCard \rCheck \rCheckGroup \rCustomTextGridStyle \rDisableableWidget \rEntry \rFileIcon \rForm \rFormItem \rHyperlink \rHyperlinkSegment \rIcon \rLabel \rList \rListItemID \rListSegment \rMenu \rOrientation \rParagraphSegment \rPopUp \rPopUpMenu \rProgressBar \rProgressBarInfinite \rRadioGroup \rRichText \rRichTextBlock \rRichTextSegment \rRichTextStyle \rSelect \rSelectEntry \rSeparator \rSeparatorSegment \rSlider \rTable \rTableCellID \rTextGrid \rTextGridCell \rTextGridRow \rTextGridStyle \rTextSegment \rToolbar \rToolbarAction \rToolbarItem \rToolbarSeparator \rToolbarSpacer \rTree \rTreeNodeID  "},{"id":241,"href":"/docs/api/widget/accordion/","title":"widget.Accordion","section":"widget","content":"widget.Accordion\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Accordion\r#\r\rtype Accordion struct { \tBaseWidget \tItems []*AccordionItem \tMultiOpen bool } Accordion displays a list of AccordionItems. Each item is represented by a button that reveals a detailed view when tapped.\nfunc NewAccordion\r#\r\rfunc NewAccordion(items ...*AccordionItem) *Accordion NewAccordion creates a new accordion widget.\nfunc (*Accordion) Append\r#\r\rfunc (a *Accordion) Append(item *AccordionItem) Append adds the given item to this Accordion.\nfunc (*Accordion) Close\r#\r\rfunc (a *Accordion) Close(index int) Close collapses the item at the given index.\nfunc (*Accordion) CloseAll\r#\r\rfunc (a *Accordion) CloseAll() CloseAll collapses all items.\nfunc (*Accordion) CreateRenderer\r#\r\rfunc (a *Accordion) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Accordion) MinSize\r#\r\rfunc (a *Accordion) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below.\nfunc (*Accordion) Open\r#\r\rfunc (a *Accordion) Open(index int) Open expands the item at the given index.\nfunc (*Accordion) OpenAll\r#\r\rfunc (a *Accordion) OpenAll() OpenAll expands all items.\nfunc (*Accordion) Remove\r#\r\rfunc (a *Accordion) Remove(item *AccordionItem) Remove deletes the given item from this Accordion.\nfunc (*Accordion) RemoveIndex\r#\r\rfunc (a *Accordion) RemoveIndex(index int) RemoveIndex deletes the item at the given index from this Accordion.\n"},{"id":242,"href":"/docs/api/widget/accordionitem/","title":"widget.AccordionItem","section":"widget","content":"widget.AccordionItem\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype AccordionItem\r#\r\rtype AccordionItem struct { \tTitle string \tDetail fyne.CanvasObject \tOpen bool } AccordionItem represents a single item in an Accordion.\nfunc NewAccordionItem\r#\r\rfunc NewAccordionItem(title string, detail fyne.CanvasObject) *AccordionItem NewAccordionItem creates a new item for an Accordion.\n"},{"id":243,"href":"/docs/api/widget/basewidget/","title":"widget.BaseWidget","section":"widget","content":"widget.BaseWidget\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype BaseWidget\r#\r\rtype BaseWidget struct { \tHidden bool } BaseWidget provides a helper that handles basic widget behaviours.\nfunc (*BaseWidget) ExtendBaseWidget\r#\r\rfunc (w *BaseWidget) ExtendBaseWidget(wid fyne.Widget) ExtendBaseWidget is used by an extending widget to make use of BaseWidget functionality.\nfunc (*BaseWidget) Hide\r#\r\rfunc (w *BaseWidget) Hide() Hide this widget so it is no longer visible\nfunc (*BaseWidget) MinSize\r#\r\rfunc (w *BaseWidget) MinSize() fyne.Size MinSize for the widget - it should never be resized below this value.\nfunc (*BaseWidget) Move\r#\r\rfunc (w *BaseWidget) Move(pos fyne.Position) Move the widget to a new position, relative to its parent. Note this should not be used if the widget is being managed by a Layout within a Container.\nfunc (*BaseWidget) Position\r#\r\rfunc (w *BaseWidget) Position() fyne.Position Position gets the current position of this widget, relative to its parent.\nfunc (*BaseWidget) Refresh\r#\r\rfunc (w *BaseWidget) Refresh() Refresh causes this widget to be redrawn in it\u0026rsquo;s current state\nfunc (*BaseWidget) Resize\r#\r\rfunc (w *BaseWidget) Resize(size fyne.Size) Resize sets a new size for a widget. Note this should not be used if the widget is being managed by a Layout within a Container.\nfunc (*BaseWidget) Show\r#\r\rfunc (w *BaseWidget) Show() Show this widget so it becomes visible\nfunc (*BaseWidget) Size\r#\r\rfunc (w *BaseWidget) Size() fyne.Size Size gets the current size of this widget.\nfunc (*BaseWidget) Visible\r#\r\rfunc (w *BaseWidget) Visible() bool Visible returns whether or not this widget should be visible. Note that this may not mean it is currently visible if a parent has been hidden.\n"},{"id":244,"href":"/docs/api/widget/button/","title":"widget.Button","section":"widget","content":"widget.Button\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Button\r#\r\rtype Button struct { \tDisableableWidget \tText string \tIcon fyne.Resource \t// Specify how prominent the button should be, High will highlight the button and Low will remove some decoration. \t// \t// Since: 1.4 \tImportance ButtonImportance \tAlignment ButtonAlign \tIconPlacement ButtonIconPlacement  \tOnTapped func() `json:\u0026#34;-\u0026#34;` } Button widget has a text label and triggers an event func when clicked\nfunc NewButton\r#\r\rfunc NewButton(label string, tapped func()) *Button NewButton creates a new button widget with the set label and tap handler\nfunc NewButtonWithIcon\r#\r\rfunc NewButtonWithIcon(label string, icon fyne.Resource, tapped func()) *Button NewButtonWithIcon creates a new button widget with the specified label, themed icon and tap handler\nfunc (*Button) CreateRenderer\r#\r\rfunc (b *Button) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Button) Cursor\r#\r\rfunc (b *Button) Cursor() desktop.Cursor Cursor returns the cursor type of this widget\nfunc (*Button) FocusGained\r#\r\rfunc (b *Button) FocusGained() FocusGained is a hook called by the focus handling logic after this object gained the focus.\nfunc (*Button) FocusLost\r#\r\rfunc (b *Button) FocusLost() FocusLost is a hook called by the focus handling logic after this object lost the focus.\nfunc (*Button) MinSize\r#\r\rfunc (b *Button) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*Button) MouseIn\r#\r\rfunc (b *Button) MouseIn(*desktop.MouseEvent) MouseIn is called when a desktop pointer enters the widget\nfunc (*Button) MouseMoved\r#\r\rfunc (b *Button) MouseMoved(*desktop.MouseEvent) MouseMoved is called when a desktop pointer hovers over the widget\nfunc (*Button) MouseOut\r#\r\rfunc (b *Button) MouseOut() MouseOut is called when a desktop pointer exits the widget\nfunc (*Button) SetIcon\r#\r\rfunc (b *Button) SetIcon(icon fyne.Resource) SetIcon updates the icon on a label - pass nil to hide an icon\nfunc (*Button) SetText\r#\r\rfunc (b *Button) SetText(text string) SetText allows the button label to be changed\nfunc (*Button) Tapped\r#\r\rfunc (b *Button) Tapped(*fyne.PointEvent) Tapped is called when a pointer tapped event is captured and triggers any tap handler\nfunc (*Button) TypedKey\r#\r\rfunc (b *Button) TypedKey(ev *fyne.KeyEvent) TypedKey is a hook called by the input handling logic on key events if this object is focused.\nfunc (*Button) TypedRune\r#\r\rfunc (b *Button) TypedRune(rune) TypedRune is a hook called by the input handling logic on text input events if this object is focused.\n"},{"id":245,"href":"/docs/api/widget/buttonalign/","title":"widget.ButtonAlign","section":"widget","content":"widget.ButtonAlign\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ButtonAlign\r#\r\rtype ButtonAlign int ButtonAlign represents the horizontal alignment of a button.\nconst ( \t// ButtonAlignCenter aligns the icon and the text centrally. \tButtonAlignCenter ButtonAlign = iota \t// ButtonAlignLeading aligns the icon and the text with the leading edge. \tButtonAlignLeading \t// ButtonAlignTrailing aligns the icon and the text with the trailing edge. \tButtonAlignTrailing ) "},{"id":246,"href":"/docs/api/widget/buttoniconplacement/","title":"widget.ButtonIconPlacement","section":"widget","content":"widget.ButtonIconPlacement\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ButtonIconPlacement\r#\r\rtype ButtonIconPlacement int ButtonIconPlacement represents the ordering of icon \u0026amp; text within a button.\nconst ( \t// ButtonIconLeadingText aligns the icon on the leading edge of the text. \tButtonIconLeadingText ButtonIconPlacement = iota \t// ButtonIconTrailingText aligns the icon on the trailing edge of the text. \tButtonIconTrailingText ) "},{"id":247,"href":"/docs/api/widget/buttonimportance/","title":"widget.ButtonImportance","section":"widget","content":"widget.ButtonImportance\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ButtonImportance\r#\r\rtype ButtonImportance int ButtonImportance represents how prominent the button should appear\nSince: \r1.4\rconst ( \t// MediumImportance applies a standard appearance. \tMediumImportance ButtonImportance = iota \t// HighImportance applies a prominent appearance. \tHighImportance \t// LowImportance applies a subtle appearance. \tLowImportance ) "},{"id":248,"href":"/docs/api/widget/buttonstyle/","title":"widget.ButtonStyle","section":"widget","content":"widget.ButtonStyle\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ButtonStyle\r#\r\rtype ButtonStyle int ButtonStyle determines the behaviour and rendering of a button.\n"},{"id":249,"href":"/docs/api/widget/card/","title":"widget.Card","section":"widget","content":"widget.Card\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Card\r#\r\rtype Card struct { \tBaseWidget \tTitle, Subtitle string \tImage *canvas.Image \tContent fyne.CanvasObject } Card widget groups title, subtitle with content and a header image\nSince: \r1.4\rfunc NewCard\r#\r\rfunc NewCard(title, subtitle string, content fyne.CanvasObject) *Card NewCard creates a new card widget with the specified title, subtitle and content (all optional).\nSince: \r1.4\rfunc (*Card) CreateRenderer\r#\r\rfunc (c *Card) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Card) MinSize\r#\r\rfunc (c *Card) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*Card) SetContent\r#\r\rfunc (c *Card) SetContent(obj fyne.CanvasObject) SetContent changes the body of this card to have the specified content.\nfunc (*Card) SetImage\r#\r\rfunc (c *Card) SetImage(img *canvas.Image) SetImage changes the image displayed above the title for this card.\nfunc (*Card) SetSubTitle\r#\r\rfunc (c *Card) SetSubTitle(text string) SetSubTitle updates the secondary title for this card.\nfunc (*Card) SetTitle\r#\r\rfunc (c *Card) SetTitle(text string) SetTitle updates the main title for this card.\n"},{"id":250,"href":"/docs/api/widget/check/","title":"widget.Check","section":"widget","content":"widget.Check\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Check\r#\r\rtype Check struct { \tDisableableWidget \tText string \tChecked bool  \tOnChanged func(bool) `json:\u0026#34;-\u0026#34;` } Check widget has a text label and a checked (or unchecked) icon and triggers an event func when toggled\nfunc NewCheck\r#\r\rfunc NewCheck(label string, changed func(bool)) *Check NewCheck creates a new check widget with the set label and change handler\nfunc NewCheckWithData\r#\r\rfunc NewCheckWithData(label string, data binding.Bool) *Check NewCheckWithData returns a check widget connected with the specified data source.\nSince: \r2.0\rfunc (*Check) Bind\r#\r\rfunc (c *Check) Bind(data binding.Bool) Bind connects the specified data source to this Check. The current value will be displayed and any changes in the data will cause the widget to update. User interactions with this Check will set the value into the data source.\nSince: \r2.0\rfunc (*Check) CreateRenderer\r#\r\rfunc (c *Check) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Check) FocusGained\r#\r\rfunc (c *Check) FocusGained() FocusGained is called when the Check has been given focus.\nfunc (*Check) FocusLost\r#\r\rfunc (c *Check) FocusLost() FocusLost is called when the Check has had focus removed.\nfunc (*Check) Hide\r#\r\rfunc (c *Check) Hide() Hide this widget, if it was previously visible\nfunc (*Check) MinSize\r#\r\rfunc (c *Check) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*Check) MouseIn\r#\r\rfunc (c *Check) MouseIn(*desktop.MouseEvent) MouseIn is called when a desktop pointer enters the widget\nfunc (*Check) MouseMoved\r#\r\rfunc (c *Check) MouseMoved(*desktop.MouseEvent) MouseMoved is called when a desktop pointer hovers over the widget\nfunc (*Check) MouseOut\r#\r\rfunc (c *Check) MouseOut() MouseOut is called when a desktop pointer exits the widget\nfunc (*Check) SetChecked\r#\r\rfunc (c *Check) SetChecked(checked bool) SetChecked sets the the checked state and refreshes widget\nfunc (*Check) Tapped\r#\r\rfunc (c *Check) Tapped(*fyne.PointEvent) Tapped is called when a pointer tapped event is captured and triggers any change handler\nfunc (*Check) TypedKey\r#\r\rfunc (c *Check) TypedKey(key *fyne.KeyEvent) TypedKey receives key input events when the Check is focused.\nfunc (*Check) TypedRune\r#\r\rfunc (c *Check) TypedRune(r rune) TypedRune receives text input events when the Check is focused.\nfunc (*Check) Unbind\r#\r\rfunc (c *Check) Unbind() Unbind disconnects any configured data source from this Check. The current value will remain at the last value of the data source.\nSince: \r2.0\r"},{"id":251,"href":"/docs/api/widget/checkgroup/","title":"widget.CheckGroup","section":"widget","content":"widget.CheckGroup\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype CheckGroup\r#\r\rtype CheckGroup struct { \tDisableableWidget \tHorizontal bool \tRequired bool \tOnChanged func([]string) `json:\u0026#34;-\u0026#34;` \tOptions []string \tSelected []string } CheckGroup widget has a list of text labels and checkbox icons next to each. Changing the selection (any number can be selected) will trigger the changed func.\nSince: \r2.1\rfunc NewCheckGroup\r#\r\rfunc NewCheckGroup(options []string, changed func([]string)) *CheckGroup NewCheckGroup creates a new check group widget with the set options and change handler\nSince: \r2.1\rfunc (*CheckGroup) Append\r#\r\rfunc (r *CheckGroup) Append(option string) Append adds a new option to the end of a CheckGroup widget.\nfunc (*CheckGroup) CreateRenderer\r#\r\rfunc (r *CheckGroup) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*CheckGroup) MinSize\r#\r\rfunc (r *CheckGroup) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*CheckGroup) Refresh\r#\r\rfunc (r *CheckGroup) Refresh() Refresh causes this widget to be redrawn in it\u0026rsquo;s current state.\nImplements: \rfyne.CanvasObject\rfunc (*CheckGroup) SetSelected\r#\r\rfunc (r *CheckGroup) SetSelected(options []string) SetSelected sets the checked options, it can be used to set a default option.\n"},{"id":252,"href":"/docs/api/widget/customtextgridstyle/","title":"widget.CustomTextGridStyle","section":"widget","content":"widget.CustomTextGridStyle\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype CustomTextGridStyle\r#\r\rtype CustomTextGridStyle struct { \tFGColor, BGColor color.Color } CustomTextGridStyle is a utility type for those not wanting to define their own style types.\nfunc (*CustomTextGridStyle) BackgroundColor\r#\r\rfunc (c *CustomTextGridStyle) BackgroundColor() color.Color BackgroundColor is the color a cell should use for the background.\nfunc (*CustomTextGridStyle) TextColor\r#\r\rfunc (c *CustomTextGridStyle) TextColor() color.Color TextColor is the color a cell should use for the text.\n"},{"id":253,"href":"/docs/api/widget/disableablewidget/","title":"widget.DisableableWidget","section":"widget","content":"widget.DisableableWidget\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype DisableableWidget\r#\r\rtype DisableableWidget struct { \tBaseWidget } DisableableWidget describes an extension to BaseWidget which can be disabled. Disabled widgets should have a visually distinct style when disabled, normally using theme.DisabledButtonColor.\nfunc (*DisableableWidget) Disable\r#\r\rfunc (w *DisableableWidget) Disable() Disable this widget so that it cannot be interacted with, updating any style appropriately.\nfunc (*DisableableWidget) Disabled\r#\r\rfunc (w *DisableableWidget) Disabled() bool Disabled returns true if this widget is currently disabled or false if it can currently be interacted with.\nfunc (*DisableableWidget) Enable\r#\r\rfunc (w *DisableableWidget) Enable() Enable this widget, updating any style or features appropriately.\n"},{"id":254,"href":"/docs/api/widget/entry/","title":"widget.Entry","section":"widget","content":"widget.Entry\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Entry\r#\r\rtype Entry struct { \tDisableableWidget  \tText string \t// Since: 2.0 \tTextStyle fyne.TextStyle \tPlaceHolder string \tOnChanged func(string) `json:\u0026#34;-\u0026#34;` \t// Since: 2.0 \tOnSubmitted func(string) `json:\u0026#34;-\u0026#34;` \tPassword bool \tMultiLine bool \tWrapping fyne.TextWrap  \t// Set a validator that this entry will check against \t// Since: 1.4 \tValidator fyne.StringValidator `json:\u0026#34;-\u0026#34;`  \tCursorRow, CursorColumn int \tOnCursorChanged func() `json:\u0026#34;-\u0026#34;`  \t// ActionItem is a small item which is displayed at the outer right of the entry (like a password revealer) \tActionItem fyne.CanvasObject `json:\u0026#34;-\u0026#34;` } Entry widget allows simple text to be input when focused.\nfunc NewEntry\r#\r\rfunc NewEntry() *Entry NewEntry creates a new single line entry widget.\nfunc NewEntryWithData\r#\r\rfunc NewEntryWithData(data binding.String) *Entry NewEntryWithData returns an Entry widget connected to the specified data source.\nSince: \r2.0\rfunc NewMultiLineEntry\r#\r\rfunc NewMultiLineEntry() *Entry NewMultiLineEntry creates a new entry that allows multiple lines\nfunc NewPasswordEntry\r#\r\rfunc NewPasswordEntry() *Entry NewPasswordEntry creates a new entry password widget\nfunc (*Entry) AcceptsTab\r#\r\rfunc (e *Entry) AcceptsTab() bool AcceptsTab returns if Entry accepts the Tab key or not.\nImplements: \rfyne.Tabbable\rSince: \r2.1\rfunc (*Entry) Bind\r#\r\rfunc (e *Entry) Bind(data binding.String) Bind connects the specified data source to this Entry. The current value will be displayed and any changes in the data will cause the widget to update. User interactions with this Entry will set the value into the data source.\nSince: \r2.0\rfunc (*Entry) CreateRenderer\r#\r\rfunc (e *Entry) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nImplements: \rfyne.Widget\rfunc (*Entry) Cursor\r#\r\rfunc (e *Entry) Cursor() desktop.Cursor Cursor returns the cursor type of this widget\nImplements: \rdesktop.Cursorable\rfunc (*Entry) Disable\r#\r\rfunc (e *Entry) Disable() Disable this widget so that it cannot be interacted with, updating any style appropriately.\nImplements: \rfyne.Disableable\rfunc (*Entry) Disabled\r#\r\rfunc (e *Entry) Disabled() bool Disabled returns whether the entry is disabled or read-only.\nImplements: \rfyne.Disableable\rfunc (*Entry) DoubleTapped\r#\r\rfunc (e *Entry) DoubleTapped(p *fyne.PointEvent) DoubleTapped is called when this entry has been double tapped so we should select text below the pointer\nImplements: \rfyne.DoubleTappable\rfunc (*Entry) DragEnd\r#\r\rfunc (e *Entry) DragEnd() DragEnd is called at end of a drag event.\nImplements: \rfyne.Draggable\rfunc (*Entry) Dragged\r#\r\rfunc (e *Entry) Dragged(d *fyne.DragEvent) Dragged is called when the pointer moves while a button is held down. It updates the selection accordingly.\nImplements: \rfyne.Draggable\rfunc (*Entry) Enable\r#\r\rfunc (e *Entry) Enable() Enable this widget, updating any style or features appropriately.\nImplements: \rfyne.Disableable\rfunc (*Entry) ExtendBaseWidget\r#\r\rfunc (e *Entry) ExtendBaseWidget(wid fyne.Widget) ExtendBaseWidget is used by an extending widget to make use of BaseWidget functionality.\nfunc (*Entry) FocusGained\r#\r\rfunc (e *Entry) FocusGained() FocusGained is called when the Entry has been given focus.\nImplements: \rfyne.Focusable\rfunc (*Entry) FocusLost\r#\r\rfunc (e *Entry) FocusLost() FocusLost is called when the Entry has had focus removed.\nImplements: \rfyne.Focusable\rfunc (*Entry) Hide\r#\r\rfunc (e *Entry) Hide() Hide hides the entry.\nImplements: \rfyne.Widget\rfunc (*Entry) KeyDown\r#\r\rfunc (e *Entry) KeyDown(key *fyne.KeyEvent) KeyDown handler for keypress events - used to store shift modifier state for text selection\nImplements: \rdesktop.Keyable\rfunc (*Entry) KeyUp\r#\r\rfunc (e *Entry) KeyUp(key *fyne.KeyEvent) KeyUp handler for key release events - used to reset shift modifier state for text selection\nImplements: \rdesktop.Keyable\rfunc (*Entry) Keyboard\r#\r\rfunc (e *Entry) Keyboard() mobile.KeyboardType Keyboard implements the Keyboardable interface\nImplements: \rmobile.Keyboardable\rfunc (*Entry) MinSize\r#\r\rfunc (e *Entry) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below.\nImplements: \rfyne.Widget\rfunc (*Entry) MouseDown\r#\r\rfunc (e *Entry) MouseDown(m *desktop.MouseEvent) MouseDown called on mouse click, this triggers a mouse click which can move the cursor, update the existing selection (if shift is held), or start a selection dragging operation.\nImplements: \rdesktop.Mouseable\rfunc (*Entry) MouseUp\r#\r\rfunc (e *Entry) MouseUp(m *desktop.MouseEvent) MouseUp called on mouse release If a mouse drag event has completed then check to see if it has resulted in an empty selection, if so, and if a text select key isn\u0026rsquo;t held, then disable selecting\nImplements: \rdesktop.Mouseable\rfunc (*Entry) SelectedText\r#\r\rfunc (e *Entry) SelectedText() string SelectedText returns the text currently selected in this Entry. If there is no selection it will return the empty string.\nfunc (*Entry) SetOnValidationChanged\r#\r\rfunc (e *Entry) SetOnValidationChanged(callback func(error)) SetOnValidationChanged is intended for parent widgets or containers to hook into the validation. The function might be overwritten by a parent that cares about child validation (e.g. widget.Form).\nfunc (*Entry) SetPlaceHolder\r#\r\rfunc (e *Entry) SetPlaceHolder(text string) SetPlaceHolder sets the text that will be displayed if the entry is otherwise empty\nfunc (*Entry) SetText\r#\r\rfunc (e *Entry) SetText(text string) SetText manually sets the text of the Entry to the given text value.\nfunc (*Entry) SetValidationError\r#\r\rfunc (e *Entry) SetValidationError(err error) SetValidationError manually updates the validation status until the next input change\nfunc (*Entry) Tapped\r#\r\rfunc (e *Entry) Tapped(ev *fyne.PointEvent) Tapped is called when this entry has been tapped. We update the cursor position in device-specific callbacks (MouseDown() and TouchDown()).\nImplements: \rfyne.Tappable\rfunc (*Entry) TappedSecondary\r#\r\rfunc (e *Entry) TappedSecondary(pe *fyne.PointEvent) TappedSecondary is called when right or alternative tap is invoked.\nOpens the PopUpMenu with Paste item to paste text from the clipboard.\nImplements: \rfyne.SecondaryTappable\rfunc (*Entry) TouchCancel\r#\r\rfunc (e *Entry) TouchCancel(*mobile.TouchEvent) TouchCancel is called when this entry gets a touch cancel event on mobile device (app was removed from focus).\nSince: \r2.1\rImplements: \rmobile.Touchable\rfunc (*Entry) TouchDown\r#\r\rfunc (e *Entry) TouchDown(ev *mobile.TouchEvent) TouchDown is called when this entry gets a touch down event on mobile device, we ensure we have focus.\nSince: \r2.1\rImplements: \rmobile.Touchable\rfunc (*Entry) TouchUp\r#\r\rfunc (e *Entry) TouchUp(*mobile.TouchEvent) TouchUp is called when this entry gets a touch up event on mobile device.\nSince: \r2.1\rImplements: \rmobile.Touchable\rfunc (*Entry) TypedKey\r#\r\rfunc (e *Entry) TypedKey(key *fyne.KeyEvent) TypedKey receives key input events when the Entry widget is focused.\nImplements: \rfyne.Focusable\rfunc (*Entry) TypedRune\r#\r\rfunc (e *Entry) TypedRune(r rune) TypedRune receives text input events when the Entry widget is focused.\nImplements: \rfyne.Focusable\rfunc (*Entry) TypedShortcut\r#\r\rfunc (e *Entry) TypedShortcut(shortcut fyne.Shortcut) TypedShortcut implements the Shortcutable interface\nImplements: \rfyne.Shortcutable\rfunc (*Entry) Unbind\r#\r\rfunc (e *Entry) Unbind() Unbind disconnects any configured data source from this Entry. The current value will remain at the last value of the data source.\nSince: \r2.0\rfunc (*Entry) Validate\r#\r\rfunc (e *Entry) Validate() error Validate validates the current text in the widget\n"},{"id":255,"href":"/docs/api/widget/fileicon/","title":"widget.FileIcon","section":"widget","content":"widget.FileIcon\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype FileIcon\r#\r\rtype FileIcon struct { \tBaseWidget  \tSelected bool \tURI fyne.URI } FileIcon is an adaption of widget.Icon for showing files and folders\nSince: \r1.4\rfunc NewFileIcon\r#\r\rfunc NewFileIcon(uri fyne.URI) *FileIcon NewFileIcon takes a filepath and creates an icon with an overlaid label using the detected mimetype and extension\nSince: \r1.4\rfunc (*FileIcon) CreateRenderer\r#\r\rfunc (i *FileIcon) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*FileIcon) MinSize\r#\r\rfunc (i *FileIcon) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*FileIcon) SetSelected\r#\r\rfunc (i *FileIcon) SetSelected(selected bool) SetSelected makes the file look like it is selected.\nDeprecated: Selection is now handled externally.\rfunc (*FileIcon) SetURI\r#\r\rfunc (i *FileIcon) SetURI(uri fyne.URI) SetURI changes the URI and makes the icon reflect a different file\n"},{"id":256,"href":"/docs/api/widget/form/","title":"widget.Form","section":"widget","content":"widget.Form\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Form\r#\r\rtype Form struct { \tBaseWidget  \tItems []*FormItem \tOnSubmit func() \tOnCancel func() \tSubmitText string \tCancelText string } Form widget is two column grid where each row has a label and a widget (usually an input). The last row of the grid will contain the appropriate form control buttons if any should be shown. Setting OnSubmit will set the submit button to be visible and call back the function when tapped. Setting OnCancel will do the same for a cancel button. If you change OnSubmit/OnCancel after the form is created and rendered, you need to call Refresh() to update the form with the correct buttons. Setting OnSubmit/OnCancel to nil will remove the buttons.\nfunc NewForm\r#\r\rfunc NewForm(items ...*FormItem) *Form NewForm creates a new form widget with the specified rows of form items and (if any of them should be shown) a form controls row at the bottom\nfunc (*Form) Append\r#\r\rfunc (f *Form) Append(text string, widget fyne.CanvasObject) Append adds a new row to the form, using the text as a label next to the specified Widget\nfunc (*Form) AppendItem\r#\r\rfunc (f *Form) AppendItem(item *FormItem) AppendItem adds the specified row to the end of the Form\nfunc (*Form) CreateRenderer\r#\r\rfunc (f *Form) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Form) Disable\r#\r\rfunc (f *Form) Disable() Disable disables submitting this form.\nSince: \r2.1\rfunc (*Form) Disabled\r#\r\rfunc (f *Form) Disabled() bool Disabled returns whether submitting the form is disabled. Note that, if the form fails validation, the submit button may be disabled even if this method returns true.\nSince: \r2.1\rfunc (*Form) Enable\r#\r\rfunc (f *Form) Enable() Enable enables submitting this form.\nSince: \r2.1\rfunc (*Form) MinSize\r#\r\rfunc (f *Form) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*Form) Refresh\r#\r\rfunc (f *Form) Refresh() Refresh updates the widget state when requested.\n"},{"id":257,"href":"/docs/api/widget/formitem/","title":"widget.FormItem","section":"widget","content":"widget.FormItem\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype FormItem\r#\r\rtype FormItem struct { \tText string \tWidget fyne.CanvasObject  \t// Since: 2.0 \tHintText string } FormItem provides the details for a row in a form\nfunc NewFormItem\r#\r\rfunc NewFormItem(text string, widget fyne.CanvasObject) *FormItem NewFormItem creates a new form item with the specified label text and input widget\n"},{"id":258,"href":"/docs/api/widget/hyperlink/","title":"widget.Hyperlink","section":"widget","content":"widget.Hyperlink\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Hyperlink\r#\r\rtype Hyperlink struct { \tBaseWidget \tText string \tURL *url.URL \tAlignment fyne.TextAlign // The alignment of the Text \tWrapping fyne.TextWrap // The wrapping of the Text \tTextStyle fyne.TextStyle // The style of the hyperlink text } Hyperlink widget is a text component with appropriate padding and layout. When clicked, the default web browser should open with a URL\nfunc NewHyperlink\r#\r\rfunc NewHyperlink(text string, url *url.URL) *Hyperlink NewHyperlink creates a new hyperlink widget with the set text content\nfunc NewHyperlinkWithStyle\r#\r\rfunc NewHyperlinkWithStyle(text string, url *url.URL, alignment fyne.TextAlign, style fyne.TextStyle) *Hyperlink NewHyperlinkWithStyle creates a new hyperlink widget with the set text content\nfunc (*Hyperlink) CreateRenderer\r#\r\rfunc (hl *Hyperlink) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Hyperlink) Cursor\r#\r\rfunc (hl *Hyperlink) Cursor() desktop.Cursor Cursor returns the cursor type of this widget\nfunc (*Hyperlink) FocusGained\r#\r\rfunc (hl *Hyperlink) FocusGained() FocusGained is a hook called by the focus handling logic after this object gained the focus.\nfunc (*Hyperlink) FocusLost\r#\r\rfunc (hl *Hyperlink) FocusLost() FocusLost is a hook called by the focus handling logic after this object lost the focus.\nfunc (*Hyperlink) MinSize\r#\r\rfunc (hl *Hyperlink) MinSize() fyne.Size MinSize returns the smallest size this widget can shrink to\nfunc (*Hyperlink) MouseIn\r#\r\rfunc (hl *Hyperlink) MouseIn(*desktop.MouseEvent) MouseIn is a hook that is called if the mouse pointer enters the element.\nfunc (*Hyperlink) MouseMoved\r#\r\rfunc (hl *Hyperlink) MouseMoved(*desktop.MouseEvent) MouseMoved is a hook that is called if the mouse pointer moved over the element.\nfunc (*Hyperlink) MouseOut\r#\r\rfunc (hl *Hyperlink) MouseOut() MouseOut is a hook that is called if the mouse pointer leaves the element.\nfunc (*Hyperlink) Refresh\r#\r\rfunc (hl *Hyperlink) Refresh() Refresh triggers a redraw of the hyperlink.\nImplements: \rfyne.Widget\rfunc (*Hyperlink) Resize\r#\r\rfunc (hl *Hyperlink) Resize(size fyne.Size) Resize sets a new size for the hyperlink. Note this should not be used if the widget is being managed by a Layout within a Container.\nfunc (*Hyperlink) SetText\r#\r\rfunc (hl *Hyperlink) SetText(text string) SetText sets the text of the hyperlink\nfunc (*Hyperlink) SetURL\r#\r\rfunc (hl *Hyperlink) SetURL(url *url.URL) SetURL sets the URL of the hyperlink, taking in a URL type\nfunc (*Hyperlink) SetURLFromString\r#\r\rfunc (hl *Hyperlink) SetURLFromString(str string) error SetURLFromString sets the URL of the hyperlink, taking in a string type\nfunc (*Hyperlink) Tapped\r#\r\rfunc (hl *Hyperlink) Tapped(*fyne.PointEvent) Tapped is called when a pointer tapped event is captured and triggers any change handler\nfunc (*Hyperlink) TypedKey\r#\r\rfunc (hl *Hyperlink) TypedKey(ev *fyne.KeyEvent) TypedKey is a hook called by the input handling logic on key events if this object is focused.\nfunc (*Hyperlink) TypedRune\r#\r\rfunc (hl *Hyperlink) TypedRune(rune) TypedRune is a hook called by the input handling logic on text input events if this object is focused.\n"},{"id":259,"href":"/docs/api/widget/hyperlinksegment/","title":"widget.HyperlinkSegment","section":"widget","content":"widget.HyperlinkSegment\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype HyperlinkSegment\r#\r\rtype HyperlinkSegment struct { \tAlignment fyne.TextAlign \tText string \tURL *url.URL } HyperlinkSegment represents a hyperlink within a rich text widget.\nSince: \r2.1\rfunc (*HyperlinkSegment) Inline\r#\r\rfunc (h *HyperlinkSegment) Inline() bool Inline returns true as hyperlinks are inside other elements.\nfunc (*HyperlinkSegment) Select\r#\r\rfunc (h *HyperlinkSegment) Select(begin, end fyne.Position) Select tells the segment that the user is selecting the content between the two positions.\nfunc (*HyperlinkSegment) SelectedText\r#\r\rfunc (h *HyperlinkSegment) SelectedText() string SelectedText should return the text representation of any content currently selected through the Select call.\nfunc (*HyperlinkSegment) Textual\r#\r\rfunc (h *HyperlinkSegment) Textual() string Textual returns the content of this segment rendered to plain text.\nfunc (*HyperlinkSegment) Unselect\r#\r\rfunc (h *HyperlinkSegment) Unselect() Unselect tells the segment that the user is has cancelled the previous selection.\nfunc (*HyperlinkSegment) Update\r#\r\rfunc (h *HyperlinkSegment) Update(o fyne.CanvasObject) Update applies the current state of this hyperlink segment to an existing visual.\nfunc (*HyperlinkSegment) Visual\r#\r\rfunc (h *HyperlinkSegment) Visual() fyne.CanvasObject Visual returns the hyperlink widget required to render this segment.\n"},{"id":260,"href":"/docs/api/widget/icon/","title":"widget.Icon","section":"widget","content":"widget.Icon\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Icon\r#\r\rtype Icon struct { \tBaseWidget  \tResource fyne.Resource // The resource for this icon } Icon widget is a basic image component that load\u0026rsquo;s its resource to match the theme.\nfunc NewIcon\r#\r\rfunc NewIcon(res fyne.Resource) *Icon NewIcon returns a new icon widget that displays a themed icon resource\nfunc (*Icon) CreateRenderer\r#\r\rfunc (i *Icon) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Icon) MinSize\r#\r\rfunc (i *Icon) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*Icon) SetResource\r#\r\rfunc (i *Icon) SetResource(res fyne.Resource) SetResource updates the resource rendered in this icon widget\n"},{"id":261,"href":"/docs/api/widget/label/","title":"widget.Label","section":"widget","content":"widget.Label\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Label\r#\r\rtype Label struct { \tBaseWidget \tText string \tAlignment fyne.TextAlign // The alignment of the Text \tWrapping fyne.TextWrap // The wrapping of the Text \tTextStyle fyne.TextStyle // The style of the label text } Label widget is a label component with appropriate padding and layout.\nfunc NewLabel\r#\r\rfunc NewLabel(text string) *Label NewLabel creates a new label widget with the set text content\nfunc NewLabelWithData\r#\r\rfunc NewLabelWithData(data binding.String) *Label NewLabelWithData returns an Label widget connected to the specified data source.\nSince: \r2.0\rfunc NewLabelWithStyle\r#\r\rfunc NewLabelWithStyle(text string, alignment fyne.TextAlign, style fyne.TextStyle) *Label NewLabelWithStyle creates a new label widget with the set text content\nfunc (*Label) Bind\r#\r\rfunc (l *Label) Bind(data binding.String) Bind connects the specified data source to this Label. The current value will be displayed and any changes in the data will cause the widget to update.\nSince: \r2.0\rfunc (*Label) CreateRenderer\r#\r\rfunc (l *Label) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Label) ExtendBaseWidget\r#\r\rfunc (l *Label) ExtendBaseWidget(w fyne.Widget) ExtendBaseWidget is used by an extending widget to make use of BaseWidget functionality.\nfunc (*Label) MinSize\r#\r\rfunc (l *Label) MinSize() fyne.Size MinSize returns the size that this label should not shrink below.\nImplements: \rfyne.Widget\rfunc (*Label) Refresh\r#\r\rfunc (l *Label) Refresh() Refresh triggers a redraw of the label.\nImplements: \rfyne.Widget\rfunc (*Label) Resize\r#\r\rfunc (l *Label) Resize(s fyne.Size) Resize sets a new size for the label. This should only be called if it is not in a container with a layout manager.\nImplements: \rfyne.Widget\rfunc (*Label) SetText\r#\r\rfunc (l *Label) SetText(text string) SetText sets the text of the label\nfunc (*Label) Unbind\r#\r\rfunc (l *Label) Unbind() Unbind disconnects any configured data source from this Label. The current value will remain at the last value of the data source.\nSince: \r2.0\r"},{"id":262,"href":"/docs/api/widget/list/","title":"widget.List","section":"widget","content":"widget.List\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype List\r#\r\rtype List struct { \tBaseWidget  \tLength func() int \tCreateItem func() fyne.CanvasObject \tUpdateItem func(id ListItemID, item fyne.CanvasObject) \tOnSelected func(id ListItemID) \tOnUnselected func(id ListItemID) } List is a widget that pools list items for performance and lays the items out in a vertical direction inside of a scroller. List requires that all items are the same size.\nSince: \r1.4\rfunc NewList\r#\r\rfunc NewList(length func() int, createItem func() fyne.CanvasObject, updateItem func(ListItemID, fyne.CanvasObject)) *List NewList creates and returns a list widget for displaying items in a vertical layout with scrolling and caching for performance.\nSince: \r1.4\rfunc NewListWithData\r#\r\rfunc NewListWithData(data binding.DataList, createItem func() fyne.CanvasObject, updateItem func(binding.DataItem, fyne.CanvasObject)) *List NewListWithData creates a new list widget that will display the contents of the provided data.\nSince: \r2.0\rfunc (*List) CreateRenderer\r#\r\rfunc (l *List) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer.\nfunc (*List) MinSize\r#\r\rfunc (l *List) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below.\nfunc (*List) Resize\r#\r\rfunc (l *List) Resize(s fyne.Size) Resize is called when this list should change size. We refresh to ensure invisible items are drawn.\nfunc (*List) ScrollTo\r#\r\rfunc (l *List) ScrollTo(id ListItemID) ScrollTo scrolls to the item represented by id\nSince: \r2.1\rfunc (*List) ScrollToBottom\r#\r\rfunc (l *List) ScrollToBottom() ScrollToBottom scrolls to the end of the list\nSince: \r2.1\rfunc (*List) ScrollToTop\r#\r\rfunc (l *List) ScrollToTop() ScrollToTop scrolls to the start of the list\nSince: \r2.1\rfunc (*List) Select\r#\r\rfunc (l *List) Select(id ListItemID) Select add the item identified by the given ID to the selection.\nfunc (*List) Unselect\r#\r\rfunc (l *List) Unselect(id ListItemID) Unselect removes the item identified by the given ID from the selection.\nfunc (*List) UnselectAll\r#\r\rfunc (l *List) UnselectAll() UnselectAll removes all items from the selection.\nSince: \r2.1\r"},{"id":263,"href":"/docs/api/widget/listitemid/","title":"widget.ListItemID","section":"widget","content":"widget.ListItemID\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ListItemID\r#\r\rtype ListItemID = int ListItemID uniquely identifies an item within a list.\n"},{"id":264,"href":"/docs/api/widget/listsegment/","title":"widget.ListSegment","section":"widget","content":"widget.ListSegment\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ListSegment\r#\r\rtype ListSegment struct { \tItems []RichTextSegment \tOrdered bool } ListSegment includes an itemised list with the content set using the Items field.\nSince: \r2.1\rfunc (*ListSegment) Inline\r#\r\rfunc (l *ListSegment) Inline() bool Inline returns false as a list should be in a block.\nfunc (*ListSegment) Segments\r#\r\rfunc (l *ListSegment) Segments() []RichTextSegment Segments returns the segments required to draw bullets before each item\nfunc (*ListSegment) Select\r#\r\rfunc (l *ListSegment) Select(_, _ fyne.Position) Select does nothing for a list container.\nfunc (*ListSegment) SelectedText\r#\r\rfunc (l *ListSegment) SelectedText() string SelectedText returns the empty string for this list.\nfunc (*ListSegment) Textual\r#\r\rfunc (l *ListSegment) Textual() string Textual returns no content for a list as the content is in sub-segments.\nfunc (*ListSegment) Unselect\r#\r\rfunc (l *ListSegment) Unselect() Unselect does nothing for a list container.\nfunc (*ListSegment) Update\r#\r\rfunc (l *ListSegment) Update(fyne.CanvasObject) Update doesnt need to change a list visual.\nfunc (*ListSegment) Visual\r#\r\rfunc (l *ListSegment) Visual() fyne.CanvasObject Visual returns no additional elements for this segment.\n"},{"id":265,"href":"/docs/api/widget/menu/","title":"widget.Menu","section":"widget","content":"widget.Menu\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Menu\r#\r\rtype Menu struct { \tBaseWidget  \tItems []fyne.CanvasObject \tOnDismiss func() } Menu is a widget for displaying a fyne.Menu.\nfunc NewMenu\r#\r\rfunc NewMenu(menu *fyne.Menu) *Menu NewMenu creates a new Menu.\nfunc (*Menu) ActivateLastSubmenu\r#\r\rfunc (m *Menu) ActivateLastSubmenu() bool ActivateLastSubmenu finds the last active menu item traversing through the open submenus and activates its submenu if any. It returns true if there was a submenu and it was activated and false elsewhere. Activating a submenu does show it and activate its first item.\nfunc (*Menu) ActivateNext\r#\r\rfunc (m *Menu) ActivateNext() ActivateNext activates the menu item following the currently active menu item. If there is no menu item active, it activates the first menu item. If there is no menu item after the current active one, it does nothing. If a submenu is open, it delegates the activation to this submenu.\nfunc (*Menu) ActivatePrevious\r#\r\rfunc (m *Menu) ActivatePrevious() ActivatePrevious activates the menu item preceding the currently active menu item. If there is no menu item active, it activates the last menu item. If there is no menu item before the current active one, it does nothing. If a submenu is open, it delegates the activation to this submenu.\nfunc (*Menu) CreateRenderer\r#\r\rfunc (m *Menu) CreateRenderer() fyne.WidgetRenderer CreateRenderer returns a new renderer for the menu.\nImplements: \rfyne.Widget\rfunc (*Menu) DeactivateChild\r#\r\rfunc (m *Menu) DeactivateChild() DeactivateChild deactivates the active menu item and hides its submenu if any.\nfunc (*Menu) DeactivateLastSubmenu\r#\r\rfunc (m *Menu) DeactivateLastSubmenu() bool DeactivateLastSubmenu finds the last open submenu traversing through the open submenus, deactivates its active item and hides it. This also deactivates any submenus of the deactivated submenu. It returns true if there was a submenu open and closed and false elsewhere.\nfunc (*Menu) Dismiss\r#\r\rfunc (m *Menu) Dismiss() Dismiss dismisses the menu by dismissing and hiding the active child and performing OnDismiss.\nfunc (*Menu) MinSize\r#\r\rfunc (m *Menu) MinSize() fyne.Size MinSize returns the minimal size of the menu.\nImplements: \rfyne.Widget\rfunc (*Menu) Refresh\r#\r\rfunc (m *Menu) Refresh() Refresh updates the menu to reflect changes in the data.\nImplements: \rfyne.Widget\rfunc (*Menu) Tapped\r#\r\rfunc (m *Menu) Tapped(*fyne.PointEvent) Tapped catches taps on separators and the menu background. It doesn\u0026rsquo;t perform any action.\nImplements: \rfyne.Tappable\rfunc (*Menu) TriggerLast\r#\r\rfunc (m *Menu) TriggerLast() TriggerLast finds the last active menu item traversing through the open submenus and triggers it.\n"},{"id":266,"href":"/docs/api/widget/orientation/","title":"widget.Orientation","section":"widget","content":"widget.Orientation\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Orientation\r#\r\rtype Orientation int Orientation controls the horizontal/vertical layout of a widget\nconst ( \tHorizontal Orientation = 0 \tVertical Orientation = 1 ) Orientation constants to control widget layout\n"},{"id":267,"href":"/docs/api/widget/paragraphsegment/","title":"widget.ParagraphSegment","section":"widget","content":"widget.ParagraphSegment\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ParagraphSegment\r#\r\rtype ParagraphSegment struct { \tTexts []RichTextSegment } ParagraphSegment wraps a number of text elements in a paragraph. It is similar to using a list of text elements when the final style is RichTextStyleParagraph.\nSince: \r2.1\rfunc (*ParagraphSegment) Inline\r#\r\rfunc (p *ParagraphSegment) Inline() bool Inline returns false as a paragraph should be in a block.\nfunc (*ParagraphSegment) Segments\r#\r\rfunc (p *ParagraphSegment) Segments() []RichTextSegment Segments returns the list of text elements in this paragraph.\nfunc (*ParagraphSegment) Select\r#\r\rfunc (p *ParagraphSegment) Select(_, _ fyne.Position) Select does nothing for a paragraph container.\nfunc (*ParagraphSegment) SelectedText\r#\r\rfunc (p *ParagraphSegment) SelectedText() string SelectedText returns the empty string for this paragraph container.\nfunc (*ParagraphSegment) Textual\r#\r\rfunc (p *ParagraphSegment) Textual() string Textual returns no content for a paragraph container.\nfunc (*ParagraphSegment) Unselect\r#\r\rfunc (p *ParagraphSegment) Unselect() Unselect does nothing for a paragraph container.\nfunc (*ParagraphSegment) Update\r#\r\rfunc (p *ParagraphSegment) Update(fyne.CanvasObject) Update doesnt need to change a paragraph container.\nfunc (*ParagraphSegment) Visual\r#\r\rfunc (p *ParagraphSegment) Visual() fyne.CanvasObject Visual returns the no extra elements.\n"},{"id":268,"href":"/docs/api/widget/popup/","title":"widget.PopUp","section":"widget","content":"widget.PopUp\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype PopUp\r#\r\rtype PopUp struct { \tBaseWidget  \tContent fyne.CanvasObject \tCanvas fyne.Canvas } PopUp is a widget that can float above the user interface. It wraps any standard elements with padding and a shadow. If it is modal then the shadow will cover the entire canvas it hovers over and block interactions.\nfunc NewModalPopUp\r#\r\rfunc NewModalPopUp(content fyne.CanvasObject, canvas fyne.Canvas) *PopUp NewModalPopUp creates a new popUp for the specified content and displays it on the passed canvas. A modal PopUp blocks interactions with underlying elements, covered with a semi-transparent overlay.\nfunc NewPopUp\r#\r\rfunc NewPopUp(content fyne.CanvasObject, canvas fyne.Canvas) *PopUp NewPopUp creates a new popUp for the specified content and displays it on the passed canvas.\nfunc (*PopUp) CreateRenderer\r#\r\rfunc (p *PopUp) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*PopUp) Hide\r#\r\rfunc (p *PopUp) Hide() Hide this widget, if it was previously visible\nfunc (*PopUp) MinSize\r#\r\rfunc (p *PopUp) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*PopUp) Move\r#\r\rfunc (p *PopUp) Move(pos fyne.Position) Move the widget to a new position. A PopUp position is absolute to the top, left of its canvas. For PopUp this actually moves the content so checking Position() will not return the same value as is set here.\nfunc (*PopUp) Resize\r#\r\rfunc (p *PopUp) Resize(size fyne.Size) Resize changes the size of the PopUp\u0026rsquo;s content. PopUps always have the size of their canvas, but this call updates the size of the content portion.\nImplements: \rfyne.Widget\rfunc (*PopUp) Show\r#\r\rfunc (p *PopUp) Show() Show this pop-up as overlay if not already shown.\nfunc (*PopUp) ShowAtPosition\r#\r\rfunc (p *PopUp) ShowAtPosition(pos fyne.Position) ShowAtPosition shows this pop-up at the given position.\nfunc (*PopUp) Tapped\r#\r\rfunc (p *PopUp) Tapped(_ *fyne.PointEvent) Tapped is called when the user taps the popUp background - if not modal then dismiss this widget\nfunc (*PopUp) TappedSecondary\r#\r\rfunc (p *PopUp) TappedSecondary(_ *fyne.PointEvent) TappedSecondary is called when the user right/alt taps the background - if not modal then dismiss this widget\n"},{"id":269,"href":"/docs/api/widget/popupmenu/","title":"widget.PopUpMenu","section":"widget","content":"widget.PopUpMenu\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype PopUpMenu\r#\r\rtype PopUpMenu struct { \t*Menu } PopUpMenu is a Menu which displays itself in an OverlayContainer.\nfunc NewPopUpMenu\r#\r\rfunc NewPopUpMenu(menu *fyne.Menu, c fyne.Canvas) *PopUpMenu NewPopUpMenu creates a new, reusable popup menu. You can show it using ShowAtPosition.\nSince: \r2.0\rfunc (*PopUpMenu) FocusGained\r#\r\rfunc (p *PopUpMenu) FocusGained() FocusGained is triggered when the object gained focus. For the pop-up menu it does nothing.\nImplements: \rfyne.Focusable\rfunc (*PopUpMenu) FocusLost\r#\r\rfunc (p *PopUpMenu) FocusLost() FocusLost is triggered when the object lost focus. For the pop-up menu it does nothing.\nImplements: \rfyne.Focusable\rfunc (*PopUpMenu) Hide\r#\r\rfunc (p *PopUpMenu) Hide() Hide hides the pop-up menu.\nImplements: \rfyne.Widget\rfunc (*PopUpMenu) Move\r#\r\rfunc (p *PopUpMenu) Move(pos fyne.Position) Move moves the pop-up menu. The position is absolute because pop-up menus are shown in an overlay which covers the whole canvas.\nImplements: \rfyne.Widget\rfunc (*PopUpMenu) Resize\r#\r\rfunc (p *PopUpMenu) Resize(size fyne.Size) Resize changes the size of the pop-up menu.\nImplements: \rfyne.Widget\rfunc (*PopUpMenu) Show\r#\r\rfunc (p *PopUpMenu) Show() Show makes the pop-up menu visible.\nImplements: \rfyne.Widget\rfunc (*PopUpMenu) ShowAtPosition\r#\r\rfunc (p *PopUpMenu) ShowAtPosition(pos fyne.Position) ShowAtPosition shows the pop-up menu at the specified position.\nfunc (*PopUpMenu) TypedKey\r#\r\rfunc (p *PopUpMenu) TypedKey(e *fyne.KeyEvent) TypedKey handles key events. It allows keyboard control of the pop-up menu.\nImplements: \rfyne.Focusable\rfunc (*PopUpMenu) TypedRune\r#\r\rfunc (p *PopUpMenu) TypedRune(rune) TypedRune handles text events. For pop-up menus this does nothing.\nImplements: \rfyne.Focusable\r"},{"id":270,"href":"/docs/api/widget/progressbar/","title":"widget.ProgressBar","section":"widget","content":"widget.ProgressBar\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ProgressBar\r#\r\rtype ProgressBar struct { \tBaseWidget  \tMin, Max, Value float64  \t// TextFormatter can be used to have a custom format of progress text. \t// If set, it overrides the percentage readout and runs each time the value updates. \t// \t// Since: 1.4 \tTextFormatter func() string } ProgressBar widget creates a horizontal panel that indicates progress\nfunc NewProgressBar\r#\r\rfunc NewProgressBar() *ProgressBar NewProgressBar creates a new progress bar widget. The default Min is 0 and Max is 1, Values set should be between those numbers. The display will convert this to a percentage.\nfunc NewProgressBarWithData\r#\r\rfunc NewProgressBarWithData(data binding.Float) *ProgressBar NewProgressBarWithData returns a progress bar connected with the specified data source.\nSince: \r2.0\rfunc (*ProgressBar) Bind\r#\r\rfunc (p *ProgressBar) Bind(data binding.Float) Bind connects the specified data source to this ProgressBar. The current value will be displayed and any changes in the data will cause the widget to update.\nSince: \r2.0\rfunc (*ProgressBar) CreateRenderer\r#\r\rfunc (p *ProgressBar) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*ProgressBar) MinSize\r#\r\rfunc (p *ProgressBar) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*ProgressBar) SetValue\r#\r\rfunc (p *ProgressBar) SetValue(v float64) SetValue changes the current value of this progress bar (from p.Min to p.Max). The widget will be refreshed to indicate the change.\nfunc (*ProgressBar) Unbind\r#\r\rfunc (p *ProgressBar) Unbind() Unbind disconnects any configured data source from this ProgressBar. The current value will remain at the last value of the data source.\nSince: \r2.0\r"},{"id":271,"href":"/docs/api/widget/progressbarinfinite/","title":"widget.ProgressBarInfinite","section":"widget","content":"widget.ProgressBarInfinite\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ProgressBarInfinite\r#\r\rtype ProgressBarInfinite struct { \tBaseWidget } ProgressBarInfinite widget creates a horizontal panel that indicates waiting indefinitely An infinite progress bar loops 0% -\u0026gt; 100% repeatedly until Stop() is called\nfunc NewProgressBarInfinite\r#\r\rfunc NewProgressBarInfinite() *ProgressBarInfinite NewProgressBarInfinite creates a new progress bar widget that loops indefinitely from 0% -\u0026gt; 100% SetValue() is not defined for infinite progress bar To stop the looping progress and set the progress bar to 100%, call ProgressBarInfinite.Stop()\nfunc (*ProgressBarInfinite) CreateRenderer\r#\r\rfunc (p *ProgressBarInfinite) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*ProgressBarInfinite) Hide\r#\r\rfunc (p *ProgressBarInfinite) Hide() Hide this widget, if it was previously visible\nfunc (*ProgressBarInfinite) MinSize\r#\r\rfunc (p *ProgressBarInfinite) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*ProgressBarInfinite) Running\r#\r\rfunc (p *ProgressBarInfinite) Running() bool Running returns the current state of the infinite progress animation\nfunc (*ProgressBarInfinite) Show\r#\r\rfunc (p *ProgressBarInfinite) Show() Show this widget, if it was previously hidden\nfunc (*ProgressBarInfinite) Start\r#\r\rfunc (p *ProgressBarInfinite) Start() Start the infinite progress bar animation\nfunc (*ProgressBarInfinite) Stop\r#\r\rfunc (p *ProgressBarInfinite) Stop() Stop the infinite progress bar animation\n"},{"id":272,"href":"/docs/api/widget/radiogroup/","title":"widget.RadioGroup","section":"widget","content":"widget.RadioGroup\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype RadioGroup\r#\r\rtype RadioGroup struct { \tDisableableWidget \tHorizontal bool \tRequired bool \tOnChanged func(string) `json:\u0026#34;-\u0026#34;` \tOptions []string \tSelected string } RadioGroup widget has a list of text labels and checks check icons next to each. Changing the selection (only one can be selected) will trigger the changed func.\nSince: \r1.4\rfunc NewRadioGroup\r#\r\rfunc NewRadioGroup(options []string, changed func(string)) *RadioGroup NewRadioGroup creates a new radio group widget with the set options and change handler\nSince: \r1.4\rfunc (*RadioGroup) Append\r#\r\rfunc (r *RadioGroup) Append(option string) Append adds a new option to the end of a RadioGroup widget.\nfunc (*RadioGroup) CreateRenderer\r#\r\rfunc (r *RadioGroup) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*RadioGroup) MinSize\r#\r\rfunc (r *RadioGroup) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*RadioGroup) Refresh\r#\r\rfunc (r *RadioGroup) Refresh() Refresh causes this widget to be redrawn in it\u0026rsquo;s current state.\nImplements: \rfyne.CanvasObject\rfunc (*RadioGroup) SetSelected\r#\r\rfunc (r *RadioGroup) SetSelected(option string) SetSelected sets the radio option, it can be used to set a default option.\n"},{"id":273,"href":"/docs/api/widget/richtext/","title":"widget.RichText","section":"widget","content":"widget.RichText\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype RichText\r#\r\rtype RichText struct { \tBaseWidget \tSegments []RichTextSegment \tWrapping fyne.TextWrap \tScroll widget.ScrollDirection } RichText represents the base element for a rich text-based widget.\nSince: \r2.1\rfunc NewRichText\r#\r\rfunc NewRichText(segments ...RichTextSegment) *RichText NewRichText returns a new RichText widget that renders the given text and segments. If no segments are specified it will be converted to a single segment using the default text settings.\nSince: \r2.1\rfunc NewRichTextFromMarkdown\r#\r\rfunc NewRichTextFromMarkdown(content string) *RichText NewRichTextFromMarkdown configures a RichText widget by parsing the provided markdown content.\nSince: \r2.1\rfunc NewRichTextWithText\r#\r\rfunc NewRichTextWithText(text string) *RichText NewRichTextWithText returns a new RichText widget that renders the given text. The string will be converted to a single text segment using the default text settings.\nSince: \r2.1\rfunc (*RichText) CreateRenderer\r#\r\rfunc (t *RichText) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*RichText) MinSize\r#\r\rfunc (t *RichText) MinSize() fyne.Size MinSize calculates the minimum size of a rich text widget. This is based on the contained text with a standard amount of padding added.\nfunc (*RichText) ParseMarkdown\r#\r\rfunc (t *RichText) ParseMarkdown(content string) ParseMarkdown allows setting the content of this RichText widget from a markdown string. It will replace the content of this widget similarly to SetText, but with the appropriate formatting.\nfunc (*RichText) Refresh\r#\r\rfunc (t *RichText) Refresh() Refresh triggers a redraw of the rich text.\nImplements: \rfyne.Widget\rfunc (*RichText) Resize\r#\r\rfunc (t *RichText) Resize(size fyne.Size) Resize sets a new size for the rich text. This should only be called if it is not in a container with a layout manager.\nImplements: \rfyne.Widget\rfunc (*RichText) String\r#\r\rfunc (t *RichText) String() string String returns the text widget buffer as string\n"},{"id":274,"href":"/docs/api/widget/richtextblock/","title":"widget.RichTextBlock","section":"widget","content":"widget.RichTextBlock\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype RichTextBlock\r#\r\rtype RichTextBlock interface { \tSegments() []RichTextSegment } RichTextBlock is an extension of a text segment that contains other segments\nSince: \r2.1\r"},{"id":275,"href":"/docs/api/widget/richtextsegment/","title":"widget.RichTextSegment","section":"widget","content":"widget.RichTextSegment\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype RichTextSegment\r#\r\rtype RichTextSegment interface { \tInline() bool \tTextual() string \tUpdate(fyne.CanvasObject) \tVisual() fyne.CanvasObject  \tSelect(pos1, pos2 fyne.Position) \tSelectedText() string \tUnselect() } RichTextSegment describes any element that can be rendered in a RichText widget.\nSince: \r2.1\r"},{"id":276,"href":"/docs/api/widget/richtextstyle/","title":"widget.RichTextStyle","section":"widget","content":"widget.RichTextStyle\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype RichTextStyle\r#\r\rtype RichTextStyle struct { \tAlignment fyne.TextAlign \tColorName fyne.ThemeColorName \tInline bool \tSizeName fyne.ThemeSizeName \tTextStyle fyne.TextStyle } RichTextStyle describes the details of a text object inside a RichText widget.\nSince: \r2.1\r"},{"id":277,"href":"/docs/api/widget/select/","title":"widget.Select","section":"widget","content":"widget.Select\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Select\r#\r\rtype Select struct { \tDisableableWidget  \t// Alignment sets the text alignment of the select and its list of options. \t// \t// Since: 2.1 \tAlignment fyne.TextAlign \tSelected string \tOptions []string \tPlaceHolder string \tOnChanged func(string) `json:\u0026#34;-\u0026#34;` } Select widget has a list of options, with the current one shown, and triggers an event func when clicked\nfunc NewSelect\r#\r\rfunc NewSelect(options []string, changed func(string)) *Select NewSelect creates a new select widget with the set list of options and changes handler\nfunc (*Select) ClearSelected\r#\r\rfunc (s *Select) ClearSelected() ClearSelected clears the current option of the select widget. After clearing the current option, the Select widget\u0026rsquo;s PlaceHolder will be displayed.\nfunc (*Select) CreateRenderer\r#\r\rfunc (s *Select) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Select) FocusGained\r#\r\rfunc (s *Select) FocusGained() FocusGained is called after this Select has gained focus.\nImplements: \rfyne.Focusable\rfunc (*Select) FocusLost\r#\r\rfunc (s *Select) FocusLost() FocusLost is called after this Select has lost focus.\nImplements: \rfyne.Focusable\rfunc (*Select) Hide\r#\r\rfunc (s *Select) Hide() Hide hides the select.\nImplements: \rfyne.Widget\rfunc (*Select) MinSize\r#\r\rfunc (s *Select) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*Select) MouseIn\r#\r\rfunc (s *Select) MouseIn(*desktop.MouseEvent) MouseIn is called when a desktop pointer enters the widget\nfunc (*Select) MouseMoved\r#\r\rfunc (s *Select) MouseMoved(*desktop.MouseEvent) MouseMoved is called when a desktop pointer hovers over the widget\nfunc (*Select) MouseOut\r#\r\rfunc (s *Select) MouseOut() MouseOut is called when a desktop pointer exits the widget\nfunc (*Select) Move\r#\r\rfunc (s *Select) Move(pos fyne.Position) Move changes the relative position of the select.\nImplements: \rfyne.Widget\rfunc (*Select) Resize\r#\r\rfunc (s *Select) Resize(size fyne.Size) Resize sets a new size for a widget. Note this should not be used if the widget is being managed by a Layout within a Container.\nfunc (*Select) SelectedIndex\r#\r\rfunc (s *Select) SelectedIndex() int SelectedIndex returns the index value of the currently selected item in Options list. It will return -1 if there is no selection.\nfunc (*Select) SetSelected\r#\r\rfunc (s *Select) SetSelected(text string) SetSelected sets the current option of the select widget\nfunc (*Select) SetSelectedIndex\r#\r\rfunc (s *Select) SetSelectedIndex(index int) SetSelectedIndex will set the Selected option from the value in Options list at index position.\nfunc (*Select) Tapped\r#\r\rfunc (s *Select) Tapped(*fyne.PointEvent) Tapped is called when a pointer tapped event is captured and triggers any tap handler\nfunc (*Select) TypedKey\r#\r\rfunc (s *Select) TypedKey(event *fyne.KeyEvent) TypedKey is called if a key event happens while this Select is focused.\nImplements: \rfyne.Focusable\rfunc (*Select) TypedRune\r#\r\rfunc (s *Select) TypedRune(_ rune) TypedRune is called if a text event happens while this Select is focused.\nImplements: \rfyne.Focusable\r"},{"id":278,"href":"/docs/api/widget/selectentry/","title":"widget.SelectEntry","section":"widget","content":"widget.SelectEntry\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype SelectEntry\r#\r\rtype SelectEntry struct { \tEntry } SelectEntry is an input field which supports selecting from a fixed set of options.\nfunc NewSelectEntry\r#\r\rfunc NewSelectEntry(options []string) *SelectEntry NewSelectEntry creates a SelectEntry.\nfunc (*SelectEntry) CreateRenderer\r#\r\rfunc (e *SelectEntry) CreateRenderer() fyne.WidgetRenderer CreateRenderer returns a new renderer for this select entry.\nImplements: \rfyne.Widget\rfunc (*SelectEntry) Disable\r#\r\rfunc (e *SelectEntry) Disable() Disable this widget so that it cannot be interacted with, updating any style appropriately.\nImplements: \rfyne.DisableableWidget\rfunc (*SelectEntry) Enable\r#\r\rfunc (e *SelectEntry) Enable() Enable this widget, updating any style or features appropriately.\nImplements: \rfyne.DisableableWidget\rfunc (*SelectEntry) MinSize\r#\r\rfunc (e *SelectEntry) MinSize() fyne.Size MinSize returns the minimal size of the select entry.\nImplements: \rfyne.Widget\rfunc (*SelectEntry) Move\r#\r\rfunc (e *SelectEntry) Move(pos fyne.Position) Move changes the relative position of the select entry.\nImplements: \rfyne.Widget\rfunc (*SelectEntry) Resize\r#\r\rfunc (e *SelectEntry) Resize(size fyne.Size) Resize changes the size of the select entry.\nImplements: \rfyne.Widget\rfunc (*SelectEntry) SetOptions\r#\r\rfunc (e *SelectEntry) SetOptions(options []string) SetOptions sets the options the user might select from.\n"},{"id":279,"href":"/docs/api/widget/separator/","title":"widget.Separator","section":"widget","content":"widget.Separator\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Separator\r#\r\rtype Separator struct { \tBaseWidget } Separator is a widget for displaying a separator with themeable color.\nSince: \r1.4\rfunc NewSeparator\r#\r\rfunc NewSeparator() *Separator NewSeparator creates a new separator.\nSince: \r1.4\rfunc (*Separator) CreateRenderer\r#\r\rfunc (s *Separator) CreateRenderer() fyne.WidgetRenderer CreateRenderer returns a new renderer for the separator.\nImplements: \rfyne.Widget\rfunc (*Separator) MinSize\r#\r\rfunc (s *Separator) MinSize() fyne.Size MinSize returns the minimal size of the separator.\nImplements: \rfyne.Widget\r"},{"id":280,"href":"/docs/api/widget/separatorsegment/","title":"widget.SeparatorSegment","section":"widget","content":"widget.SeparatorSegment\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype SeparatorSegment\r#\r\rtype SeparatorSegment struct { } SeparatorSegment includes a horizontal separator in a rich text widget.\nSince: \r2.1\rfunc (*SeparatorSegment) Inline\r#\r\rfunc (s *SeparatorSegment) Inline() bool Inline returns false as a separator should be full width.\nfunc (*SeparatorSegment) Select\r#\r\rfunc (s *SeparatorSegment) Select(_, _ fyne.Position) Select does nothing for a separator.\nfunc (*SeparatorSegment) SelectedText\r#\r\rfunc (s *SeparatorSegment) SelectedText() string SelectedText returns the empty string for this separator.\nfunc (*SeparatorSegment) Textual\r#\r\rfunc (s *SeparatorSegment) Textual() string Textual returns no content for a separator element.\nfunc (*SeparatorSegment) Unselect\r#\r\rfunc (s *SeparatorSegment) Unselect() Unselect does nothing for a separator.\nfunc (*SeparatorSegment) Update\r#\r\rfunc (s *SeparatorSegment) Update(fyne.CanvasObject) Update doesnt need to change a separator visual.\nfunc (*SeparatorSegment) Visual\r#\r\rfunc (s *SeparatorSegment) Visual() fyne.CanvasObject Visual returns the separator element for this segment.\n"},{"id":281,"href":"/docs/api/widget/slider/","title":"widget.Slider","section":"widget","content":"widget.Slider\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Slider\r#\r\rtype Slider struct { \tBaseWidget  \tValue float64 \tMin float64 \tMax float64 \tStep float64  \tOrientation Orientation \tOnChanged func(float64) } Slider is a widget that can slide between two fixed values.\nfunc NewSlider\r#\r\rfunc NewSlider(min, max float64) *Slider NewSlider returns a basic slider.\nfunc NewSliderWithData\r#\r\rfunc NewSliderWithData(min, max float64, data binding.Float) *Slider NewSliderWithData returns a slider connected with the specified data source.\nSince: \r2.0\rfunc (*Slider) Bind\r#\r\rfunc (s *Slider) Bind(data binding.Float) Bind connects the specified data source to this Slider. The current value will be displayed and any changes in the data will cause the widget to update. User interactions with this Slider will set the value into the data source.\nSince: \r2.0\rfunc (*Slider) CreateRenderer\r#\r\rfunc (s *Slider) CreateRenderer() fyne.WidgetRenderer CreateRenderer links this widget to its renderer.\nfunc (*Slider) DragEnd\r#\r\rfunc (s *Slider) DragEnd() DragEnd function.\nfunc (*Slider) Dragged\r#\r\rfunc (s *Slider) Dragged(e *fyne.DragEvent) Dragged function.\nfunc (*Slider) MinSize\r#\r\rfunc (s *Slider) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*Slider) SetValue\r#\r\rfunc (s *Slider) SetValue(value float64) SetValue updates the value of the slider and clamps the value to be within the range.\nfunc (*Slider) Unbind\r#\r\rfunc (s *Slider) Unbind() Unbind disconnects any configured data source from this Slider. The current value will remain at the last value of the data source.\nSince: \r2.0\r"},{"id":282,"href":"/docs/api/widget/table/","title":"widget.Table","section":"widget","content":"widget.Table\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Table\r#\r\rtype Table struct { \tBaseWidget  \tLength func() (int, int) \tCreateCell func() fyne.CanvasObject \tUpdateCell func(id TableCellID, template fyne.CanvasObject) \tOnSelected func(id TableCellID) \tOnUnselected func(id TableCellID) } Table widget is a grid of items that can be scrolled and a cell selected. It\u0026rsquo;s performance is provided by caching cell templates created with CreateCell and re-using them with UpdateCell. The size of the content rows/columns is returned by the Length callback.\nSince: \r1.4\rfunc NewTable\r#\r\rfunc NewTable(length func() (int, int), create func() fyne.CanvasObject, update func(TableCellID, fyne.CanvasObject)) *Table NewTable returns a new performant table widget defined by the passed functions. The first returns the data size in rows and columns, second parameter is a function that returns cell template objects that can be cached and the third is used to apply data at specified data location to the passed template CanvasObject.\nSince: \r1.4\rfunc (*Table) CreateRenderer\r#\r\rfunc (t *Table) CreateRenderer() fyne.WidgetRenderer CreateRenderer returns a new renderer for the table.\nImplements: \rfyne.Widget\rfunc (*Table) ScrollTo\r#\r\rfunc (t *Table) ScrollTo(id TableCellID) ScrollTo will scroll to the given cell without changing the selection. Attempting to scroll beyond the limits of the table will scroll to the edge of the table instead.\nSince: \r2.1\rfunc (*Table) ScrollToBottom\r#\r\rfunc (t *Table) ScrollToBottom() ScrollToBottom scrolls to the last row in the table\nSince: \r2.1\rfunc (*Table) ScrollToLeading\r#\r\rfunc (t *Table) ScrollToLeading() ScrollToLeading scrolls horizontally to the leading edge of the table\nSince: \r2.1\rfunc (*Table) ScrollToTop\r#\r\rfunc (t *Table) ScrollToTop() ScrollToTop scrolls to the first row in the table\nSince: \r2.1\rfunc (*Table) ScrollToTrailing\r#\r\rfunc (t *Table) ScrollToTrailing() ScrollToTrailing scrolls horizontally to the trailing edge of the table\nSince: \r2.1\rfunc (*Table) Select\r#\r\rfunc (t *Table) Select(id TableCellID) Select will mark the specified cell as selected.\nfunc (*Table) SetColumnWidth\r#\r\rfunc (t *Table) SetColumnWidth(id int, width float32) SetColumnWidth supports changing the width of the specified column. Columns normally take the width of the template cell returned from the CreateCell callback. The width parameter uses the same units as a fyne.Size type and refers to the internal content width not including the divider size.\nSince: \r1.4.1\rfunc (*Table) Unselect\r#\r\rfunc (t *Table) Unselect(id TableCellID) Unselect will mark the cell provided by id as unselected.\nfunc (*Table) UnselectAll\r#\r\rfunc (t *Table) UnselectAll() UnselectAll will mark all cells as unselected.\nSince: \r2.1\r"},{"id":283,"href":"/docs/api/widget/tablecellid/","title":"widget.TableCellID","section":"widget","content":"widget.TableCellID\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype TableCellID\r#\r\rtype TableCellID struct { \tRow int \tCol int } TableCellID is a type that represents a cell\u0026rsquo;s position in a table based on it\u0026rsquo;s row and column location.\n"},{"id":284,"href":"/docs/api/widget/textgrid/","title":"widget.TextGrid","section":"widget","content":"widget.TextGrid\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype TextGrid\r#\r\rtype TextGrid struct { \tBaseWidget \tRows []TextGridRow  \tShowLineNumbers bool \tShowWhitespace bool \tTabWidth int // If set to 0 the fyne.DefaultTabWidth is used } TextGrid is a monospaced grid of characters. This is designed to be used by a text editor, code preview or terminal emulator.\nfunc NewTextGrid\r#\r\rfunc NewTextGrid() *TextGrid NewTextGrid creates a new empty TextGrid widget.\nfunc NewTextGridFromString\r#\r\rfunc NewTextGridFromString(content string) *TextGrid NewTextGridFromString creates a new TextGrid widget with the specified string content.\nfunc (*TextGrid) CreateRenderer\r#\r\rfunc (t *TextGrid) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to it\u0026rsquo;s renderer\nfunc (*TextGrid) MinSize\r#\r\rfunc (t *TextGrid) MinSize() fyne.Size MinSize returns the smallest size this widget can shrink to\nfunc (*TextGrid) Resize\r#\r\rfunc (t *TextGrid) Resize(size fyne.Size) Resize is called when this widget changes size. We should make sure that we refresh cells.\nfunc (*TextGrid) Row\r#\r\rfunc (t *TextGrid) Row(row int) TextGridRow Row returns a copy of the content in a specified row as a TextGridRow. If the index is out of bounds it returns an empty row object.\nfunc (*TextGrid) RowText\r#\r\rfunc (t *TextGrid) RowText(row int) string RowText returns a string representation of the content at the row specified. If the index is out of bounds it returns an empty string.\nfunc (*TextGrid) SetCell\r#\r\rfunc (t *TextGrid) SetCell(row, col int, cell TextGridCell) SetCell sets a grid data to the cell at named row and column.\nfunc (*TextGrid) SetRow\r#\r\rfunc (t *TextGrid) SetRow(row int, content TextGridRow) SetRow updates the specified row of the grid\u0026rsquo;s contents using the specified content and style and then refreshes. If the row is beyond the end of the current buffer it will be expanded. Tab characters are not padded with spaces.\nfunc (*TextGrid) SetRowStyle\r#\r\rfunc (t *TextGrid) SetRowStyle(row int, style TextGridStyle) SetRowStyle sets a grid style to all the cells cell at the specified row. Any cells in this row with their own style will override this value when displayed.\nfunc (*TextGrid) SetRune\r#\r\rfunc (t *TextGrid) SetRune(row, col int, r rune) SetRune sets a character to the cell at named row and column.\nfunc (*TextGrid) SetStyle\r#\r\rfunc (t *TextGrid) SetStyle(row, col int, style TextGridStyle) SetStyle sets a grid style to the cell at named row and column.\nfunc (*TextGrid) SetStyleRange\r#\r\rfunc (t *TextGrid) SetStyleRange(startRow, startCol, endRow, endCol int, style TextGridStyle) SetStyleRange sets a grid style to all the cells between the start row and column through to the end row and column.\nfunc (*TextGrid) SetText\r#\r\rfunc (t *TextGrid) SetText(text string) SetText updates the buffer of this textgrid to contain the specified text. New lines and columns will be added as required. Lines are separated by \u0026lsquo;\\n\u0026rsquo;. The grid will use default text style and any previous content and style will be removed. Tab characters are padded with spaces to the next tab stop.\nfunc (*TextGrid) Text\r#\r\rfunc (t *TextGrid) Text() string Text returns the contents of the buffer as a single string (with no style information). It reconstructs the lines by joining with a \\n character. Tab characters have padded spaces removed.\n"},{"id":285,"href":"/docs/api/widget/textgridcell/","title":"widget.TextGridCell","section":"widget","content":"widget.TextGridCell\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype TextGridCell\r#\r\rtype TextGridCell struct { \tRune rune \tStyle TextGridStyle } TextGridCell represents a single cell in a text grid. It has a rune for the text content and a style associated with it.\n"},{"id":286,"href":"/docs/api/widget/textgridrow/","title":"widget.TextGridRow","section":"widget","content":"widget.TextGridRow\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype TextGridRow\r#\r\rtype TextGridRow struct { \tCells []TextGridCell \tStyle TextGridStyle } TextGridRow represents a row of cells cell in a text grid. It contains the cells for the row and an optional style.\n"},{"id":287,"href":"/docs/api/widget/textgridstyle/","title":"widget.TextGridStyle","section":"widget","content":"widget.TextGridStyle\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype TextGridStyle\r#\r\rtype TextGridStyle interface { \tTextColor() color.Color \tBackgroundColor() color.Color } TextGridStyle defines a style that can be applied to a TextGrid cell.\nvar ( \t// TextGridStyleDefault is a default style for test grid cells \tTextGridStyleDefault TextGridStyle \t// TextGridStyleWhitespace is the style used for whitespace characters, if enabled \tTextGridStyleWhitespace TextGridStyle ) "},{"id":288,"href":"/docs/api/widget/textsegment/","title":"widget.TextSegment","section":"widget","content":"widget.TextSegment\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype TextSegment\r#\r\rtype TextSegment struct { \tStyle RichTextStyle \tText string } TextSegment represents the styling for a segment of rich text.\nSince: \r2.1\rfunc (*TextSegment) Inline\r#\r\rfunc (t *TextSegment) Inline() bool Inline should return true if this text can be included within other elements, or false if it creates a new block.\nfunc (*TextSegment) Select\r#\r\rfunc (t *TextSegment) Select(begin, end fyne.Position) Select tells the segment that the user is selecting the content between the two positions.\nfunc (*TextSegment) SelectedText\r#\r\rfunc (t *TextSegment) SelectedText() string SelectedText should return the text representation of any content currently selected through the Select call.\nfunc (*TextSegment) Textual\r#\r\rfunc (t *TextSegment) Textual() string Textual returns the content of this segment rendered to plain text.\nfunc (*TextSegment) Unselect\r#\r\rfunc (t *TextSegment) Unselect() Unselect tells the segment that the user is has cancelled the previous selection.\nfunc (*TextSegment) Update\r#\r\rfunc (t *TextSegment) Update(o fyne.CanvasObject) Update applies the current state of this text segment to an existing visual.\nfunc (*TextSegment) Visual\r#\r\rfunc (t *TextSegment) Visual() fyne.CanvasObject Visual returns the graphical elements required to render this segment.\n"},{"id":289,"href":"/docs/api/widget/toolbar/","title":"widget.Toolbar","section":"widget","content":"widget.Toolbar\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Toolbar\r#\r\rtype Toolbar struct { \tBaseWidget \tItems []ToolbarItem } Toolbar widget creates a horizontal list of tool buttons\nfunc NewToolbar\r#\r\rfunc NewToolbar(items ...ToolbarItem) *Toolbar NewToolbar creates a new toolbar widget.\nfunc (*Toolbar) Append\r#\r\rfunc (t *Toolbar) Append(item ToolbarItem) Append a new ToolbarItem to the end of this Toolbar\nfunc (*Toolbar) CreateRenderer\r#\r\rfunc (t *Toolbar) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer\nfunc (*Toolbar) MinSize\r#\r\rfunc (t *Toolbar) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below\nfunc (*Toolbar) Prepend\r#\r\rfunc (t *Toolbar) Prepend(item ToolbarItem) Prepend a new ToolbarItem to the start of this Toolbar\n"},{"id":290,"href":"/docs/api/widget/toolbaraction/","title":"widget.ToolbarAction","section":"widget","content":"widget.ToolbarAction\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ToolbarAction\r#\r\rtype ToolbarAction struct { \tIcon fyne.Resource \tOnActivated func() `json:\u0026#34;-\u0026#34;` } ToolbarAction is push button style of ToolbarItem\nfunc (*ToolbarAction) ToolbarObject\r#\r\rfunc (t *ToolbarAction) ToolbarObject() fyne.CanvasObject ToolbarObject gets a button to render this ToolbarAction\n"},{"id":291,"href":"/docs/api/widget/toolbaritem/","title":"widget.ToolbarItem","section":"widget","content":"widget.ToolbarItem\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ToolbarItem\r#\r\rtype ToolbarItem interface { \tToolbarObject() fyne.CanvasObject } ToolbarItem represents any interface element that can be added to a toolbar\nfunc NewToolbarAction\r#\r\rfunc NewToolbarAction(icon fyne.Resource, onActivated func()) ToolbarItem NewToolbarAction returns a new push button style ToolbarItem\nfunc NewToolbarSeparator\r#\r\rfunc NewToolbarSeparator() ToolbarItem NewToolbarSeparator returns a new separator item for a Toolbar to assist with ToolbarItem grouping\nfunc NewToolbarSpacer\r#\r\rfunc NewToolbarSpacer() ToolbarItem NewToolbarSpacer returns a new spacer item for a Toolbar to assist with ToolbarItem alignment\n"},{"id":292,"href":"/docs/api/widget/toolbarseparator/","title":"widget.ToolbarSeparator","section":"widget","content":"widget.ToolbarSeparator\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ToolbarSeparator\r#\r\rtype ToolbarSeparator struct { } ToolbarSeparator is a thin, visible divide that can be added to a Toolbar. This is typically used to assist visual grouping of ToolbarItems.\nfunc (*ToolbarSeparator) ToolbarObject\r#\r\rfunc (t *ToolbarSeparator) ToolbarObject() fyne.CanvasObject ToolbarObject gets the visible line object for this ToolbarSeparator\n"},{"id":293,"href":"/docs/api/widget/toolbarspacer/","title":"widget.ToolbarSpacer","section":"widget","content":"widget.ToolbarSpacer\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype ToolbarSpacer\r#\r\rtype ToolbarSpacer struct { } ToolbarSpacer is a blank, stretchable space for a toolbar. This is typically used to assist layout if you wish some left and some right aligned items. Space will be split evebly amongst all the spacers on a toolbar.\nfunc (*ToolbarSpacer) ToolbarObject\r#\r\rfunc (t *ToolbarSpacer) ToolbarObject() fyne.CanvasObject ToolbarObject gets the actual spacer object for this ToolbarSpacer\n"},{"id":294,"href":"/docs/api/widget/tree/","title":"widget.Tree","section":"widget","content":"widget.Tree\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype Tree\r#\r\rtype Tree struct { \tBaseWidget \tRoot TreeNodeID  \tChildUIDs func(uid TreeNodeID) (c []TreeNodeID) // Return a sorted slice of Children TreeNodeIDs for the given Node TreeNodeID \tCreateNode func(branch bool) (o fyne.CanvasObject) // Return a CanvasObject that can represent a Branch (if branch is true), or a Leaf (if branch is false) \tIsBranch func(uid TreeNodeID) (ok bool) // Return true if the given TreeNodeID represents a Branch \tOnBranchClosed func(uid TreeNodeID) // Called when a Branch is closed \tOnBranchOpened func(uid TreeNodeID) // Called when a Branch is opened \tOnSelected func(uid TreeNodeID) // Called when the Node with the given TreeNodeID is selected. \tOnUnselected func(uid TreeNodeID) // Called when the Node with the given TreeNodeID is unselected. \tUpdateNode func(uid TreeNodeID, branch bool, node fyne.CanvasObject) // Called to update the given CanvasObject to represent the data at the given TreeNodeID } Tree widget displays hierarchical data. Each node of the tree must be identified by a Unique TreeNodeID.\nSince: \r1.4\rfunc NewTree\r#\r\rfunc NewTree(childUIDs func(TreeNodeID) []TreeNodeID, isBranch func(TreeNodeID) bool, create func(bool) fyne.CanvasObject, update func(TreeNodeID, bool, fyne.CanvasObject)) *Tree NewTree returns a new performant tree widget defined by the passed functions. childUIDs returns the child TreeNodeIDs of the given node. isBranch returns true if the given node is a branch, false if it is a leaf. create returns a new template object that can be cached. update is used to apply data at specified data location to the passed template CanvasObject.\nSince: \r1.4\rfunc NewTreeWithStrings\r#\r\rfunc NewTreeWithStrings(data map[string][]string) (t *Tree) NewTreeWithStrings creates a new tree with the given string map. Data must contain a mapping for the root, which defaults to empty string (\u0026quot;\u0026quot;).\nSince: \r1.4\rfunc (*Tree) CloseAllBranches\r#\r\rfunc (t *Tree) CloseAllBranches() CloseAllBranches closes all branches in the tree.\nfunc (*Tree) CloseBranch\r#\r\rfunc (t *Tree) CloseBranch(uid TreeNodeID) CloseBranch closes the branch with the given TreeNodeID.\nfunc (*Tree) CreateRenderer\r#\r\rfunc (t *Tree) CreateRenderer() fyne.WidgetRenderer CreateRenderer is a private method to Fyne which links this widget to its renderer.\nfunc (*Tree) IsBranchOpen\r#\r\rfunc (t *Tree) IsBranchOpen(uid TreeNodeID) bool IsBranchOpen returns true if the branch with the given TreeNodeID is expanded.\nfunc (*Tree) MinSize\r#\r\rfunc (t *Tree) MinSize() fyne.Size MinSize returns the size that this widget should not shrink below.\nfunc (*Tree) OpenAllBranches\r#\r\rfunc (t *Tree) OpenAllBranches() OpenAllBranches opens all branches in the tree.\nfunc (*Tree) OpenBranch\r#\r\rfunc (t *Tree) OpenBranch(uid TreeNodeID) OpenBranch opens the branch with the given TreeNodeID.\nfunc (*Tree) Resize\r#\r\rfunc (t *Tree) Resize(size fyne.Size) Resize sets a new size for a widget.\nfunc (*Tree) ScrollTo\r#\r\rfunc (t *Tree) ScrollTo(uid TreeNodeID) ScrollTo scrolls to the node with the given id.\nSince 2.1\nfunc (*Tree) ScrollToBottom\r#\r\rfunc (t *Tree) ScrollToBottom() ScrollToBottom scrolls to the bottom of the tree.\nSince 2.1\nfunc (*Tree) ScrollToTop\r#\r\rfunc (t *Tree) ScrollToTop() ScrollToTop scrolls to the top of the tree.\nSince 2.1\nfunc (*Tree) Select\r#\r\rfunc (t *Tree) Select(uid TreeNodeID) Select marks the specified node to be selected.\nfunc (*Tree) ToggleBranch\r#\r\rfunc (t *Tree) ToggleBranch(uid string) ToggleBranch flips the state of the branch with the given TreeNodeID.\nfunc (*Tree) Unselect\r#\r\rfunc (t *Tree) Unselect(uid TreeNodeID) Unselect marks the specified node to be not selected.\nfunc (*Tree) UnselectAll\r#\r\rfunc (t *Tree) UnselectAll() UnselectAll sets all nodes to be not selected.\nSince: \r2.1\r"},{"id":295,"href":"/docs/api/widget/treenodeid/","title":"widget.TreeNodeID","section":"widget","content":"widget.TreeNodeID\r#\r\r import \u0026#34;fyne.io/fyne/v2/widget\u0026#34; Usage\r#\r\rtype TreeNodeID\r#\r\rtype TreeNodeID = string TreeNodeID represents the unique id of a tree node.\n"},{"id":296,"href":"/docs/extend/extending-widgets/","title":"组件扩展","section":"Fyne扩展","content":"组件扩展\r#\r\r 标准组件提供最少的功能和定制功能，来支持大部分案例。 某些时候我们需要更高级功能，那么开发者自己构建组件，不如直接在已有的组件扩展。\n例如我们扩展图标组件让它能被点击。 我们申明一个新的结构体嵌入widget.Icon类型。 我们新增一个构造函数让它可以调用ExtendBaseWidget函数。\nimport ( \t\u0026#34;fyne.io/fyne/v2\u0026#34; \t\u0026#34;fyne.io/fyne/v2/widget\u0026#34; )  type tappableIcon struct { \twidget.Icon }  func newTappableIcon(res fyne.Resource) *tappableIcon { \ticon := \u0026amp;tappableIcon{} \ticon.ExtendBaseWidget(icon) \ticon.SetResource(res)  \treturn icon }  **注意：**像widget.NewIcon函数可能不会用于扩展，因为它已经调用了 。\n 然后，我们添加新函数来实现fyne.Tappable接口，添加这些函数后，每次用户点击我们的新图标时，都会调用新函数Tapped。所需的接口有两个函数Tapped(*PointEvent)和TappedSecondary(*PointEvent)，因此我们将两个都加上。\nimport \u0026#34;log\u0026#34;  func (t *tappableIcon) Tapped(_ *fyne.PointEvent) { \tlog.Println(\u0026#34;I have been tapped\u0026#34;) }  func (t *tappableIcon) TappedSecondary(_ *fyne.PointEvent) { } 我们可以使用简单的应用程序测试这个新的小部件，如下所示。\nimport (  \u0026#34;fyne.io/fyne/v2/app\u0026#34;  \u0026#34;fyne.io/fyne/v2/theme\u0026#34; )  func main() { \ta := app.New() \tw := a.NewWindow(\u0026#34;Tappable\u0026#34;) \tw.SetContent(newTappableIcon(theme.FyneLogo())) \tw.ShowAndRun() } "}]