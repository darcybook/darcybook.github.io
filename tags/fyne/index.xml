<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fyne on Hugo Book</title>
    <link>https://darcybook.github.io/tags/fyne/</link>
    <description>Recent content in fyne on Hugo Book</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 18 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://darcybook.github.io/tags/fyne/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello World</title>
      <link>https://darcybook.github.io/docs/started/helloword/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/helloword/</guid>
      <description>开始你的第一个app# 完成入门文档中的步骤后，即可开始构建您的第一个应用。为了说明这个过程，我们将构建一个简单的 hello world 应用程序。
用app.New()建立一个简单的app，然后用app.NewWindow()打开一个窗口。用SetContent()将控件数添加到窗口上。最后利用ShowAndRun()运行你的app UI就会显示了
package main  import ( 	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.io/fyne/v2/widget&amp;#34; )  func main() { 	a := app.New() 	w := a.NewWindow(&amp;#34;Hello World&amp;#34;)  	w.SetContent(widget.NewLabel(&amp;#34;Hello World!&amp;#34;)) 	w.ShowAndRun() } ShowAndRun()可以使用该命令生成上述代码，然后通过运行go build .该命令或双击图标来执行该代码。您也可以绕过编译步骤，直接使用go run .运行代码。
这两种方法都会显示一个窗口，如下所示：
如果您更喜欢浅色主题，那么只需设置环境变量FYNE_THEME=light，您将获得：
这就是入门的全部内容。要了解更多信息，您可以阅读完整的API文档。</description>
    </item>
    
    <item>
      <title>更新 content</title>
      <link>https://darcybook.github.io/docs/started/updating/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/updating/</guid>
      <description>更新 content# 完成hello world教程或其他示例后，您将创建一个基本的用户界面。在此页面中，我们将了解如何从代码中更新 GUI 的content。
第一步是将要更新的小部件分配给变量。在 hello world 教程中，我们直接传入 widget.NewLabel 到 SetContent()，为了更新它，我们将其更改为两行不同的行，例如：
	clock := widget.NewLabel(&amp;#34;&amp;#34;) 	w.SetContent(clock) 只要content被分配给变量，我们就可以调用类似SetText(&amp;quot;new text&amp;quot;)。对于我们的示例，我们将在Time.Format的帮助下将标签的content设置为当前时间。
	formatted := time.Now().Format(&amp;#34;Time: 03:04:05&amp;#34;) 	clock.SetText(formatted) 这就是我们需要去改变可见元素的content的全部操作（有关完整代码，请参见下文）。 但是,我们可以更进一步的定期更新content。
后台背景执行#大多数应用程序都需要具有在后台运行的进程，例如下载数据或响应事件。为了模拟这一点，我们将扩展上面的代码以每秒运行一次。
与大多数go代码一样，我们可以创建一个goroutine（使用go关键字）并在那里运行我们的代码。如果我们将文本更新代码移动到新函数，则可以在初始显示和计时器上调用它以进行定期更新。通过将 goroutine 和内部time.Tick 循环组合在一起，我们可以每秒更新一次label。
	go func() { 	for range time.Tick(time.Second) { 	updateTime(clock) 	} 	}() 注意,将此代码放在ShowAndRun 或 Run调用之前，因为它们在应用程序关闭之前不会return。最终运行结果，代码将每秒运行并更新用户界面，从而创建一个基本的时钟小部件。完整代码如下：
package main  import ( 	&amp;#34;time&amp;#34;  	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.</description>
    </item>
    
    <item>
      <title>窗口处理</title>
      <link>https://darcybook.github.io/docs/started/windows/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/windows/</guid>
      <description>窗口处理# Windows 是使用App.NewWindow()函数创建的，需要使用Show()函数进行显示。fyne.Window上ShowAndRun()的协助你同时显示并运行你的应用。
默认情况下，在通过MinSize()函数，窗口大小是正好可以显示content。
窗口的尺寸将是正确的，可以通过检查函数来显示其内容（后面的示例可以了解更多）。通过Window.Resize()可以设置一个更大的尺寸。函数需要传递具有长宽属性（基于设备无关像素，它在不同设备上将是相同的）的fyne.Size，例如默认情况下，要使用正方形，我们可以：
	w.Resize(fyne.NewSize(100, 100)) 要注意的是，桌面环境可能会显示窗口导致比实际的小。移动设备通常会忽略这一点，一般以全屏显示。
如果你向显示第二个窗口，你只需调用Show()。如果你的应用程序启动时，要打开多个窗口，那么将Window.Show() 和App.Run()分开是个不错的选择。下面的例子，介绍了怎么运行时打开两个窗口：
package main  import ( 	&amp;#34;fyne.io/fyne/v2&amp;#34; 	&amp;#34;fyne.io/fyne/v2/app&amp;#34; 	&amp;#34;fyne.io/fyne/v2/widget&amp;#34; )  func main() { 	a := app.New() 	w := a.NewWindow(&amp;#34;Hello World&amp;#34;)  	w.SetContent(widget.NewLabel(&amp;#34;Hello World!&amp;#34;)) 	w.Show()  	w2 := a.NewWindow(&amp;#34;Larger&amp;#34;) 	w2.SetContent(widget.NewLabel(&amp;#34;More content&amp;#34;)) 	w2.Resize(fyne.NewSize(100, 100)) 	w2.Show()  	a.Run() } 上述应用程序将在两个窗口都关闭时退出。 如果你向将应用设为一个主窗口，一个是附属窗口，你可以将主窗口设置master，这样主窗口关闭时，其它窗口也会关闭。在Window上调用SetMaster()，可以完成设置。
Windows可以随时创建，我们可以修改上面的代码，新增一个窗口（w2），点击一个按钮可以打开新窗口。你可以从更复杂的工作流中加载窗口，但要注意新窗口通常显示在当前活动content的上方。
	w2.SetContent(widget.NewButton(&amp;#34;Open new&amp;#34;, func() { 	w3 := a.</description>
    </item>
    
    <item>
      <title>单元测试</title>
      <link>https://darcybook.github.io/docs/started/testing/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/testing/</guid>
      <description>测试图形应用# 一个好的测试组件应该时能快速写测试单元并定期运行。 Fyne 的 API非常容易写测试。将组件逻辑和渲染逻辑分离，我们可以加载程序的时候不用显示它们来进行测试功能。
示例#我们可以通过扩展我们的Hello World应用程序来演示单元测试，增加让用户输入他们姓名的控件。 我们用Label录入姓名，一个Entry来显示欢迎词。我们用container.NewVBox将一个显示在另一个上面。 更新的用户界面如下：
func makeUI() (*widget.Label, *widget.Entry) { 	return widget.NewLabel(&amp;#34;Hello world!&amp;#34;), 	widget.NewEntry() }  func main() { 	a := app.New() 	w := a.NewWindow(&amp;#34;Hello Person&amp;#34;)  	w.SetContent(container.NewVBox(makeUI())) 	w.ShowAndRun() } 为了测试此输入动作，我们创建一个包含TestGreeter测试函数的的新文件（名称结尾需要是_test.go，才会识别位测试文件）。
package main  import (  &amp;#34;testing&amp;#34; )  func TestGreeting(t *testing.T) { } 我们可以添加一个验证初始状态的初始测试，为此，我们断言Label的Text返回的字段，如果测试不正确，则抛出一个错误。将以下代码添加到测试方法中：
	out, in := makeUI()  	if out.</description>
    </item>
    
    <item>
      <title>打包</title>
      <link>https://darcybook.github.io/docs/started/packaging/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/packaging/</guid>
      <description>打包# 桌面程序打包# 打包图形应用程序以进行分发可能很复杂。图形应用程序通常具有与其关联的图标和元数据，以及与每个环境集成所需的特定格式。Windows可执行文件需要嵌入式图标，macOS应用程序是捆绑包，Linux应该安装各种元数据文件。真是麻烦！
值得庆幸的是，fyne应用程序具有可以自动处理此情况的package命令。只需指定目标操作系统和任何所需的元数据（如 icon）即可生成相应的程序包。图标转换将自动完成.icns或.ico因此只需提供.png文件 :) 即可。您所需要的只是已经为目标平台构建了应用程序&amp;hellip;
go install fyne.io/fyne/v2/cmd/fyne@latest fyne package -os darwin -icon myapp.png 如果您使用的是较旧版本的 Go （&amp;lt;1.16），则应使用go get命令安装
go get fyne.io/fyne/v2/cmd/fyne fyne package -os darwin -icon myapp.png 将创建 myapp.app，这是一个完整的捆绑包结构，用于分发给macOS用户。然后，您也可以构建Linux和Windows版本&amp;hellip;
fyne package -os linux -icon myapp.pngfyne package -os windows -icon myapp.png 这些命令将创建：
 myapp.tar.gz包含一个从 usr/local/ 开始的文件夹结构，Linux 用户可以扩展到其系统的根目录。 myapp.exe（在第二次生成之后，这是 windows 包所必需的）将嵌入图标和应用元数据。  如果您只想在自己的计算机上安装桌面应用程序，则可以使用有用的安装子命令。例如，要在系统范围内安装当前应用程序，您只需执行以下操作：
fyne install -icon myapp.png 所有这些命令还支持Icon.png的默认图标文件，以便您可以避免为每次执行键入参数。从Fyne 2.1开始，还有一个元数据文件文件，您可以在其中为项目设置默认选项。
当然，如果您愿意，您仍然可以使用标准的Go工具运行应用程序。</description>
    </item>
    
    <item>
      <title>移动端打包</title>
      <link>https://darcybook.github.io/docs/started/mobile/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/mobile/</guid>
      <description>移动端打包# 你的 Fyne 应用代码将作为移动应用开箱即用，就像它在桌面上一样。但是，打包代码以进行分发会稍微复杂一些。此页面将探讨执行此操作以在iOS和Android上获取应用程序的过程。
首先，您需要安装更多的开发工具才能完成移动打包。对于 Android 版本，您必须安装 Android SDK 和 NDK 并设置适当的环境，以便在命令行上找到这些工具（如adb）。要构建iOS应用程序，您需要在macOS计算机上安装Xcode以及命令行工具可选包。
一旦你有了一个工作开发环境，打包就很简单了。要为Android和iOS构建应用程序，以下命令将为您完成所有操作。请确保具有唯一的应用程序标识符，因为在首次发布后不要轻易更改这些标识符。
fyne package -os android -appID com.example.myapp -icon mobileIcon.pngfyne package -os ios -appID com.example.myapp -icon mobileIcon.png 完成这些命令后（首次编译可能需要一些时间），您将在目录中看到两个新文件，myapp.apk以及 myapp.app。您将看到后者与darwin应用程序包具有相同的名称 &amp;ndash; 不要被它们迷惑了，因为它们在darwin上不起作用。 要在手机或模拟器上安装Android应用程序，只需运行：
To install the android app on your phone or a simulator simply call:
adb install myapp.apk 要在设备上安装iOS，请打开Xcode，然后在“窗口”菜单中选择“设备和模拟器”菜单项。然后找到你的手机并将myapp.app图标拖到你的应用列表上。要在模拟器上安装，可以使用命令行工具，如下所示：
xcrun simctl install booted myapp.app </description>
    </item>
    
    <item>
      <title>元数据</title>
      <link>https://darcybook.github.io/docs/started/metadata/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/docs/started/metadata/</guid>
      <description>元数据# App 元数据# fyne自v2.1.0 版本起，我们支持元数据文件，该文件允许您在存储库中存储有关应用程序的信息。此文件是可选的，但有助于避免必须记住每个包和 release 命令的特定生成参数。
文件需要命名为FyneApp.toml，目录为你运行的fyne目录，（通常是main包位置）。 文件内容如下所示：
Website = &amp;#34;https://example.com&amp;#34;  [Details] Icon = &amp;#34;Icon.png&amp;#34; Name = &amp;#34;My App&amp;#34; ID = &amp;#34;com.example.app&amp;#34; Version = &amp;#34;1.0.0&amp;#34; Build = 1 该文件的顶部是元数据，如果将应用上传到 https://apps.fyne.io 列表页面，将使用元数据，因此它是可选的。[详细信息] 部分包含其他应用商店和操作系统在发布过程中使用的有关应用程序的数据。如果找到此文件，fyne 工具将使用该文件，如果元数据存在，则不需要许多必需的命令参数。您仍然可以使用命令行参数覆盖这些值。</description>
    </item>
    
  </channel>
</rss>
