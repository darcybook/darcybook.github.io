<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>api on darcy&#39;s</title>
    <link>https://darcybook.github.io/fyne/tags/api/</link>
    <description>Recent content in api on darcy&#39;s</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://darcybook.github.io/fyne/tags/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>app</title>
      <link>https://darcybook.github.io/fyne/docs/api/app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/app/</guid>
      <description>app# import &amp;#34;fyne.io/fyne/v2/app&amp;#34; Package app provides app implementations for working with Fyne graphical interfaces. The fastest way to get started is to call app.New() which will normally load a new desktop application. If the &amp;ldquo;ci&amp;rdquo; tag is passed to go (go run -tags ci myapp.go) it will run an in-memory application.
Usage#func New#func New() fyne.App New returns a new application instance with the default driver and no unique ID</description>
    </item>
    
    <item>
      <title>app.SettingsSchema</title>
      <link>https://darcybook.github.io/fyne/docs/api/app/settingsschema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/app/settingsschema/</guid>
      <description>app.SettingsSchema# import &amp;#34;fyne.io/fyne/v2/app&amp;#34; Usage#type SettingsSchema#type SettingsSchema struct { 	// these items are used for global settings load 	ThemeName string `json:&amp;#34;theme&amp;#34;` 	Scale float32 `json:&amp;#34;scale&amp;#34;` 	PrimaryColor string `json:&amp;#34;primary_color&amp;#34;` } SettingsSchema is used for loading and storing global settings
func (*SettingsSchema) StoragePath#func (sc *SettingsSchema) StoragePath() string StoragePath returns the location of the settings storage</description>
    </item>
    
    <item>
      <title>binding</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/</guid>
      <description>binding# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#types# Bool BoolList DataItem DataList DataListener DataMap ExternalBool ExternalBoolList ExternalFloat ExternalFloatList ExternalInt ExternalIntList ExternalRune ExternalRuneList ExternalString ExternalStringList ExternalURI ExternalURIList ExternalUntyped ExternalUntypedList ExternalUntypedMap Float FloatList Int IntList Rune RuneList String StringList Struct URI URIList Untyped UntypedList UntypedMap  </description>
    </item>
    
    <item>
      <title>binding.Bool</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/bool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/bool/</guid>
      <description>binding.Bool# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Bool#type Bool interface { 	DataItem 	Get() (bool, error) 	Set(bool) error } Bool supports binding a bool value.
Since: 2.0func BindPreferenceBool#func BindPreferenceBool(key string, p fyne.Preferences) Bool BindPreferenceBool returns a bindable bool value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.</description>
    </item>
    
    <item>
      <title>binding.BoolList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/boollist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/boollist/</guid>
      <description>binding.BoolList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type BoolList#type BoolList interface { 	DataList  	Append(value bool) error 	Get() ([]bool, error) 	GetValue(index int) (bool, error) 	Prepend(value bool) error 	Set(list []bool) error 	SetValue(index int, value bool) error } BoolList supports binding a list of bool values.
Since: 2.0func NewBoolList#func NewBoolList() BoolList NewBoolList returns a bindable list of bool values.</description>
    </item>
    
    <item>
      <title>binding.DataItem</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/dataitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/dataitem/</guid>
      <description>binding.DataItem# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type DataItem#type DataItem interface { 	// AddListener attaches a new change listener to this DataItem. 	// Listeners are called each time the data inside this DataItem changes. 	// Additionally the listener will be triggered upon successful connection to get the current value. 	AddListener(DataListener) 	// RemoveListener will detach the specified change listener from the DataItem.</description>
    </item>
    
    <item>
      <title>binding.DataList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/datalist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/datalist/</guid>
      <description>binding.DataList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type DataList#type DataList interface { 	DataItem 	GetItem(index int) (DataItem, error) 	Length() int } DataList is the base interface for all bindable data lists.
Since: 2.0</description>
    </item>
    
    <item>
      <title>binding.DataListener</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/datalistener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/datalistener/</guid>
      <description>binding.DataListener# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type DataListener#type DataListener interface { 	DataChanged() } DataListener is any object that can register for changes in a bindable DataItem. See NewDataListener to define a new listener using just an inline function.
Since: 2.0func NewDataListener#func NewDataListener(fn func()) DataListener NewDataListener is a helper function that creates a new listener type from a simple callback function.</description>
    </item>
    
    <item>
      <title>binding.DataMap</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/datamap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/datamap/</guid>
      <description>binding.DataMap# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type DataMap#type DataMap interface { 	DataItem 	GetItem(string) (DataItem, error) 	Keys() []string } DataMap is the base interface for all bindable data maps.
Since: 2.0</description>
    </item>
    
    <item>
      <title>binding.ExternalBool</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalbool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalbool/</guid>
      <description>binding.ExternalBool# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalBool#type ExternalBool interface { 	Bool 	Reload() error } ExternalBool supports binding a bool value to an external value.
Since: 2.0func BindBool#func BindBool(v *bool) ExternalBool BindBool returns a new bindable value that controls the contents of the provided bool variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalBoolList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalboollist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalboollist/</guid>
      <description>binding.ExternalBoolList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalBoolList#type ExternalBoolList interface { 	BoolList  	Reload() error } ExternalBoolList supports binding a list of bool values from an external variable.
Since: 2.0func BindBoolList#func BindBoolList(v *[]bool) ExternalBoolList BindBoolList returns a bound list of bool values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalFloat</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalfloat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalfloat/</guid>
      <description>binding.ExternalFloat# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalFloat#type ExternalFloat interface { 	Float 	Reload() error } ExternalFloat supports binding a float64 value to an external value.
Since: 2.0func BindFloat#func BindFloat(v *float64) ExternalFloat BindFloat returns a new bindable value that controls the contents of the provided float64 variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalFloatList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalfloatlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalfloatlist/</guid>
      <description>binding.ExternalFloatList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalFloatList#type ExternalFloatList interface { 	FloatList  	Reload() error } ExternalFloatList supports binding a list of float64 values from an external variable.
Since: 2.0func BindFloatList#func BindFloatList(v *[]float64) ExternalFloatList BindFloatList returns a bound list of float64 values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalInt</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalint/</guid>
      <description>binding.ExternalInt# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalInt#type ExternalInt interface { 	Int 	Reload() error } ExternalInt supports binding a int value to an external value.
Since: 2.0func BindInt#func BindInt(v *int) ExternalInt BindInt returns a new bindable value that controls the contents of the provided int variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalIntList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalintlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalintlist/</guid>
      <description>binding.ExternalIntList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalIntList#type ExternalIntList interface { 	IntList  	Reload() error } ExternalIntList supports binding a list of int values from an external variable.
Since: 2.0func BindIntList#func BindIntList(v *[]int) ExternalIntList BindIntList returns a bound list of int values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalRune</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalrune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalrune/</guid>
      <description>binding.ExternalRune# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalRune#type ExternalRune interface { 	Rune 	Reload() error } ExternalRune supports binding a rune value to an external value.
Since: 2.0func BindRune#func BindRune(v *rune) ExternalRune BindRune returns a new bindable value that controls the contents of the provided rune variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalRuneList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalrunelist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalrunelist/</guid>
      <description>binding.ExternalRuneList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalRuneList#type ExternalRuneList interface { 	RuneList  	Reload() error } ExternalRuneList supports binding a list of rune values from an external variable.
Since: 2.0func BindRuneList#func BindRuneList(v *[]rune) ExternalRuneList BindRuneList returns a bound list of rune values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalString</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalstring/</guid>
      <description>binding.ExternalString# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalString#type ExternalString interface { 	String 	Reload() error } ExternalString supports binding a string value to an external value.
Since: 2.0func BindString#func BindString(v *string) ExternalString BindString returns a new bindable value that controls the contents of the provided string variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalStringList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalstringlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalstringlist/</guid>
      <description>binding.ExternalStringList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalStringList#type ExternalStringList interface { 	StringList  	Reload() error } ExternalStringList supports binding a list of string values from an external variable.
Since: 2.0func BindStringList#func BindStringList(v *[]string) ExternalStringList BindStringList returns a bound list of string values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalUntyped</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externaluntyped/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externaluntyped/</guid>
      <description>binding.ExternalUntyped# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalUntyped#type ExternalUntyped interface { 	Untyped 	Reload() error } ExternalUntyped supports binding a interface{} value to an external value.
Since: 2.1func BindUntyped#func BindUntyped(v interface{}) ExternalUntyped BindUntyped returns a bindable interface{} value that is bound to an external type. The parameter must be a pointer to the type you wish to bind.</description>
    </item>
    
    <item>
      <title>binding.ExternalUntypedList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externaluntypedlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externaluntypedlist/</guid>
      <description>binding.ExternalUntypedList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalUntypedList#type ExternalUntypedList interface { 	UntypedList  	Reload() error } ExternalUntypedList supports binding a list of interface{} values from an external variable.
Since: 2.1func BindUntypedList#func BindUntypedList(v *[]interface{}) ExternalUntypedList BindUntypedList returns a bound list of interface{} values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalUntypedMap</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externaluntypedmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externaluntypedmap/</guid>
      <description>binding.ExternalUntypedMap# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalUntypedMap#type ExternalUntypedMap interface { 	UntypedMap 	Reload() error } ExternalUntypedMap is a map data binding with all values untyped (interface{}), connected to an external data source.
Since: 2.0func BindUntypedMap#func BindUntypedMap(d *map[string]interface{}) ExternalUntypedMap BindUntypedMap creates a new map binding of string to interface{} based on the data passed. If your code changes the content of the map this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalURI</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externaluri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externaluri/</guid>
      <description>binding.ExternalURI# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalURI#type ExternalURI interface { 	URI 	Reload() error } ExternalURI supports binding a fyne.URI value to an external value.
Since: 2.1func BindURI#func BindURI(v *fyne.URI) ExternalURI BindURI returns a new bindable value that controls the contents of the provided fyne.URI variable. If your code changes the content of the variable this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.ExternalURIList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/externalurilist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/externalurilist/</guid>
      <description>binding.ExternalURIList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type ExternalURIList#type ExternalURIList interface { 	URIList  	Reload() error } ExternalURIList supports binding a list of fyne.URI values from an external variable.
Since: 2.1func BindURIList#func BindURIList(v *[]fyne.URI) ExternalURIList BindURIList returns a bound list of fyne.URI values, based on the contents of the passed slice. If your code changes the content of the slice this refers to you should call Reload() to inform the bindings.</description>
    </item>
    
    <item>
      <title>binding.Float</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/float/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/float/</guid>
      <description>binding.Float# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Float#type Float interface { 	DataItem 	Get() (float64, error) 	Set(float64) error } Float supports binding a float64 value.
Since: 2.0func BindPreferenceFloat#func BindPreferenceFloat(key string, p fyne.Preferences) Float BindPreferenceFloat returns a bindable float64 value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.</description>
    </item>
    
    <item>
      <title>binding.FloatList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/floatlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/floatlist/</guid>
      <description>binding.FloatList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type FloatList#type FloatList interface { 	DataList  	Append(value float64) error 	Get() ([]float64, error) 	GetValue(index int) (float64, error) 	Prepend(value float64) error 	Set(list []float64) error 	SetValue(index int, value float64) error } FloatList supports binding a list of float64 values.
Since: 2.0func NewFloatList#func NewFloatList() FloatList NewFloatList returns a bindable list of float64 values.</description>
    </item>
    
    <item>
      <title>binding.Int</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/int/</guid>
      <description>binding.Int# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Int#type Int interface { 	DataItem 	Get() (int, error) 	Set(int) error } Int supports binding a int value.
Since: 2.0func BindPreferenceInt#func BindPreferenceInt(key string, p fyne.Preferences) Int BindPreferenceInt returns a bindable int value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.</description>
    </item>
    
    <item>
      <title>binding.IntList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/intlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/intlist/</guid>
      <description>binding.IntList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type IntList#type IntList interface { 	DataList  	Append(value int) error 	Get() ([]int, error) 	GetValue(index int) (int, error) 	Prepend(value int) error 	Set(list []int) error 	SetValue(index int, value int) error } IntList supports binding a list of int values.
Since: 2.0func NewIntList#func NewIntList() IntList NewIntList returns a bindable list of int values.</description>
    </item>
    
    <item>
      <title>binding.Rune</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/rune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/rune/</guid>
      <description>binding.Rune# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Rune#type Rune interface { 	DataItem 	Get() (rune, error) 	Set(rune) error } Rune supports binding a rune value.
Since: 2.0func NewRune#func NewRune() Rune NewRune returns a bindable rune value that is managed internally.
Since: 2.0</description>
    </item>
    
    <item>
      <title>binding.RuneList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/runelist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/runelist/</guid>
      <description>binding.RuneList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type RuneList#type RuneList interface { 	DataList  	Append(value rune) error 	Get() ([]rune, error) 	GetValue(index int) (rune, error) 	Prepend(value rune) error 	Set(list []rune) error 	SetValue(index int, value rune) error } RuneList supports binding a list of rune values.
Since: 2.0func NewRuneList#func NewRuneList() RuneList NewRuneList returns a bindable list of rune values.</description>
    </item>
    
    <item>
      <title>binding.String</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/string/</guid>
      <description>binding.String# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type String#type String interface { 	DataItem 	Get() (string, error) 	Set(string) error } String supports binding a string value.
Since: 2.0func BindPreferenceString#func BindPreferenceString(key string, p fyne.Preferences) String BindPreferenceString returns a bindable string value that is managed by the application preferences. Changes to this value will be saved to application storage and when the app starts the previous values will be read.</description>
    </item>
    
    <item>
      <title>binding.StringList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/stringlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/stringlist/</guid>
      <description>binding.StringList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type StringList#type StringList interface { 	DataList  	Append(value string) error 	Get() ([]string, error) 	GetValue(index int) (string, error) 	Prepend(value string) error 	Set(list []string) error 	SetValue(index int, value string) error } StringList supports binding a list of string values.
Since: 2.0func NewStringList#func NewStringList() StringList NewStringList returns a bindable list of string values.</description>
    </item>
    
    <item>
      <title>binding.Struct</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/struct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/struct/</guid>
      <description>binding.Struct# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Struct#type Struct interface { 	DataMap 	GetValue(string) (interface{}, error) 	SetValue(string, interface{}) error 	Reload() error } Struct is the base interface for a bound struct type.
Since: 2.0func BindStruct#func BindStruct(i interface{}) Struct BindStruct creates a new map binding of string to interface{} using the struct passed as data. The key for each item is a string representation of each exported field with the value set as an interface{}.</description>
    </item>
    
    <item>
      <title>binding.Untyped</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/untyped/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/untyped/</guid>
      <description>binding.Untyped# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type Untyped#type Untyped interface { 	DataItem 	Get() (interface{}, error) 	Set(interface{}) error } Untyped supports binding a interface{} value.
Since: 2.1func NewUntyped#func NewUntyped() Untyped NewUntyped returns a bindable interface{} value that is managed internally.
Since: 2.1</description>
    </item>
    
    <item>
      <title>binding.UntypedList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/untypedlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/untypedlist/</guid>
      <description>binding.UntypedList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type UntypedList#type UntypedList interface { 	DataList  	Append(value interface{}) error 	Get() ([]interface{}, error) 	GetValue(index int) (interface{}, error) 	Prepend(value interface{}) error 	Set(list []interface{}) error 	SetValue(index int, value interface{}) error } UntypedList supports binding a list of interface{} values.
Since: 2.1func NewUntypedList#func NewUntypedList() UntypedList NewUntypedList returns a bindable list of interface{} values.</description>
    </item>
    
    <item>
      <title>binding.UntypedMap</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/untypedmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/untypedmap/</guid>
      <description>binding.UntypedMap# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type UntypedMap#type UntypedMap interface { 	DataMap 	Delete(string) 	Get() (map[string]interface{}, error) 	GetValue(string) (interface{}, error) 	Set(map[string]interface{}) error 	SetValue(string, interface{}) error } UntypedMap is a map data binding with all values Untyped (interface{}).
Since: 2.0func NewUntypedMap#func NewUntypedMap() UntypedMap NewUntypedMap creates a new, empty map binding of string to interface{}.
Since: 2.</description>
    </item>
    
    <item>
      <title>binding.URI</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/uri/</guid>
      <description>binding.URI# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type URI#type URI interface { 	DataItem 	Get() (fyne.URI, error) 	Set(fyne.URI) error } URI supports binding a fyne.URI value.
Since: 2.1func NewURI#func NewURI() URI NewURI returns a bindable fyne.URI value that is managed internally.
Since: 2.1func StringToURI#func StringToURI(str String) URI StringToURI creates a binding that connects a String data item to a URI.</description>
    </item>
    
    <item>
      <title>binding.URIList</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/binding/urilist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/binding/urilist/</guid>
      <description>binding.URIList# import &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; Usage#type URIList#type URIList interface { 	DataList  	Append(value fyne.URI) error 	Get() ([]fyne.URI, error) 	GetValue(index int) (fyne.URI, error) 	Prepend(value fyne.URI) error 	Set(list []fyne.URI) error 	SetValue(index int, value fyne.URI) error } URIList supports binding a list of fyne.URI values.
Since: 2.1func NewURIList#func NewURIList() URIList NewURIList returns a bindable list of fyne.</description>
    </item>
    
    <item>
      <title>canvas</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/</guid>
      <description>canvas# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Package canvas contains all of the primitive CanvasObjects that make up a Fyne GUI
The types implemented in this package are used as building blocks in order to build higher order functionality. These types are designed to be non-interactive, by design. If additional functonality is required, it&amp;rsquo;s usually a sign that this type should be used as part of a custom Widget.
Usage#const ( 	// DurationStandard is the time a standard interface animation will run.</description>
    </item>
    
    <item>
      <title>canvas.Circle</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/circle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/circle/</guid>
      <description>canvas.Circle# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Circle#type Circle struct { 	Position1 fyne.Position // The current top-left position of the Circle 	Position2 fyne.Position // The current bottomright position of the Circle 	Hidden bool // Is this circle currently hidden  	FillColor color.Color // The circle fill color 	StrokeColor color.Color // The circle stroke color 	StrokeWidth float32 // The stroke width of the circle } Circle describes a colored circle primitive in a Fyne canvas</description>
    </item>
    
    <item>
      <title>canvas.Image</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/image/</guid>
      <description>canvas.Image# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Image#type Image struct {  	// one of the following sources will provide our image data 	File string // Load the image from a file 	Resource fyne.Resource // Load the image from an in-memory resource 	Image image.Image // Specify a loaded image to use in this canvas object  	Translucency float64 // Set a translucency value &amp;gt; 0.</description>
    </item>
    
    <item>
      <title>canvas.ImageFill</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/imagefill/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/imagefill/</guid>
      <description>canvas.ImageFill# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type ImageFill#type ImageFill int ImageFill defines the different type of ways an image can stretch to fill its space.
const ( 	// ImageFillStretch will scale the image to match the Size() values. 	// This is the default and does not maintain aspect ratio. 	ImageFillStretch ImageFill = iota 	// ImageFillContain makes the image fit within the object Size(), 	// centrally and maintaining aspect ratio.</description>
    </item>
    
    <item>
      <title>canvas.ImageScale</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/imagescale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/imagescale/</guid>
      <description>canvas.ImageScale# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type ImageScale#type ImageScale int32 ImageScale defines the different scaling filters used to scaling images
const ( 	// ImageScaleSmooth will scale the image using ApproxBiLinear filter (or GL equivalent) 	ImageScaleSmooth ImageScale = 0 	// ImageScalePixels will scale the image using NearestNeighbor filter (or GL equivalent) 	ImageScalePixels ImageScale = 1 	// ImageScaleFastest will scale the image using hardware GPU if available 	// 	// Since: 2.</description>
    </item>
    
    <item>
      <title>canvas.Line</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/line/</guid>
      <description>canvas.Line# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Line#type Line struct { 	Position1 fyne.Position // The current top-left position of the Line 	Position2 fyne.Position // The current bottomright position of the Line 	Hidden bool // Is this Line currently hidden  	StrokeColor color.Color // The line stroke color 	StrokeWidth float32 // The stroke width of the line } Line describes a colored line primitive in a Fyne canvas.</description>
    </item>
    
    <item>
      <title>canvas.LinearGradient</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/lineargradient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/lineargradient/</guid>
      <description>canvas.LinearGradient# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type LinearGradient#type LinearGradient struct { 	StartColor color.Color // The beginning color of the gradient 	EndColor color.Color // The end color of the gradient 	Angle float64 // The angle of the gradient (0/180 for vertical; 90/270 for horizontal) } LinearGradient defines a Gradient travelling straight at a given angle. The only supported values for the angle are 0.</description>
    </item>
    
    <item>
      <title>canvas.RadialGradient</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/radialgradient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/radialgradient/</guid>
      <description>canvas.RadialGradient# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type RadialGradient#type RadialGradient struct { 	StartColor color.Color // The beginning color of the gradient 	EndColor color.Color // The end color of the gradient 	// The offset of the center for generation of the gradient. 	// This is not a DP measure but relates to the width/height. 	// A value of 0.5 would move the center by the half width/height.</description>
    </item>
    
    <item>
      <title>canvas.Raster</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/raster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/raster/</guid>
      <description>canvas.Raster# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Raster#type Raster struct {  	// Render the raster image from code 	Generator func(w, h int) image.Image  	// Set a translucency value &amp;gt; 0.0 to fade the raster 	Translucency float64 	// Specify the type of scaling interpolation applied to the raster if it is not full-size 	// Since: 1.4.1 	ScaleMode ImageScale } Raster describes a raster image area that can render in a Fyne canvas</description>
    </item>
    
    <item>
      <title>canvas.Rectangle</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/rectangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/rectangle/</guid>
      <description>canvas.Rectangle# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Rectangle#type Rectangle struct { 	FillColor color.Color // The rectangle fill color 	StrokeColor color.Color // The rectangle stroke color 	StrokeWidth float32 // The stroke width of the rectangle } Rectangle describes a colored rectangle primitive in a Fyne canvas
func NewRectangle#func NewRectangle(color color.Color) *Rectangle NewRectangle returns a new Rectangle instance
func (*Rectangle) Hide#func (r *Rectangle) Hide() Hide will set this object to not be visible.</description>
    </item>
    
    <item>
      <title>canvas.Text</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/text/</guid>
      <description>canvas.Text# import &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; Usage#type Text#type Text struct { 	Alignment fyne.TextAlign // The alignment of the text content  	Color color.Color // The main text draw color 	Text string // The string content of this Text 	TextSize float32 // Size of the text - if the Canvas scale is 1.0 this will be equivalent to point size 	TextStyle fyne.</description>
    </item>
    
    <item>
      <title>container</title>
      <link>https://darcybook.github.io/fyne/docs/api/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/container/</guid>
      <description>container# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Package container provides container widgets that are used to lay out and organise applications
Usage#const ( 	// ScrollBoth supports horizontal and vertical scrolling. 	ScrollBoth ScrollDirection = widget.ScrollBoth 	// ScrollHorizontalOnly specifies the scrolling should only happen left to right. 	ScrollHorizontalOnly = widget.ScrollHorizontalOnly 	// ScrollVerticalOnly specifies the scrolling should only happen top to bottom. 	ScrollVerticalOnly = widget.ScrollVerticalOnly 	// ScrollNone turns off scrolling for this container.</description>
    </item>
    
    <item>
      <title>container.AppTabs</title>
      <link>https://darcybook.github.io/fyne/docs/api/container/apptabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/container/apptabs/</guid>
      <description>container.AppTabs# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type AppTabs#type AppTabs struct { 	widget.BaseWidget  	Items []*TabItem  	// Deprecated: Use `OnSelected func(*TabItem)` instead. 	OnChanged func(*TabItem) 	OnSelected func(*TabItem) 	OnUnselected func(*TabItem) } AppTabs container is used to split your application into various different areas identified by tabs. The tabs contain text and/or an icon and allow the user to switch between the content specified in each TabItem.</description>
    </item>
    
    <item>
      <title>container.DocTabs</title>
      <link>https://darcybook.github.io/fyne/docs/api/container/doctabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/container/doctabs/</guid>
      <description>container.DocTabs# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type DocTabs#type DocTabs struct { 	widget.BaseWidget  	Items []*TabItem  	CreateTab func() *TabItem 	CloseIntercept func(*TabItem) 	OnClosed func(*TabItem) 	OnSelected func(*TabItem) 	OnUnselected func(*TabItem) } DocTabs container is used to display various pieces of content identified by tabs. The tabs contain text and/or an icon and allow the user to switch between the content specified in each TabItem.</description>
    </item>
    
    <item>
      <title>container.Scroll</title>
      <link>https://darcybook.github.io/fyne/docs/api/container/scroll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/container/scroll/</guid>
      <description>container.Scroll# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type Scroll#type Scroll = widget.Scroll Scroll defines a container that is smaller than the Content. The Offset is used to determine the position of the child widgets within the container.
Since: 1.4func NewHScroll#func NewHScroll(content fyne.CanvasObject) *Scroll NewHScroll create a scrollable parent wrapping the specified content. Note that this may cause the MinSize.Width to be smaller than that of the passed object.</description>
    </item>
    
    <item>
      <title>container.ScrollDirection</title>
      <link>https://darcybook.github.io/fyne/docs/api/container/scrolldirection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/container/scrolldirection/</guid>
      <description>container.ScrollDirection# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type ScrollDirection#type ScrollDirection = widget.ScrollDirection ScrollDirection represents the directions in which a Scroll container can scroll its child content.
Since: 1.4</description>
    </item>
    
    <item>
      <title>container.Split</title>
      <link>https://darcybook.github.io/fyne/docs/api/container/split/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/container/split/</guid>
      <description>container.Split# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type Split#type Split struct { 	widget.BaseWidget 	Offset float64 	Horizontal bool 	Leading fyne.CanvasObject 	Trailing fyne.CanvasObject } Split defines a container whose size is split between two children.
Since: 1.4func NewHSplit#func NewHSplit(leading, trailing fyne.CanvasObject) *Split NewHSplit creates a horizontally arranged container with the specified leading and trailing elements. A vertical split bar that can be dragged will be added between the elements.</description>
    </item>
    
    <item>
      <title>container.TabItem</title>
      <link>https://darcybook.github.io/fyne/docs/api/container/tabitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/container/tabitem/</guid>
      <description>container.TabItem# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type TabItem#type TabItem struct { 	Text string 	Icon fyne.Resource 	Content fyne.CanvasObject } TabItem represents a single view in a tab view. The Text and Icon are used for the tab button and the Content is shown when the corresponding tab is active.
Since: 1.4func NewTabItem#func NewTabItem(text string, content fyne.CanvasObject) *TabItem NewTabItem creates a new item for a tabbed widget - each item specifies the content and a label for its tab.</description>
    </item>
    
    <item>
      <title>container.TabLocation</title>
      <link>https://darcybook.github.io/fyne/docs/api/container/tablocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/container/tablocation/</guid>
      <description>container.TabLocation# import &amp;#34;fyne.io/fyne/v2/container&amp;#34; Usage#type TabLocation#type TabLocation int TabLocation is the location where the tabs of a tab container should be rendered
Since: 1.4const ( 	TabLocationTop TabLocation = iota 	TabLocationLeading 	TabLocationBottom 	TabLocationTrailing ) TabLocation values</description>
    </item>
    
    <item>
      <title>desktop</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/</guid>
      <description>desktop# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Package desktop provides desktop specific driver functionality.
Usage#const ( 	// KeyNone represents no key 	KeyNone fyne.KeyName = &amp;#34;&amp;#34; 	// KeyShiftLeft represents the left shift key 	KeyShiftLeft fyne.KeyName = &amp;#34;LeftShift&amp;#34; 	// KeyShiftRight represents the right shift key 	KeyShiftRight fyne.KeyName = &amp;#34;RightShift&amp;#34; 	// KeyControlLeft represents the left control key 	KeyControlLeft fyne.KeyName = &amp;#34;LeftControl&amp;#34; 	// KeyControlRight represents the right control key 	KeyControlRight fyne.</description>
    </item>
    
    <item>
      <title>desktop.Canvas</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/canvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/canvas/</guid>
      <description>desktop.Canvas# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Canvas#type Canvas interface { 	OnKeyDown() func(*fyne.KeyEvent) 	SetOnKeyDown(func(*fyne.KeyEvent)) 	OnKeyUp() func(*fyne.KeyEvent) 	SetOnKeyUp(func(*fyne.KeyEvent)) } Canvas defines the desktop specific extensions to a fyne.Canvas.</description>
    </item>
    
    <item>
      <title>desktop.Cursor</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/cursor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/cursor/</guid>
      <description>desktop.Cursor# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Cursor#type Cursor interface { 	// Image returns the image for the given cursor, or nil if none should be shown. 	// It also returns the x and y pixels that should act as the hot-spot (measured from top left corner). 	Image() (image.Image, int, int) } Cursor interface is used for objects that desire a specific cursor.</description>
    </item>
    
    <item>
      <title>desktop.Cursorable</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/cursorable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/cursorable/</guid>
      <description>desktop.Cursorable# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Cursorable#type Cursorable interface { 	Cursor() Cursor } Cursorable describes any CanvasObject that needs a cursor change</description>
    </item>
    
    <item>
      <title>desktop.CustomShortcut</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/customshortcut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/customshortcut/</guid>
      <description>desktop.CustomShortcut# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type CustomShortcut#type CustomShortcut struct { 	fyne.KeyName 	Modifier } CustomShortcut describes a shortcut desktop event.
func (*CustomShortcut) ShortcutName#func (cs *CustomShortcut) ShortcutName() string ShortcutName returns the shortcut name associated to the event</description>
    </item>
    
    <item>
      <title>desktop.Driver</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/driver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/driver/</guid>
      <description>desktop.Driver# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Driver#type Driver interface { 	// Create a new borderless window that is centered on screen 	CreateSplashWindow() fyne.Window } Driver represents the extended capabilities of a desktop driver</description>
    </item>
    
    <item>
      <title>desktop.Hoverable</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/hoverable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/hoverable/</guid>
      <description>desktop.Hoverable# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Hoverable#type Hoverable interface { 	// MouseIn is a hook that is called if the mouse pointer enters the element. 	MouseIn(*MouseEvent) 	// MouseMoved is a hook that is called if the mouse pointer moved over the element. 	MouseMoved(*MouseEvent) 	// MouseOut is a hook that is called if the mouse pointer leaves the element. 	MouseOut() } Hoverable is used when a canvas object wishes to know if a pointer device moves over it.</description>
    </item>
    
    <item>
      <title>desktop.Keyable</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/keyable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/keyable/</guid>
      <description>desktop.Keyable# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Keyable#type Keyable interface { 	fyne.Focusable  	KeyDown(*fyne.KeyEvent) 	KeyUp(*fyne.KeyEvent) } Keyable describes any focusable canvas object that can accept desktop key events. This is the traditional key down and up event that is not applicable to all devices.</description>
    </item>
    
    <item>
      <title>desktop.Modifier</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/modifier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/modifier/</guid>
      <description>desktop.Modifier# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Modifier#type Modifier int Modifier captures any key modifiers (shift etc) pressed during this key event
const ( 	// ShiftModifier represents a shift key being held 	ShiftModifier Modifier = 1 &amp;lt;&amp;lt; iota 	// ControlModifier represents the ctrl key being held 	ControlModifier 	// AltModifier represents either alt keys being held 	AltModifier 	// SuperModifier represents either super keys being held 	SuperModifier ) </description>
    </item>
    
    <item>
      <title>desktop.Mouseable</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/mouseable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/mouseable/</guid>
      <description>desktop.Mouseable# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type Mouseable#type Mouseable interface { 	MouseDown(*MouseEvent) 	MouseUp(*MouseEvent) } Mouseable represents desktop mouse events that can be sent to CanvasObjects</description>
    </item>
    
    <item>
      <title>desktop.MouseButton</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/mousebutton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/mousebutton/</guid>
      <description>desktop.MouseButton# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type MouseButton#type MouseButton int MouseButton represents a single button in a desktop MouseEvent
const ( 	// MouseButtonPrimary is the most common mouse button - on some systems the only one. 	// This will normally be on the left side of a mouse. 	// 	// Since: 2.0 	MouseButtonPrimary MouseButton = 1 &amp;lt;&amp;lt; iota  	// MouseButtonSecondary is the secondary button on most mouse input devices.</description>
    </item>
    
    <item>
      <title>desktop.MouseEvent</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/mouseevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/mouseevent/</guid>
      <description>desktop.MouseEvent# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type MouseEvent#type MouseEvent struct { 	fyne.PointEvent 	Button MouseButton 	Modifier Modifier } MouseEvent contains data relating to desktop mouse events</description>
    </item>
    
    <item>
      <title>desktop.StandardCursor</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/desktop/standardcursor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/desktop/standardcursor/</guid>
      <description>desktop.StandardCursor# import &amp;#34;fyne.io/fyne/v2/driver/desktop&amp;#34; Usage#type StandardCursor#type StandardCursor int StandardCursor represents a standard Fyne cursor. These values were previously of type fyne.Cursor.
Since: 2.0const ( 	// DefaultCursor is the default cursor typically an arrow 	DefaultCursor StandardCursor = iota 	// TextCursor is the cursor often used to indicate text selection 	TextCursor 	// CrosshairCursor is the cursor often used to indicate bitmaps 	CrosshairCursor 	// PointerCursor is the cursor often used to indicate a link 	PointerCursor 	// HResizeCursor is the cursor often used to indicate horizontal resize 	HResizeCursor 	// VResizeCursor is the cursor often used to indicate vertical resize 	VResizeCursor 	// HiddenCursor will cause the cursor to not be shown 	HiddenCursor ) func (StandardCursor) Image#func (d StandardCursor) Image() (image.</description>
    </item>
    
    <item>
      <title>dialog</title>
      <link>https://darcybook.github.io/fyne/docs/api/dialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/dialog/</guid>
      <description>dialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Package dialog defines standard dialog windows for application GUIs.
Usage#func ShowColorPicker#func ShowColorPicker(title, message string, callback func(c color.Color), parent fyne.Window) ShowColorPicker creates and shows a color dialog. The callback is triggered when the user selects a color.
Since: 1.4func ShowConfirm#func ShowConfirm(title, message string, callback func(bool), parent fyne.Window) ShowConfirm shows a dialog over the specified window for a user confirmation.</description>
    </item>
    
    <item>
      <title>dialog.ColorPickerDialog</title>
      <link>https://darcybook.github.io/fyne/docs/api/dialog/colorpickerdialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/dialog/colorpickerdialog/</guid>
      <description>dialog.ColorPickerDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type ColorPickerDialog#type ColorPickerDialog struct { 	Advanced bool } ColorPickerDialog is a simple dialog window that displays a color picker.
Since: 1.4func NewColorPicker#func NewColorPicker(title, message string, callback func(c color.Color), parent fyne.Window) *ColorPickerDialog NewColorPicker creates a color dialog and returns the handle. Using the returned type you should call Show() and then set its color through SetColor().</description>
    </item>
    
    <item>
      <title>dialog.ConfirmDialog</title>
      <link>https://darcybook.github.io/fyne/docs/api/dialog/confirmdialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/dialog/confirmdialog/</guid>
      <description>dialog.ConfirmDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type ConfirmDialog#type ConfirmDialog struct { } ConfirmDialog is like the standard Dialog but with an additional confirmation button
func NewConfirm#func NewConfirm(title, message string, callback func(bool), parent fyne.Window) *ConfirmDialog NewConfirm creates a dialog over the specified window for user confirmation. The title is used for the dialog window and message is the content. The callback is executed when the user decides.</description>
    </item>
    
    <item>
      <title>dialog.Dialog</title>
      <link>https://darcybook.github.io/fyne/docs/api/dialog/dialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/dialog/dialog/</guid>
      <description>dialog.Dialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type Dialog#type Dialog interface { 	Show() 	Hide() 	SetDismissText(label string) 	SetOnClosed(closed func()) 	Refresh() 	Resize(size fyne.Size)  	// Since: 2.1 	MinSize() fyne.Size } Dialog is the common API for any dialog window with a single dismiss button
func NewCustom#func NewCustom(title, dismiss string, content fyne.CanvasObject, parent fyne.Window) Dialog NewCustom creates and returns a dialog over the specified application using custom content.</description>
    </item>
    
    <item>
      <title>dialog.EntryDialog</title>
      <link>https://darcybook.github.io/fyne/docs/api/dialog/entrydialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/dialog/entrydialog/</guid>
      <description>dialog.EntryDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type EntryDialog#type EntryDialog struct { } EntryDialog is a variation of a dialog which prompts the user to enter some text.
Deprecated: Use dialog.NewFormDialog() or dialog.ShowFormDialog() with a widget.Entry inside instead.func NewEntryDialog#func NewEntryDialog(title, message string, onConfirm func(string), parent fyne.Window) *EntryDialog NewEntryDialog creates a dialog over the specified window for the user to enter a value.</description>
    </item>
    
    <item>
      <title>dialog.FileDialog</title>
      <link>https://darcybook.github.io/fyne/docs/api/dialog/filedialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/dialog/filedialog/</guid>
      <description>dialog.FileDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type FileDialog#type FileDialog struct { } FileDialog is a dialog containing a file picker for use in opening or saving files.
func NewFileOpen#func NewFileOpen(callback func(fyne.URIReadCloser, error), parent fyne.Window) *FileDialog NewFileOpen creates a file dialog allowing the user to choose a file to open. The callback function will run when the dialog closes. The URI will be nil when the user cancels or when nothing is selected.</description>
    </item>
    
    <item>
      <title>dialog.ProgressDialog</title>
      <link>https://darcybook.github.io/fyne/docs/api/dialog/progressdialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/dialog/progressdialog/</guid>
      <description>dialog.ProgressDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type ProgressDialog#type ProgressDialog struct { } ProgressDialog is a simple dialog window that displays text and a progress bar.
Deprecated: Create a new custom dialog with a widget.ProgressBar() inside.func NewProgress#func NewProgress(title, message string, parent fyne.Window) *ProgressDialog NewProgress creates a progress dialog and returns the handle. Using the returned type you should call Show() and then set its value through SetValue().</description>
    </item>
    
    <item>
      <title>dialog.ProgressInfiniteDialog</title>
      <link>https://darcybook.github.io/fyne/docs/api/dialog/progressinfinitedialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/dialog/progressinfinitedialog/</guid>
      <description>dialog.ProgressInfiniteDialog# import &amp;#34;fyne.io/fyne/v2/dialog&amp;#34; Usage#type ProgressInfiniteDialog#type ProgressInfiniteDialog struct { } ProgressInfiniteDialog is a simple dialog window that displays text and a infinite progress bar.
Deprecated: Create a new custom dialog with a widget.ProgressBarInfinite() inside.func NewProgressInfinite#func NewProgressInfinite(title, message string, parent fyne.Window) *ProgressInfiniteDialog NewProgressInfinite creates a infinite progress dialog and returns the handle. Using the returned type you should call Show().</description>
    </item>
    
    <item>
      <title>fyne.Animation</title>
      <link>https://darcybook.github.io/fyne/docs/api/animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/animation/</guid>
      <description>fyne.Animation# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Animation#type Animation struct { 	AutoReverse bool 	Curve AnimationCurve 	Duration time.Duration 	RepeatCount int 	Tick func(float32) } Animation represents an animated element within a Fyne canvas. These animations may control individual objects or entire scenes.
Since: 2.0func NewAnimation#func NewAnimation(d time.Duration, fn func(float32)) *Animation NewAnimation creates a very basic animation where the callback function will be called for every rendered frame between time.</description>
    </item>
    
    <item>
      <title>fyne.AnimationCurve</title>
      <link>https://darcybook.github.io/fyne/docs/api/animationcurve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/animationcurve/</guid>
      <description>fyne.AnimationCurve# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type AnimationCurve#type AnimationCurve func(float32) float32 AnimationCurve represents an animation algorithm for calculating the progress through a timeline. Custom animations can be provided by implementing the &amp;ldquo;func(float32) float32&amp;rdquo; definition. The input parameter will start at 0.0 when an animation starts and travel up to 1.0 at which point it will end. A linear animation would return the same output value as is passed in.</description>
    </item>
    
    <item>
      <title>fyne.App</title>
      <link>https://darcybook.github.io/fyne/docs/api/app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/app/</guid>
      <description>fyne.App# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type App#type App interface { 	// Create a new window for the application. 	// The first window to open is considered the &amp;#34;master&amp;#34; and when closed 	// the application will exit. 	NewWindow(title string) Window  	// Open a URL in the default browser application. 	OpenURL(url *url.URL) error  	// Icon returns the application icon, this is used in various ways 	// depending on operating system.</description>
    </item>
    
    <item>
      <title>fyne.BuildType</title>
      <link>https://darcybook.github.io/fyne/docs/api/buildtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/buildtype/</guid>
      <description>fyne.BuildType# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type BuildType#type BuildType int BuildType defines different modes that an application can be built using.
const ( 	// BuildStandard is the normal build mode - it is not debug, test or release mode. 	BuildStandard BuildType = iota 	// BuildDebug is used when a developer would like more information and visual output for app debugging. 	BuildDebug 	// BuildRelease is a final production build, it is like BuildStandard but will use distribution certificates.</description>
    </item>
    
    <item>
      <title>fyne.Canvas</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvas/</guid>
      <description>fyne.Canvas# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Canvas#type Canvas interface { 	Content() CanvasObject 	SetContent(CanvasObject)  	Refresh(CanvasObject)  	// Focus makes the provided item focused. 	// The item has to be added to the contents of the canvas before calling this. 	Focus(Focusable) 	// FocusNext focuses the next focusable item. 	// If no item is currently focused, the first focusable item is focused.</description>
    </item>
    
    <item>
      <title>fyne.CanvasObject</title>
      <link>https://darcybook.github.io/fyne/docs/api/canvasobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/canvasobject/</guid>
      <description>fyne.CanvasObject# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type CanvasObject#type CanvasObject interface {  	// MinSize returns the minimum size this object needs to be drawn. 	MinSize() Size 	// Move moves this object to the given position relative to its parent. 	// This should only be called if your object is not in a container with a layout manager. 	Move(Position) 	// Position returns the current position of the object relative to its parent.</description>
    </item>
    
    <item>
      <title>fyne.Clipboard</title>
      <link>https://darcybook.github.io/fyne/docs/api/clipboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/clipboard/</guid>
      <description>fyne.Clipboard# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Clipboard#type Clipboard interface { 	// Content returns the clipboard content 	Content() string 	// SetContent sets the clipboard content 	SetContent(content string) } Clipboard represents the system clipboard interface</description>
    </item>
    
    <item>
      <title>fyne.Container</title>
      <link>https://darcybook.github.io/fyne/docs/api/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/container/</guid>
      <description>fyne.Container# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Container#type Container struct { 	Hidden bool // Is this Container hidden  	Layout Layout // The Layout algorithm for arranging child CanvasObjects 	Objects []CanvasObject // The set of CanvasObjects this container holds } Container is a CanvasObject that contains a collection of child objects. The layout of the children is set by the specified Layout.</description>
    </item>
    
    <item>
      <title>fyne.Delta</title>
      <link>https://darcybook.github.io/fyne/docs/api/delta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/delta/</guid>
      <description>fyne.Delta# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Delta#type Delta struct { 	DX, DY float32 } Delta is a generic X, Y coordinate, size or movement representation.
func NewDelta#func NewDelta(dx float32, dy float32) Delta NewDelta returns a newly allocated Delta representing a movement in the X and Y axis.
func (Delta) Components#func (v Delta) Components() (float32, float32) Components returns the X and Y elements of this Delta.</description>
    </item>
    
    <item>
      <title>fyne.Device</title>
      <link>https://darcybook.github.io/fyne/docs/api/device/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/device/</guid>
      <description>fyne.Device# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Device#type Device interface { 	Orientation() DeviceOrientation 	IsMobile() bool 	HasKeyboard() bool 	SystemScaleForWindow(Window) float32 } Device provides information about the devices the code is running on
func CurrentDevice#func CurrentDevice() Device CurrentDevice returns the device information for the current hardware (via the driver)</description>
    </item>
    
    <item>
      <title>fyne.DeviceOrientation</title>
      <link>https://darcybook.github.io/fyne/docs/api/deviceorientation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/deviceorientation/</guid>
      <description>fyne.DeviceOrientation# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type DeviceOrientation#type DeviceOrientation int DeviceOrientation represents the different ways that a mobile device can be held
const ( 	// OrientationVertical is the default vertical orientation 	OrientationVertical DeviceOrientation = iota 	// OrientationVerticalUpsideDown is the portrait orientation held upside down 	OrientationVerticalUpsideDown 	// OrientationHorizontalLeft is used to indicate a landscape orientation with the top to the left 	OrientationHorizontalLeft 	// OrientationHorizontalRight is used to indicate a landscape orientation with the top to the right 	OrientationHorizontalRight ) </description>
    </item>
    
    <item>
      <title>fyne.Disableable</title>
      <link>https://darcybook.github.io/fyne/docs/api/disableable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/disableable/</guid>
      <description>fyne.Disableable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Disableable#type Disableable interface { 	Enable() 	Disable() 	Disabled() bool } Disableable describes any CanvasObject that can be disabled. This is primarily used with objects that also implement the Tappable interface.</description>
    </item>
    
    <item>
      <title>fyne.DoubleTappable</title>
      <link>https://darcybook.github.io/fyne/docs/api/doubletappable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/doubletappable/</guid>
      <description>fyne.DoubleTappable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type DoubleTappable#type DoubleTappable interface { 	DoubleTapped(*PointEvent) } DoubleTappable describes any CanvasObject that can also be double tapped.</description>
    </item>
    
    <item>
      <title>fyne.DragEvent</title>
      <link>https://darcybook.github.io/fyne/docs/api/dragevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/dragevent/</guid>
      <description>fyne.DragEvent# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type DragEvent#type DragEvent struct { 	PointEvent 	Dragged Delta } DragEvent defines the parameters of a pointer or other drag event. The DraggedX and DraggedY fields show how far the item was dragged since the last event.</description>
    </item>
    
    <item>
      <title>fyne.Draggable</title>
      <link>https://darcybook.github.io/fyne/docs/api/draggable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/draggable/</guid>
      <description>fyne.Draggable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Draggable#type Draggable interface { 	Dragged(*DragEvent) 	DragEnd() } Draggable indicates that a CanvasObject can be dragged. This is used for any item that the user has indicated should be moved across the screen.</description>
    </item>
    
    <item>
      <title>fyne.Driver</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/</guid>
      <description>fyne.Driver# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Driver#type Driver interface { 	// CreateWindow creates a new UI Window. 	CreateWindow(string) Window 	// AllWindows returns a slice containing all app windows. 	AllWindows() []Window  	// RenderedTextSize returns the size required to render the given string of specified 	// font size and style. It also returns the height to text baseline, measured from the top.</description>
    </item>
    
    <item>
      <title>fyne.Focusable&#34;</title>
      <link>https://darcybook.github.io/fyne/docs/api/focusable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/focusable/</guid>
      <description>fyne.Focusable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Focusable#type Focusable interface { 	// FocusGained is a hook called by the focus handling logic after this object gained the focus. 	FocusGained() 	// FocusLost is a hook called by the focus handling logic after this object lost the focus. 	FocusLost()  	// TypedRune is a hook called by the input handling logic on text input events if this object is focused.</description>
    </item>
    
    <item>
      <title>fyne.HardwareKey</title>
      <link>https://darcybook.github.io/fyne/docs/api/hardwarekey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/hardwarekey/</guid>
      <description>fyne.HardwareKey# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type HardwareKey#type HardwareKey struct { 	// ScanCode represents a hardware ID for (normally desktop) keyboard events. 	ScanCode int } HardwareKey contains information associated with physical key events Most applications should use KeyName for cross-platform compatibility.</description>
    </item>
    
    <item>
      <title>fyne.KeyEvent</title>
      <link>https://darcybook.github.io/fyne/docs/api/keyevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/keyevent/</guid>
      <description>fyne.KeyEvent# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type KeyEvent#type KeyEvent struct { 	// Name describes the keyboard event that is consistent across platforms. 	Name KeyName 	// Physical is a platform specific field that reports the hardware information of physical keyboard events. 	Physical HardwareKey } KeyEvent describes a keyboard input event.</description>
    </item>
    
    <item>
      <title>fyne.KeyName</title>
      <link>https://darcybook.github.io/fyne/docs/api/keyname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/keyname/</guid>
      <description>fyne.KeyName# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type KeyName#type KeyName string KeyName represents the name of a key that has been pressed
const ( 	// KeyEscape is the &amp;#34;esc&amp;#34; key 	KeyEscape KeyName = &amp;#34;Escape&amp;#34; 	// KeyReturn is the carriage return (main keyboard) 	KeyReturn KeyName = &amp;#34;Return&amp;#34; 	// KeyTab is the tab advance key 	KeyTab KeyName = &amp;#34;Tab&amp;#34; 	// KeyBackspace is the delete-before-cursor key 	KeyBackspace KeyName = &amp;#34;BackSpace&amp;#34; 	// KeyInsert is the insert mode key 	KeyInsert KeyName = &amp;#34;Insert&amp;#34; 	// KeyDelete is the delete-after-cursor key 	KeyDelete KeyName = &amp;#34;Delete&amp;#34; 	// KeyRight is the right arrow key 	KeyRight KeyName = &amp;#34;Right&amp;#34; 	// KeyLeft is the left arrow key 	KeyLeft KeyName = &amp;#34;Left&amp;#34; 	// KeyDown is the down arrow key 	KeyDown KeyName = &amp;#34;Down&amp;#34; 	// KeyUp is the up arrow key 	KeyUp KeyName = &amp;#34;Up&amp;#34; 	// KeyPageUp is the page up num-pad key 	KeyPageUp KeyName = &amp;#34;Prior&amp;#34; 	// KeyPageDown is the page down num-pad key 	KeyPageDown KeyName = &amp;#34;Next&amp;#34; 	// KeyHome is the line-home key 	KeyHome KeyName = &amp;#34;Home&amp;#34; 	// KeyEnd is the line-end key 	KeyEnd KeyName = &amp;#34;End&amp;#34;  	// KeyF1 is the first function key 	KeyF1 KeyName = &amp;#34;F1&amp;#34; 	// KeyF2 is the second function key 	KeyF2 KeyName = &amp;#34;F2&amp;#34; 	// KeyF3 is the third function key 	KeyF3 KeyName = &amp;#34;F3&amp;#34; 	// KeyF4 is the fourth function key 	KeyF4 KeyName = &amp;#34;F4&amp;#34; 	// KeyF5 is the fifth function key 	KeyF5 KeyName = &amp;#34;F5&amp;#34; 	// KeyF6 is the sixth function key 	KeyF6 KeyName = &amp;#34;F6&amp;#34; 	// KeyF7 is the seventh function key 	KeyF7 KeyName = &amp;#34;F7&amp;#34; 	// KeyF8 is the eighth function key 	KeyF8 KeyName = &amp;#34;F8&amp;#34; 	// KeyF9 is the ninth function key 	KeyF9 KeyName = &amp;#34;F9&amp;#34; 	// KeyF10 is the tenth function key 	KeyF10 KeyName = &amp;#34;F10&amp;#34; 	// KeyF11 is the eleventh function key 	KeyF11 KeyName = &amp;#34;F11&amp;#34; 	// KeyF12 is the twelfth function key 	KeyF12 KeyName = &amp;#34;F12&amp;#34;  	// KeyEnter is the enter/ return key (keypad) 	KeyEnter KeyName = &amp;#34;KP_Enter&amp;#34;  	// Key0 represents the key 0 	Key0 KeyName = &amp;#34;0&amp;#34; 	// Key1 represents the key 1 	Key1 KeyName = &amp;#34;1&amp;#34; 	// Key2 represents the key 2 	Key2 KeyName = &amp;#34;2&amp;#34; 	// Key3 represents the key 3 	Key3 KeyName = &amp;#34;3&amp;#34; 	// Key4 represents the key 4 	Key4 KeyName = &amp;#34;4&amp;#34; 	// Key5 represents the key 5 	Key5 KeyName = &amp;#34;5&amp;#34; 	// Key6 represents the key 6 	Key6 KeyName = &amp;#34;6&amp;#34; 	// Key7 represents the key 7 	Key7 KeyName = &amp;#34;7&amp;#34; 	// Key8 represents the key 8 	Key8 KeyName = &amp;#34;8&amp;#34; 	// Key9 represents the key 9 	Key9 KeyName = &amp;#34;9&amp;#34; 	// KeyA represents the key A 	KeyA KeyName = &amp;#34;A&amp;#34; 	// KeyB represents the key B 	KeyB KeyName = &amp;#34;B&amp;#34; 	// KeyC represents the key C 	KeyC KeyName = &amp;#34;C&amp;#34; 	// KeyD represents the key D 	KeyD KeyName = &amp;#34;D&amp;#34; 	// KeyE represents the key E 	KeyE KeyName = &amp;#34;E&amp;#34; 	// KeyF represents the key F 	KeyF KeyName = &amp;#34;F&amp;#34; 	// KeyG represents the key G 	KeyG KeyName = &amp;#34;G&amp;#34; 	// KeyH represents the key H 	KeyH KeyName = &amp;#34;H&amp;#34; 	// KeyI represents the key I 	KeyI KeyName = &amp;#34;I&amp;#34; 	// KeyJ represents the key J 	KeyJ KeyName = &amp;#34;J&amp;#34; 	// KeyK represents the key K 	KeyK KeyName = &amp;#34;K&amp;#34; 	// KeyL represents the key L 	KeyL KeyName = &amp;#34;L&amp;#34; 	// KeyM represents the key M 	KeyM KeyName = &amp;#34;M&amp;#34; 	// KeyN represents the key N 	KeyN KeyName = &amp;#34;N&amp;#34; 	// KeyO represents the key O 	KeyO KeyName = &amp;#34;O&amp;#34; 	// KeyP represents the key P 	KeyP KeyName = &amp;#34;P&amp;#34; 	// KeyQ represents the key Q 	KeyQ KeyName = &amp;#34;Q&amp;#34; 	// KeyR represents the key R 	KeyR KeyName = &amp;#34;R&amp;#34; 	// KeyS represents the key S 	KeyS KeyName = &amp;#34;S&amp;#34; 	// KeyT represents the key T 	KeyT KeyName = &amp;#34;T&amp;#34; 	// KeyU represents the key U 	KeyU KeyName = &amp;#34;U&amp;#34; 	// KeyV represents the key V 	KeyV KeyName = &amp;#34;V&amp;#34; 	// KeyW represents the key W 	KeyW KeyName = &amp;#34;W&amp;#34; 	// KeyX represents the key X 	KeyX KeyName = &amp;#34;X&amp;#34; 	// KeyY represents the key Y 	KeyY KeyName = &amp;#34;Y&amp;#34; 	// KeyZ represents the key Z 	KeyZ KeyName = &amp;#34;Z&amp;#34;  	// KeySpace is the space key 	KeySpace KeyName = &amp;#34;Space&amp;#34; 	// KeyApostrophe is the key &amp;#34;&amp;#39;&amp;#34; 	KeyApostrophe KeyName = &amp;#34;&amp;#39;&amp;#34; 	// KeyComma is the key &amp;#34;,&amp;#34; 	KeyComma KeyName = &amp;#34;,&amp;#34; 	// KeyMinus is the key &amp;#34;-&amp;#34; 	KeyMinus KeyName = &amp;#34;-&amp;#34; 	// KeyPeriod is the key &amp;#34;.</description>
    </item>
    
    <item>
      <title>fyne.Layout</title>
      <link>https://darcybook.github.io/fyne/docs/api/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/layout/</guid>
      <description>fyne.Layout# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Layout#type Layout interface { 	// Layout will manipulate the listed CanvasObjects Size and Position 	// to fit within the specified size. 	Layout([]CanvasObject, Size) 	// MinSize calculates the smallest size that will fit the listed 	// CanvasObjects using this Layout algorithm. 	MinSize(objects []CanvasObject) Size } Layout defines how CanvasObjects may be laid out in a specified Size.</description>
    </item>
    
    <item>
      <title>fyne.LegacyTheme</title>
      <link>https://darcybook.github.io/fyne/docs/api/legacytheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/legacytheme/</guid>
      <description>fyne.LegacyTheme# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type LegacyTheme#type LegacyTheme interface { 	BackgroundColor() color.Color 	ButtonColor() color.Color 	DisabledButtonColor() color.Color 	TextColor() color.Color 	DisabledTextColor() color.Color 	PlaceHolderColor() color.Color 	PrimaryColor() color.Color 	HoverColor() color.Color 	FocusColor() color.Color 	ScrollBarColor() color.Color 	ShadowColor() color.Color  	TextSize() int 	TextFont() Resource 	TextBoldFont() Resource 	TextItalicFont() Resource 	TextBoldItalicFont() Resource 	TextMonospaceFont() Resource  	Padding() int 	IconInlineSize() int 	ScrollBarSize() int 	ScrollBarSmallSize() int } LegacyTheme defines the requirements of any Fyne theme.</description>
    </item>
    
    <item>
      <title>fyne.Lifecycle</title>
      <link>https://darcybook.github.io/fyne/docs/api/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/lifecycle/</guid>
      <description>fyne.Lifecycle# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Lifecycle#type Lifecycle interface { 	// SetOnEnteredForeground hooks into the app becoming foreground and gaining focus. 	SetOnEnteredForeground(func()) 	// SetOnExitedForeground hooks into the app losing input focus and going into the background. 	SetOnExitedForeground(func()) 	// SetOnStarted hooks into an event that says the app is now running. 	SetOnStarted(func()) 	// SetOnStopped hooks into an event that says the app is no longer running.</description>
    </item>
    
    <item>
      <title>fyne.ListableURI</title>
      <link>https://darcybook.github.io/fyne/docs/api/listableuri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/listableuri/</guid>
      <description>fyne.ListableURI# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ListableURI#type ListableURI interface { 	URI  	// List returns a list of child URIs of this URI. 	List() ([]URI, error) } ListableURI represents a URI that can have child items, most commonly a directory on disk in the native filesystem.
Since: 1.4</description>
    </item>
    
    <item>
      <title>fyne.MainMenu</title>
      <link>https://darcybook.github.io/fyne/docs/api/mainmenu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/mainmenu/</guid>
      <description>fyne.MainMenu# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type MainMenu#type MainMenu struct { 	Items []*Menu } MainMenu defines the data required to show a menu bar (desktop) or other appropriate top level menu.
func NewMainMenu#func NewMainMenu(items ...*Menu) *MainMenu NewMainMenu creates a top level menu structure used by fyne.Window for displaying a menubar (or appropriate equivalent).</description>
    </item>
    
    <item>
      <title>fyne.Menu</title>
      <link>https://darcybook.github.io/fyne/docs/api/menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/menu/</guid>
      <description>fyne.Menu# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Menu#type Menu struct { 	Label string 	Items []*MenuItem } Menu stores the information required for a standard menu. A menu can pop down from a MainMenu or could be a pop out menu.
func NewMenu#func NewMenu(label string, items ...*MenuItem) *Menu NewMenu creates a new menu given the specified label (to show in a MainMenu) and list of items to display.</description>
    </item>
    
    <item>
      <title>fyne.MenuItem</title>
      <link>https://darcybook.github.io/fyne/docs/api/menuitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/menuitem/</guid>
      <description>fyne.MenuItem# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type MenuItem#type MenuItem struct { 	ChildMenu *Menu 	// Since: 2.1 	IsQuit bool 	IsSeparator bool 	Label string 	Action func() 	// Since: 2.1 	Disabled bool 	// Since: 2.1 	Checked bool } MenuItem is a single item within any menu, it contains a display Label and Action function that is called when tapped.</description>
    </item>
    
    <item>
      <title>fyne.Notification</title>
      <link>https://darcybook.github.io/fyne/docs/api/notification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/notification/</guid>
      <description>fyne.Notification# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Notification#type Notification struct { 	Title, Content string } Notification represents a user notification that can be sent to the operating system.
func NewNotification#func NewNotification(title, content string) *Notification NewNotification creates a notification that can be passed to App.SendNotification.</description>
    </item>
    
    <item>
      <title>fyne.OverlayStack</title>
      <link>https://darcybook.github.io/fyne/docs/api/overlaystack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/overlaystack/</guid>
      <description>fyne.OverlayStack# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type OverlayStack#type OverlayStack interface { 	// Add adds an overlay on the top of the overlay stack. 	Add(overlay CanvasObject) 	// List returns the overlays currently on the overlay stack. 	List() []CanvasObject 	// Remove removes the given object and all objects above it from the overlay stack. 	Remove(overlay CanvasObject) 	// Top returns the top-most object of the overlay stack.</description>
    </item>
    
    <item>
      <title>fyne.PointEvent</title>
      <link>https://darcybook.github.io/fyne/docs/api/pointevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/pointevent/</guid>
      <description>fyne.PointEvent# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type PointEvent#type PointEvent struct { 	AbsolutePosition Position // The absolute position of the event 	Position Position // The relative position of the event } PointEvent describes a pointer input event. The position is relative to the top-left of the CanvasObject this is triggered on.</description>
    </item>
    
    <item>
      <title>fyne.Position</title>
      <link>https://darcybook.github.io/fyne/docs/api/position/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/position/</guid>
      <description>fyne.Position# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Position#type Position struct { 	X float32 // The position from the parent&amp;#39;s left edge 	Y float32 // The position from the parent&amp;#39;s top edge } Position describes a generic X, Y coordinate relative to a parent Canvas or CanvasObject.
func NewPos#func NewPos(x float32, y float32) Position NewPos returns a newly allocated Position representing the specified coordinates.</description>
    </item>
    
    <item>
      <title>fyne.Preferences</title>
      <link>https://darcybook.github.io/fyne/docs/api/preferences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/preferences/</guid>
      <description>fyne.Preferences# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Preferences#type Preferences interface { 	// Bool looks up a boolean value for the key 	Bool(key string) bool 	// BoolWithFallback looks up a boolean value and returns the given fallback if not found 	BoolWithFallback(key string, fallback bool) bool 	// SetBool saves a boolean value for the given key 	SetBool(key string, value bool)  	// Float looks up a float64 value for the key 	Float(key string) float64 	// FloatWithFallback looks up a float64 value and returns the given fallback if not found 	FloatWithFallback(key string, fallback float64) float64 	// SetFloat saves a float64 value for the given key 	SetFloat(key string, value float64)  	// Int looks up an integer value for the key 	Int(key string) int 	// IntWithFallback looks up an integer value and returns the given fallback if not found 	IntWithFallback(key string, fallback int) int 	// SetInt saves an integer value for the given key 	SetInt(key string, value int)  	// String looks up a string value for the key 	String(key string) string 	// StringWithFallback looks up a string value and returns the given fallback if not found 	StringWithFallback(key, fallback string) string 	// SetString saves a string value for the given key 	SetString(key string, value string)  	// RemoveValue removes a value for the given key (not currently supported on iOS) 	RemoveValue(key string)  	// AddChangeListener allows code to be notified when some preferences change.</description>
    </item>
    
    <item>
      <title>fyne.Resource</title>
      <link>https://darcybook.github.io/fyne/docs/api/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/resource/</guid>
      <description>fyne.Resource# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Resource#type Resource interface { 	Name() string 	Content() []byte } Resource represents a single binary resource, such as an image or font. A resource has an identifying name and byte array content. The serialised path of a resource can be obtained which may result in a blocking filesystem write operation.
func LoadResourceFromPath#func LoadResourceFromPath(path string) (Resource, error) LoadResourceFromPath creates a new StaticResource in memory using the contents of the specified file.</description>
    </item>
    
    <item>
      <title>fyne.Scrollable</title>
      <link>https://darcybook.github.io/fyne/docs/api/scrollable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/scrollable/</guid>
      <description>fyne.Scrollable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Scrollable#type Scrollable interface { 	Scrolled(*ScrollEvent) } Scrollable describes any CanvasObject that can also be scrolled. This is mostly used to implement the widget.ScrollContainer.</description>
    </item>
    
    <item>
      <title>fyne.ScrollEvent</title>
      <link>https://darcybook.github.io/fyne/docs/api/scrollevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/scrollevent/</guid>
      <description>fyne.ScrollEvent# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ScrollEvent#type ScrollEvent struct { 	PointEvent 	Scrolled Delta } ScrollEvent defines the parameters of a pointer or other scroll event. The DeltaX and DeltaY represent how large the scroll was in two dimensions.</description>
    </item>
    
    <item>
      <title>fyne.SecondaryTappable</title>
      <link>https://darcybook.github.io/fyne/docs/api/secondarytappable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/secondarytappable/</guid>
      <description>fyne.SecondaryTappable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type SecondaryTappable#type SecondaryTappable interface { 	TappedSecondary(*PointEvent) } SecondaryTappable describes a CanvasObject that can be right-clicked or long-tapped.</description>
    </item>
    
    <item>
      <title>fyne.Settings</title>
      <link>https://darcybook.github.io/fyne/docs/api/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/settings/</guid>
      <description>fyne.Settings# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Settings#type Settings interface { 	Theme() Theme 	SetTheme(Theme) 	// ThemeVariant defines which preferred version of a theme should be used (i.e. light or dark) 	// 	// Since: 2.0 	ThemeVariant() ThemeVariant 	Scale() float32 	// PrimaryColor indicates a user preference for a named primary color 	// 	// Since: 1.4 	PrimaryColor() string  	AddChangeListener(chan Settings) 	BuildType() BuildType } Settings describes the application configuration available.</description>
    </item>
    
    <item>
      <title>fyne.Shortcut</title>
      <link>https://darcybook.github.io/fyne/docs/api/shortcut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/shortcut/</guid>
      <description>fyne.Shortcut# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Shortcut#type Shortcut interface { 	ShortcutName() string } Shortcut is the interface used to describe a shortcut action</description>
    </item>
    
    <item>
      <title>fyne.Shortcutable</title>
      <link>https://darcybook.github.io/fyne/docs/api/shortcutable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/shortcutable/</guid>
      <description>fyne.Shortcutable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Shortcutable#type Shortcutable interface { 	TypedShortcut(Shortcut) } Shortcutable describes any CanvasObject that can respond to shortcut commands (quit, cut, copy, and paste).</description>
    </item>
    
    <item>
      <title>fyne.ShortcutCopy</title>
      <link>https://darcybook.github.io/fyne/docs/api/shortcutcopy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/shortcutcopy/</guid>
      <description>fyne.ShortcutCopy# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ShortcutCopy#type ShortcutCopy struct { 	Clipboard Clipboard } ShortcutCopy describes a shortcut copy action.
func (*ShortcutCopy) ShortcutName#func (se *ShortcutCopy) ShortcutName() string ShortcutName returns the shortcut name</description>
    </item>
    
    <item>
      <title>fyne.ShortcutCut</title>
      <link>https://darcybook.github.io/fyne/docs/api/shortcutcut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/shortcutcut/</guid>
      <description>fyne.ShortcutCut# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ShortcutCut#type ShortcutCut struct { 	Clipboard Clipboard } ShortcutCut describes a shortcut cut action.
func (*ShortcutCut) ShortcutName#func (se *ShortcutCut) ShortcutName() string ShortcutName returns the shortcut name</description>
    </item>
    
    <item>
      <title>fyne.ShortcutHandler</title>
      <link>https://darcybook.github.io/fyne/docs/api/shortcuthandler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/shortcuthandler/</guid>
      <description>fyne.ShortcutHandler# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ShortcutHandler#type ShortcutHandler struct { } ShortcutHandler is a default implementation of the shortcut handler for the canvasObject
func (*ShortcutHandler) AddShortcut#func (sh *ShortcutHandler) AddShortcut(shortcut Shortcut, handler func(shortcut Shortcut)) AddShortcut register an handler to be executed when the shortcut action is triggered
func (*ShortcutHandler) RemoveShortcut#func (sh *ShortcutHandler) RemoveShortcut(shortcut Shortcut) RemoveShortcut removes a registered shortcut</description>
    </item>
    
    <item>
      <title>fyne.ShortcutPaste</title>
      <link>https://darcybook.github.io/fyne/docs/api/shortcutpaste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/shortcutpaste/</guid>
      <description>fyne.ShortcutPaste# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ShortcutPaste#type ShortcutPaste struct { 	Clipboard Clipboard } ShortcutPaste describes a shortcut paste action.
func (*ShortcutPaste) ShortcutName#func (se *ShortcutPaste) ShortcutName() string ShortcutName returns the shortcut name</description>
    </item>
    
    <item>
      <title>fyne.ShortcutSelectAll</title>
      <link>https://darcybook.github.io/fyne/docs/api/shortcutselectall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/shortcutselectall/</guid>
      <description>fyne.ShortcutSelectAll# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ShortcutSelectAll#type ShortcutSelectAll struct{} ShortcutSelectAll describes a shortcut selectAll action.
func (*ShortcutSelectAll) ShortcutName#func (se *ShortcutSelectAll) ShortcutName() string ShortcutName returns the shortcut name</description>
    </item>
    
    <item>
      <title>fyne.Size</title>
      <link>https://darcybook.github.io/fyne/docs/api/size/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/size/</guid>
      <description>fyne.Size# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Size#type Size struct { 	Width float32 // The number of units along the X axis. 	Height float32 // The number of units along the Y axis. } Size describes something with width and height.
func MeasureText#func MeasureText(text string, size float32, style TextStyle) Size MeasureText uses the current driver to calculate the size of text when rendered.</description>
    </item>
    
    <item>
      <title>fyne.StaticResource</title>
      <link>https://darcybook.github.io/fyne/docs/api/staticresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/staticresource/</guid>
      <description>fyne.StaticResource# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type StaticResource#type StaticResource struct { 	StaticName string 	StaticContent []byte } StaticResource is a bundled resource compiled into the application. These resources are normally generated by the fyne_bundle command included in the Fyne toolkit.
func NewStaticResource#func NewStaticResource(name string, content []byte) *StaticResource NewStaticResource returns a new static resource object with the specified name and content. Creating a new static resource in memory results in sharable binary data that may be serialised to the location returned by CachePath().</description>
    </item>
    
    <item>
      <title>fyne.Storage</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/</guid>
      <description>fyne.Storage# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Storage#type Storage interface { 	RootURI() URI  	Create(name string) (URIWriteCloser, error) 	Open(name string) (URIReadCloser, error) 	Save(name string) (URIWriteCloser, error) 	Remove(name string) error  	List() []string } Storage is used to manage file storage inside an application sandbox. The files managed by this interface are unique to the current application.</description>
    </item>
    
    <item>
      <title>fyne.StringValidator</title>
      <link>https://darcybook.github.io/fyne/docs/api/stringvalidator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/stringvalidator/</guid>
      <description>fyne.StringValidator# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type StringValidator#type StringValidator func(string) error StringValidator is a function signature for validating string inputs.
Since: 1.4</description>
    </item>
    
    <item>
      <title>fyne.Tabbable</title>
      <link>https://darcybook.github.io/fyne/docs/api/tabbable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/tabbable/</guid>
      <description>fyne.Tabbable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Tabbable#type Tabbable interface { 	// AcceptsTab() is a hook called by the key press handling logic. 	// If it returns true then the Tab key events will be sent using TypedKey. 	AcceptsTab() bool } Tabbable describes any object that needs to accept the Tab key presses.
Since: 2.1</description>
    </item>
    
    <item>
      <title>fyne.Tappable</title>
      <link>https://darcybook.github.io/fyne/docs/api/tappable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/tappable/</guid>
      <description>fyne.Tappable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Tappable#type Tappable interface { 	Tapped(*PointEvent) } Tappable describes any CanvasObject that can also be tapped. This should be implemented by buttons etc that wish to handle pointer interactions.</description>
    </item>
    
    <item>
      <title>fyne.TextAlign</title>
      <link>https://darcybook.github.io/fyne/docs/api/textalign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/textalign/</guid>
      <description>fyne.TextAlign# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type TextAlign#type TextAlign int TextAlign represents the horizontal alignment of text within a widget or canvas object.
const ( 	// TextAlignLeading specifies a left alignment for left-to-right languages. 	TextAlignLeading TextAlign = iota 	// TextAlignCenter places the text centrally within the available space. 	TextAlignCenter 	// TextAlignTrailing will align the text right for a left-to-right language.</description>
    </item>
    
    <item>
      <title>fyne.TextStyle</title>
      <link>https://darcybook.github.io/fyne/docs/api/textstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/textstyle/</guid>
      <description>fyne.TextStyle# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type TextStyle#type TextStyle struct { 	Bold bool // Should text be bold 	Italic bool // Should text be italic 	Monospace bool // Use the system monospace font instead of regular  	// Since: 2.1 	TabWidth int // Width of tabs in spaces } TextStyle represents the styles that can be applied to a text canvas object or text based widget.</description>
    </item>
    
    <item>
      <title>fyne.TextWrap</title>
      <link>https://darcybook.github.io/fyne/docs/api/textwrap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/textwrap/</guid>
      <description>fyne.TextWrap# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type TextWrap#type TextWrap int TextWrap represents how text longer than the widget&amp;rsquo;s width will be wrapped.
const ( 	// TextWrapOff extends the widget&amp;#39;s width to fit the text, no wrapping is applied. 	TextWrapOff TextWrap = iota 	// TextTruncate trims the text to the widget&amp;#39;s width, no wrapping is applied. 	// If an entry is asked to truncate it will provide scrolling capabilities.</description>
    </item>
    
    <item>
      <title>fyne.Theme</title>
      <link>https://darcybook.github.io/fyne/docs/api/theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/theme/</guid>
      <description>fyne.Theme# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Theme#type Theme interface { 	Color(ThemeColorName, ThemeVariant) color.Color 	Font(TextStyle) Resource 	Icon(ThemeIconName) Resource 	Size(ThemeSizeName) float32 } Theme defines the method to look up colors, sizes and fonts that make up a Fyne theme.
Since: 2.0</description>
    </item>
    
    <item>
      <title>fyne.ThemeColorName</title>
      <link>https://darcybook.github.io/fyne/docs/api/themecolorname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/themecolorname/</guid>
      <description>fyne.ThemeColorName# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ThemeColorName#type ThemeColorName string ThemeColorName is used to look up a colour based on its name.
Since: 2.0</description>
    </item>
    
    <item>
      <title>fyne.ThemeIconName</title>
      <link>https://darcybook.github.io/fyne/docs/api/themeiconname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/themeiconname/</guid>
      <description>fyne.ThemeIconName# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ThemeIconName#type ThemeIconName string ThemeIconName is used to look up an icon based on its name.
Since: 2.0</description>
    </item>
    
    <item>
      <title>fyne.ThemeSizeName</title>
      <link>https://darcybook.github.io/fyne/docs/api/themesizename/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/themesizename/</guid>
      <description>fyne.ThemeSizeName# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ThemeSizeName#type ThemeSizeName string ThemeSizeName is used to look up a size based on its name.
Since: 2.0</description>
    </item>
    
    <item>
      <title>fyne.ThemeVariant</title>
      <link>https://darcybook.github.io/fyne/docs/api/themevariant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/themevariant/</guid>
      <description>fyne.ThemeVariant# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type ThemeVariant#type ThemeVariant uint ThemeVariant indicates a variation of a theme, such as light or dark.
Since: 2.0</description>
    </item>
    
    <item>
      <title>fyne.URI</title>
      <link>https://darcybook.github.io/fyne/docs/api/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/uri/</guid>
      <description>fyne.URI# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type URI#type URI interface { 	fmt.Stringer  	// Extension should return the file extension of the resource 	// referenced by the URI. For example, the Extension() of 	// &amp;#39;file://foo/bar.baz&amp;#39; is &amp;#39;baz&amp;#39;. May return an empty string if the 	// referenced resource has none. 	Extension() string  	// Name should return the base name of the item referenced by the URI.</description>
    </item>
    
    <item>
      <title>fyne.URIReadCloser</title>
      <link>https://darcybook.github.io/fyne/docs/api/urireadcloser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/urireadcloser/</guid>
      <description>fyne.URIReadCloser# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type URIReadCloser#type URIReadCloser interface { 	io.ReadCloser  	URI() URI } URIReadCloser represents a cross platform data stream from a file or provider of data. It may refer to an item on a filesystem or data in another application that we have access to.</description>
    </item>
    
    <item>
      <title>fyne.URIWriteCloser</title>
      <link>https://darcybook.github.io/fyne/docs/api/uriwritecloser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/uriwritecloser/</guid>
      <description>fyne.URIWriteCloser# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type URIWriteCloser#type URIWriteCloser interface { 	io.WriteCloser  	URI() URI } URIWriteCloser represents a cross platform data writer for a file resource. This will normally refer to a local file resource.</description>
    </item>
    
    <item>
      <title>fyne.Validatable</title>
      <link>https://darcybook.github.io/fyne/docs/api/validatable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/validatable/</guid>
      <description>fyne.Validatable# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Validatable#type Validatable interface { 	Validate() error  	// SetOnValidationChanged is used to set the callback that will be triggered when the validation state changes. 	// The function might be overwritten by a parent that cares about child validation (e.g. widget.Form). 	SetOnValidationChanged(func(error)) } Validatable is an interface for specifying if a widget is validatable.</description>
    </item>
    
    <item>
      <title>fyne.Vector2</title>
      <link>https://darcybook.github.io/fyne/docs/api/vector2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/vector2/</guid>
      <description>fyne.Vector2# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Vector2#type Vector2 interface { 	Components() (float32, float32) 	IsZero() bool } Vector2 marks geometry types that can operate as a coordinate vector.</description>
    </item>
    
    <item>
      <title>fyne.Widget</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/</guid>
      <description>fyne.Widget# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Widget#type Widget interface { 	CanvasObject  	// CreateRenderer returns a new WidgetRenderer for this widget. 	// This should not be called by regular code, it is used internally to render a widget. 	CreateRenderer() WidgetRenderer } Widget defines the standard behaviours of any widget. This extends the CanvasObject - a widget behaves in the same basic way but will encapsulate many child objects to create the rendered widget.</description>
    </item>
    
    <item>
      <title>fyne.WidgetRenderer</title>
      <link>https://darcybook.github.io/fyne/docs/api/widgetrenderer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widgetrenderer/</guid>
      <description>fyne.WidgetRenderer# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type WidgetRenderer#type WidgetRenderer interface { 	// Destroy is for internal use. 	Destroy() 	// Layout is a hook that is called if the widget needs to be laid out. 	// This should never call Refresh. 	Layout(Size) 	// MinSize returns the minimum size of the widget that is rendered by this renderer. 	MinSize() Size 	// Objects returns all objects that should be drawn.</description>
    </item>
    
    <item>
      <title>fyne.Window</title>
      <link>https://darcybook.github.io/fyne/docs/api/window/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/window/</guid>
      <description>fyne.Window# import &amp;#34;fyne.io/fyne/v2&amp;#34; Usage#type Window#type Window interface { 	// Title returns the current window title. 	// This is typically displayed in the window decorations. 	Title() string 	// SetTitle updates the current title of the window. 	SetTitle(string)  	// FullScreen returns whether or not this window is currently full screen. 	FullScreen() bool 	// SetFullScreen changes the requested fullScreen property 	// true for a fullScreen window and false to unset this.</description>
    </item>
    
    <item>
      <title>layout</title>
      <link>https://darcybook.github.io/fyne/docs/api/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/layout/</guid>
      <description>layout# import &amp;#34;fyne.io/fyne/v2/layout&amp;#34; Package layout defines the various layouts available to Fyne apps
Usage#func NewAdaptiveGridLayout#func NewAdaptiveGridLayout(rowcols int) fyne.Layout NewAdaptiveGridLayout returns a new grid layout which uses columns when horizontal but rows when vertical.
func NewBorderLayout#func NewBorderLayout(top, bottom, left, right fyne.CanvasObject) fyne.Layout NewBorderLayout creates a new BorderLayout instance with top, bottom, left and right objects set. All other items in the container will fill the centre space</description>
    </item>
    
    <item>
      <title>layout.Spacer</title>
      <link>https://darcybook.github.io/fyne/docs/api/layout/spacer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/layout/spacer/</guid>
      <description>layout.Spacer# import &amp;#34;fyne.io/fyne/v2/layout&amp;#34; Usage#type Spacer#type Spacer struct { 	FixHorizontal bool 	FixVertical bool } Spacer is any simple object that can be used in a box layout to space out child objects
func (*Spacer) ExpandHorizontal#func (s *Spacer) ExpandHorizontal() bool ExpandHorizontal returns whether or not this spacer expands on the horizontal axis
func (*Spacer) ExpandVertical#func (s *Spacer) ExpandVertical() bool ExpandVertical returns whether or not this spacer expands on the vertical axis</description>
    </item>
    
    <item>
      <title>layout.SpacerObject</title>
      <link>https://darcybook.github.io/fyne/docs/api/layout/spacerobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/layout/spacerobject/</guid>
      <description>layout.SpacerObject# import &amp;#34;fyne.io/fyne/v2/layout&amp;#34; Usage#type SpacerObject#type SpacerObject interface { 	ExpandVertical() bool 	ExpandHorizontal() bool } SpacerObject is any object that can be used to space out child objects</description>
    </item>
    
    <item>
      <title>mobile</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/mobile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/mobile/</guid>
      <description>mobile# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Package mobile provides mobile specific driver functionality.
Usage#types# Device KeyboardType Keyboardable TouchEvent Touchable  </description>
    </item>
    
    <item>
      <title>mobile.Device</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/mobile/device/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/mobile/device/</guid>
      <description>mobile.Device# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Usage#type Device#type Device interface { 	// Request that the mobile device show the touch screen keyboard (standard layout) 	ShowVirtualKeyboard() 	// Request that the mobile device show the touch screen keyboard (custom layout) 	ShowVirtualKeyboardType(KeyboardType) 	// Request that the mobile device dismiss the touch screen keyboard 	HideVirtualKeyboard() } Device describes functionality only available on mobile</description>
    </item>
    
    <item>
      <title>mobile.Keyboardable</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/mobile/keyboardable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/mobile/keyboardable/</guid>
      <description>mobile.Keyboardable# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Usage#type Keyboardable#type Keyboardable interface { 	fyne.Focusable  	Keyboard() KeyboardType } Keyboardable describes any CanvasObject that needs a keyboard</description>
    </item>
    
    <item>
      <title>mobile.KeyboardType</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/mobile/keyboardtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/mobile/keyboardtype/</guid>
      <description>mobile.KeyboardType# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Usage#type KeyboardType#type KeyboardType int32 KeyboardType represents a type of virtual keyboard
const ( 	// DefaultKeyboard is the keyboard with default input style and &amp;#34;return&amp;#34; return key 	DefaultKeyboard KeyboardType = iota 	// SingleLineKeyboard is the keyboard with default input style and &amp;#34;Done&amp;#34; return key 	SingleLineKeyboard 	// NumberKeyboard is the keyboard with number input style and &amp;#34;Done&amp;#34; return key 	NumberKeyboard 	// PasswordKeyboard is used to ensure that text is not leaked to 3rd party keyboard providers 	PasswordKeyboard ) </description>
    </item>
    
    <item>
      <title>mobile.Touchable</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/mobile/touchable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/mobile/touchable/</guid>
      <description>mobile.Touchable# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Usage#type Touchable#type Touchable interface { 	TouchDown(*TouchEvent) 	TouchUp(*TouchEvent) 	TouchCancel(*TouchEvent) } Touchable represents mobile touch events that can be sent to CanvasObjects</description>
    </item>
    
    <item>
      <title>mobile.TouchEvent</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/mobile/touchevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/mobile/touchevent/</guid>
      <description>mobile.TouchEvent# import &amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34; Usage#type TouchEvent#type TouchEvent struct { 	fyne.PointEvent } TouchEvent contains data relating to mobile touch events</description>
    </item>
    
    <item>
      <title>repository.CopyableRepository&#34;</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/repository/copyablerepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/repository/copyablerepository/</guid>
      <description>repository.CopyableRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type CopyableRepository#type CopyableRepository interface { 	Repository  	// Copy will be used to implement calls to storage.Copy() for the 	// registered scheme of this repository. 	// 	// A generic implementation is provided by GenericCopy(). 	// 	// NOTE: the first parameter is the source, the second is the 	// destination. 	// 	// NOTE: if storage.</description>
    </item>
    
    <item>
      <title>repository.CustomURIRepository&#34;</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/repository/customurirepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/repository/customurirepository/</guid>
      <description>repository.CustomURIRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type CustomURIRepository#type CustomURIRepository interface { 	Repository  	// ParseURI will be used to implement calls to storage.ParseURI() 	// for the registered scheme of this repository. 	ParseURI(string) (fyne.URI, error) } CustomURIRepository is an extension of the repository interface which allows the behavior of storage.ParseURI to be overridden. This is only needed if you wish to generate custom URI types, rather than using Fyne&amp;rsquo;s URI implementation and net/url based parsing.</description>
    </item>
    
    <item>
      <title>repository.HierarchicalRepository&#34;</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/repository/hierarchicalrepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/repository/hierarchicalrepository/</guid>
      <description>repository.HierarchicalRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type HierarchicalRepository#type HierarchicalRepository interface { 	Repository  	// Parent will be used to implement calls to storage.Parent() for the 	// registered scheme of this repository. 	// 	// A generic implementation is provided in GenericParent(), which 	// is based on the RFC3986 definition of a URI parent. 	// 	// Since: 2.0 	Parent(fyne.</description>
    </item>
    
    <item>
      <title>repository.ListableRepository&#34;</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/repository/listablerepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/repository/listablerepository/</guid>
      <description>repository.ListableRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type ListableRepository#type ListableRepository interface { 	Repository  	// CanList will be used to implement calls to storage.Listable() for 	// the registered scheme of this repository. 	// 	// Since: 2.0 	CanList(u fyne.URI) (bool, error)  	// List will be used to implement calls to storage.List() for the 	// registered scheme of this repository.</description>
    </item>
    
    <item>
      <title>repository.MovableRepository&#34;</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/repository/movablerepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/repository/movablerepository/</guid>
      <description>repository.MovableRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type MovableRepository#type MovableRepository interface { 	Repository  	// Move will be used to implement calls to storage.Move() for the 	// registered scheme of this repository. 	// 	// A generic implementation is provided by GenericMove(). 	// 	// NOTE: the first parameter is the source, the second is the 	// destination. 	// 	// NOTE: if storage.</description>
    </item>
    
    <item>
      <title>repository.Repository&#34;</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/repository/repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/repository/repository/</guid>
      <description>repository.Repository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type Repository#type Repository interface {  	// Exists will be used to implement calls to storage.Exists() for the 	// registered scheme of this repository. 	// 	// Since: 2.0 	Exists(u fyne.URI) (bool, error)  	// Reader will be used to implement calls to storage.Reader() 	// for the registered scheme of this repository. 	// 	// Since: 2.</description>
    </item>
    
    <item>
      <title>repository.WritableRepository&#34;</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/repository/writablerepository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/repository/writablerepository/</guid>
      <description>repository.WritableRepository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#type WritableRepository#type WritableRepository interface { 	Repository  	// Writer will be used to implement calls to storage.WriterTo() for 	// the registered scheme of this repository. 	// 	// Since: 2.0 	Writer(u fyne.URI) (fyne.URIWriteCloser, error)  	// CanWrite will be used to implement calls to storage.CanWrite() for 	// the registered scheme of this repository.</description>
    </item>
    
    <item>
      <title>repository&#34;</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/repository/</guid>
      <description>repository# import &amp;#34;fyne.io/fyne/v2/storage/repository&amp;#34; Usage#var ( 	// ErrOperationNotSupported may be thrown by certain functions in the storage 	// or repository packages which operate on URIs if an operation is attempted 	// that is not supported for the scheme relevant to the URI, normally because 	// the underlying repository has either not implemented the relevant function, 	// or has explicitly returned this error.</description>
    </item>
    
    <item>
      <title>software</title>
      <link>https://darcybook.github.io/fyne/docs/api/driver/software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/driver/software/</guid>
      <description>software# import &amp;#34;fyne.io/fyne/v2/driver/software&amp;#34; Usage#func NewCanvas#func NewCanvas() test.WindowlessCanvas NewCanvas creates a new canvas in memory that can render without hardware support
func Render#func Render(obj fyne.CanvasObject, t fyne.Theme) image.Image Render takes a canvas object and renders it to a regular Go image using the provided Theme. The returned image will be set to the object&amp;rsquo;s minimum size. Use the theme.LightTheme() or theme.</description>
    </item>
    
    <item>
      <title>storage</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/</guid>
      <description>storage# import &amp;#34;fyne.io/fyne/v2/storage&amp;#34; Package storage provides storage access and management functionality.
Usage#var URIRootError = repository.ErrURIRoot URIRootError is a wrapper for repository.URIRootError
Deprecated - use repository.ErrURIRoot instead
func CanList#func CanList(u fyne.URI) (bool, error) CanList will determine if the URI is listable or not.
This method may fail in several ways:
 Different permissions or credentials are required to check if the   URI supports listing.</description>
    </item>
    
    <item>
      <title>storage.ExtensionFileFilter</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/extensionfilefilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/extensionfilefilter/</guid>
      <description>storage.ExtensionFileFilter# import &amp;#34;fyne.io/fyne/v2/storage&amp;#34; Usage#type ExtensionFileFilter#type ExtensionFileFilter struct { 	Extensions []string } ExtensionFileFilter represents a file filter based on the the ending of file names, for example &amp;ldquo;.txt&amp;rdquo; and &amp;ldquo;.png&amp;rdquo;.
func (*ExtensionFileFilter) Matches#func (e *ExtensionFileFilter) Matches(uri fyne.URI) bool Matches returns true if a file URI has one of the filtered extensions.</description>
    </item>
    
    <item>
      <title>storage.FileFilter</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/filefilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/filefilter/</guid>
      <description>storage.FileFilter# import &amp;#34;fyne.io/fyne/v2/storage&amp;#34; Usage#type FileFilter#type FileFilter interface { 	Matches(fyne.URI) bool } FileFilter is an interface that can be implemented to provide a filter to a file dialog.
func NewExtensionFileFilter#func NewExtensionFileFilter(extensions []string) FileFilter NewExtensionFileFilter takes a string slice of extensions with a leading . and creates a filter for the file dialog. Example: .jpg, .mp3, .txt, .sh
func NewMimeTypeFileFilter#func NewMimeTypeFileFilter(mimeTypes []string) FileFilter NewMimeTypeFileFilter takes a string slice of mimetypes, including globs, and creates a filter for the file dialog.</description>
    </item>
    
    <item>
      <title>storage.MimeTypeFileFilter</title>
      <link>https://darcybook.github.io/fyne/docs/api/storage/mimetypefilefilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/storage/mimetypefilefilter/</guid>
      <description>storage.MimeTypeFileFilter# import &amp;#34;fyne.io/fyne/v2/storage&amp;#34; Usage#type MimeTypeFileFilter#type MimeTypeFileFilter struct { 	MimeTypes []string } MimeTypeFileFilter represents a file filter based on the files mime type, for example &amp;ldquo;image/*&amp;rdquo;, &amp;ldquo;audio/mp3&amp;rdquo;.
func (*MimeTypeFileFilter) Matches#func (mt *MimeTypeFileFilter) Matches(uri fyne.URI) bool Matches returns true if a file URI has one of the filtered mimetypes.</description>
    </item>
    
    <item>
      <title>test</title>
      <link>https://darcybook.github.io/fyne/docs/api/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/test/</guid>
      <description>test# import &amp;#34;fyne.io/fyne/v2/test&amp;#34; Package test provides utility drivers for running UI tests without rendering
Usage#func ApplyTheme#func ApplyTheme(t *testing.T, theme fyne.Theme) ApplyTheme sets the given theme and waits for it to be applied to the current app.
func AssertCanvasTappableAt#func AssertCanvasTappableAt(t *testing.T, c fyne.Canvas, pos fyne.Position) bool AssertCanvasTappableAt asserts that the canvas is tappable at the given position.
func AssertImageMatches#func AssertImageMatches(t *testing.</description>
    </item>
    
    <item>
      <title>test.SoftwarePainter</title>
      <link>https://darcybook.github.io/fyne/docs/api/test/softwarepainter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/test/softwarepainter/</guid>
      <description>test.SoftwarePainter# import &amp;#34;fyne.io/fyne/v2/test&amp;#34; Usage#type SoftwarePainter#type SoftwarePainter interface { 	Paint(fyne.Canvas) image.Image } SoftwarePainter describes a simple type that can render canvases</description>
    </item>
    
    <item>
      <title>test.WindowlessCanvas</title>
      <link>https://darcybook.github.io/fyne/docs/api/test/windowlesscanvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/test/windowlesscanvas/</guid>
      <description>test.WindowlessCanvas# import &amp;#34;fyne.io/fyne/v2/test&amp;#34; Usage#type WindowlessCanvas#type WindowlessCanvas interface { 	fyne.Canvas  	Padded() bool 	Resize(fyne.Size) 	SetPadded(bool) 	SetScale(float32) } WindowlessCanvas provides functionality for a canvas to operate without a window
func NewCanvas#func NewCanvas() WindowlessCanvas NewCanvas returns a single use in-memory canvas used for testing
func NewCanvasWithPainter#func NewCanvasWithPainter(painter SoftwarePainter) WindowlessCanvas NewCanvasWithPainter allows creation of an in-memory canvas with a specific painter.</description>
    </item>
    
    <item>
      <title>theme</title>
      <link>https://darcybook.github.io/fyne/docs/api/theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/theme/</guid>
      <description>theme# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Package theme defines how a Fyne app should look when rendered
Usage#const ( 	// IconNameCancel is the name of theme lookup for cancel icon. 	// 	// Since: 2.0 	IconNameCancel fyne.ThemeIconName = &amp;#34;cancel&amp;#34;  	// IconNameConfirm is the name of theme lookup for confirm icon. 	// 	// Since: 2.0 	IconNameConfirm fyne.ThemeIconName = &amp;#34;confirm&amp;#34;  	// IconNameDelete is the name of theme lookup for delete icon.</description>
    </item>
    
    <item>
      <title>theme.DisabledResource</title>
      <link>https://darcybook.github.io/fyne/docs/api/theme/disabledresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/theme/disabledresource/</guid>
      <description>theme.DisabledResource# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Usage#type DisabledResource#type DisabledResource struct { } DisabledResource is a resource wrapper that will return an appropriate resource colorized by the current theme&amp;rsquo;s DisabledIconColor color.
func NewDisabledResource#func NewDisabledResource(res fyne.Resource) *DisabledResource NewDisabledResource creates a resource that adapts to the current theme&amp;rsquo;s DisabledIconColor setting.
func (*DisabledResource) Content#func (res *DisabledResource) Content() []byte Content returns the disabled style content of the correct resource for the current theme</description>
    </item>
    
    <item>
      <title>theme.ErrorThemedResource</title>
      <link>https://darcybook.github.io/fyne/docs/api/theme/errorthemedresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/theme/errorthemedresource/</guid>
      <description>theme.ErrorThemedResource# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Usage#type ErrorThemedResource#type ErrorThemedResource struct { } ErrorThemedResource is a resource wrapper that will return a version of the resource with the main color changed to indicate an error.
func NewErrorThemedResource#func NewErrorThemedResource(orig fyne.Resource) *ErrorThemedResource NewErrorThemedResource creates a resource that adapts to the error color for the current theme.
func (*ErrorThemedResource) Content#func (res *ErrorThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current background color.</description>
    </item>
    
    <item>
      <title>theme.InvertedThemedResource</title>
      <link>https://darcybook.github.io/fyne/docs/api/theme/invertedthemedresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/theme/invertedthemedresource/</guid>
      <description>theme.InvertedThemedResource# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Usage#type InvertedThemedResource#type InvertedThemedResource struct { } InvertedThemedResource is a resource wrapper that will return a version of the resource with the main color changed for use over highlighted elements.
func NewInvertedThemedResource#func NewInvertedThemedResource(orig fyne.Resource) *InvertedThemedResource NewInvertedThemedResource creates a resource that adapts to the current theme for use over highlighted elements.
func (*InvertedThemedResource) Content#func (res *InvertedThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current background color.</description>
    </item>
    
    <item>
      <title>theme.PrimaryThemedResource</title>
      <link>https://darcybook.github.io/fyne/docs/api/theme/primarythemedresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/theme/primarythemedresource/</guid>
      <description>theme.PrimaryThemedResource# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Usage#type PrimaryThemedResource#type PrimaryThemedResource struct { } PrimaryThemedResource is a resource wrapper that will return a version of the resource with the main color changed to the theme primary color.
func NewPrimaryThemedResource#func NewPrimaryThemedResource(orig fyne.Resource) *PrimaryThemedResource NewPrimaryThemedResource creates a resource that adapts to the primary color for the current theme.
func (*PrimaryThemedResource) Content#func (res *PrimaryThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current background color.</description>
    </item>
    
    <item>
      <title>theme.ThemedResource</title>
      <link>https://darcybook.github.io/fyne/docs/api/theme/themedresource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/theme/themedresource/</guid>
      <description>theme.ThemedResource# import &amp;#34;fyne.io/fyne/v2/theme&amp;#34; Usage#type ThemedResource#type ThemedResource struct { } ThemedResource is a resource wrapper that will return a version of the resource with the main color changed for the currently selected theme.
func NewThemedResource#func NewThemedResource(src fyne.Resource) *ThemedResource NewThemedResource creates a resource that adapts to the current theme setting.
func (*ThemedResource) Content#func (res *ThemedResource) Content() []byte Content returns the underlying content of the resource adapted to the current text color.</description>
    </item>
    
    <item>
      <title>Upgrading to v2.1</title>
      <link>https://darcybook.github.io/fyne/docs/api/upgrading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/upgrading/</guid>
      <description>The 2.1 release is fully backward compatible with 2.0.4 and earlier, so upgrading is as simple as updating the version of code you compile with. This is different depending on whether or not you use go modules.
Modules#If your project has a go.mod file then you can edit the require line to use version v2.1.0, or you can execute the following command inside the directory:
go get fyne.</description>
    </item>
    
    <item>
      <title>validation</title>
      <link>https://darcybook.github.io/fyne/docs/api/data/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/data/validation/</guid>
      <description>validation# import &amp;#34;fyne.io/fyne/v2/data/validation&amp;#34; Package validation provides validation for data inside widgets
Usage#func NewRegexp#func NewRegexp(regexpstr, reason string) fyne.StringValidator NewRegexp creates a new validator that uses regular expression parsing. The validator will return nil if valid, otherwise returns an error with a reason text.
Since: 1.4func NewTime#func NewTime(format string) fyne.StringValidator NewTime creates a new validator that verifies times using time.</description>
    </item>
    
    <item>
      <title>widget</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/</guid>
      <description>widget# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Package widget defines the UI widgets within the Fyne toolkit
Usage#var ( 	// RichTextStyleBlockquote represents a quote presented in an indented block. 	// 	// Since: 2.1 	RichTextStyleBlockquote = RichTextStyle{ 	ColorName: theme.ColorNameForeground, 	Inline: false, 	SizeName: theme.SizeNameText, 	TextStyle: fyne.TextStyle{Italic: true}, 	} 	// RichTextStyleCodeBlock represents a code blog segment. 	// 	// Since: 2.</description>
    </item>
    
    <item>
      <title>widget.Accordion</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/accordion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/accordion/</guid>
      <description>widget.Accordion# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Accordion#type Accordion struct { 	BaseWidget 	Items []*AccordionItem 	MultiOpen bool } Accordion displays a list of AccordionItems. Each item is represented by a button that reveals a detailed view when tapped.
func NewAccordion#func NewAccordion(items ...*AccordionItem) *Accordion NewAccordion creates a new accordion widget.
func (*Accordion) Append#func (a *Accordion) Append(item *AccordionItem) Append adds the given item to this Accordion.</description>
    </item>
    
    <item>
      <title>widget.AccordionItem</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/accordionitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/accordionitem/</guid>
      <description>widget.AccordionItem# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type AccordionItem#type AccordionItem struct { 	Title string 	Detail fyne.CanvasObject 	Open bool } AccordionItem represents a single item in an Accordion.
func NewAccordionItem#func NewAccordionItem(title string, detail fyne.CanvasObject) *AccordionItem NewAccordionItem creates a new item for an Accordion.</description>
    </item>
    
    <item>
      <title>widget.BaseWidget</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/basewidget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/basewidget/</guid>
      <description>widget.BaseWidget# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type BaseWidget#type BaseWidget struct { 	Hidden bool } BaseWidget provides a helper that handles basic widget behaviours.
func (*BaseWidget) ExtendBaseWidget#func (w *BaseWidget) ExtendBaseWidget(wid fyne.Widget) ExtendBaseWidget is used by an extending widget to make use of BaseWidget functionality.
func (*BaseWidget) Hide#func (w *BaseWidget) Hide() Hide this widget so it is no longer visible</description>
    </item>
    
    <item>
      <title>widget.Button</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/button/</guid>
      <description>widget.Button# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Button#type Button struct { 	DisableableWidget 	Text string 	Icon fyne.Resource 	// Specify how prominent the button should be, High will highlight the button and Low will remove some decoration. 	// 	// Since: 1.4 	Importance ButtonImportance 	Alignment ButtonAlign 	IconPlacement ButtonIconPlacement  	OnTapped func() `json:&amp;#34;-&amp;#34;` } Button widget has a text label and triggers an event func when clicked</description>
    </item>
    
    <item>
      <title>widget.ButtonAlign</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/buttonalign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/buttonalign/</guid>
      <description>widget.ButtonAlign# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ButtonAlign#type ButtonAlign int ButtonAlign represents the horizontal alignment of a button.
const ( 	// ButtonAlignCenter aligns the icon and the text centrally. 	ButtonAlignCenter ButtonAlign = iota 	// ButtonAlignLeading aligns the icon and the text with the leading edge. 	ButtonAlignLeading 	// ButtonAlignTrailing aligns the icon and the text with the trailing edge. 	ButtonAlignTrailing ) </description>
    </item>
    
    <item>
      <title>widget.ButtonIconPlacement</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/buttoniconplacement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/buttoniconplacement/</guid>
      <description>widget.ButtonIconPlacement# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ButtonIconPlacement#type ButtonIconPlacement int ButtonIconPlacement represents the ordering of icon &amp;amp; text within a button.
const ( 	// ButtonIconLeadingText aligns the icon on the leading edge of the text. 	ButtonIconLeadingText ButtonIconPlacement = iota 	// ButtonIconTrailingText aligns the icon on the trailing edge of the text. 	ButtonIconTrailingText ) </description>
    </item>
    
    <item>
      <title>widget.ButtonImportance</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/buttonimportance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/buttonimportance/</guid>
      <description>widget.ButtonImportance# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ButtonImportance#type ButtonImportance int ButtonImportance represents how prominent the button should appear
Since: 1.4const ( 	// MediumImportance applies a standard appearance. 	MediumImportance ButtonImportance = iota 	// HighImportance applies a prominent appearance. 	HighImportance 	// LowImportance applies a subtle appearance. 	LowImportance ) </description>
    </item>
    
    <item>
      <title>widget.ButtonStyle</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/buttonstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/buttonstyle/</guid>
      <description>widget.ButtonStyle# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ButtonStyle#type ButtonStyle int ButtonStyle determines the behaviour and rendering of a button.</description>
    </item>
    
    <item>
      <title>widget.Card</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/card/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/card/</guid>
      <description>widget.Card# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Card#type Card struct { 	BaseWidget 	Title, Subtitle string 	Image *canvas.Image 	Content fyne.CanvasObject } Card widget groups title, subtitle with content and a header image
Since: 1.4func NewCard#func NewCard(title, subtitle string, content fyne.CanvasObject) *Card NewCard creates a new card widget with the specified title, subtitle and content (all optional).</description>
    </item>
    
    <item>
      <title>widget.Check</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/check/</guid>
      <description>widget.Check# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Check#type Check struct { 	DisableableWidget 	Text string 	Checked bool  	OnChanged func(bool) `json:&amp;#34;-&amp;#34;` } Check widget has a text label and a checked (or unchecked) icon and triggers an event func when toggled
func NewCheck#func NewCheck(label string, changed func(bool)) *Check NewCheck creates a new check widget with the set label and change handler</description>
    </item>
    
    <item>
      <title>widget.CheckGroup</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/checkgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/checkgroup/</guid>
      <description>widget.CheckGroup# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type CheckGroup#type CheckGroup struct { 	DisableableWidget 	Horizontal bool 	Required bool 	OnChanged func([]string) `json:&amp;#34;-&amp;#34;` 	Options []string 	Selected []string } CheckGroup widget has a list of text labels and checkbox icons next to each. Changing the selection (any number can be selected) will trigger the changed func.
Since: 2.1func NewCheckGroup#func NewCheckGroup(options []string, changed func([]string)) *CheckGroup NewCheckGroup creates a new check group widget with the set options and change handler</description>
    </item>
    
    <item>
      <title>widget.CustomTextGridStyle</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/customtextgridstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/customtextgridstyle/</guid>
      <description>widget.CustomTextGridStyle# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type CustomTextGridStyle#type CustomTextGridStyle struct { 	FGColor, BGColor color.Color } CustomTextGridStyle is a utility type for those not wanting to define their own style types.
func (*CustomTextGridStyle) BackgroundColor#func (c *CustomTextGridStyle) BackgroundColor() color.Color BackgroundColor is the color a cell should use for the background.
func (*CustomTextGridStyle) TextColor#func (c *CustomTextGridStyle) TextColor() color.Color TextColor is the color a cell should use for the text.</description>
    </item>
    
    <item>
      <title>widget.DisableableWidget</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/disableablewidget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/disableablewidget/</guid>
      <description>widget.DisableableWidget# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type DisableableWidget#type DisableableWidget struct { 	BaseWidget } DisableableWidget describes an extension to BaseWidget which can be disabled. Disabled widgets should have a visually distinct style when disabled, normally using theme.DisabledButtonColor.
func (*DisableableWidget) Disable#func (w *DisableableWidget) Disable() Disable this widget so that it cannot be interacted with, updating any style appropriately.
func (*DisableableWidget) Disabled#func (w *DisableableWidget) Disabled() bool Disabled returns true if this widget is currently disabled or false if it can currently be interacted with.</description>
    </item>
    
    <item>
      <title>widget.Entry</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/entry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/entry/</guid>
      <description>widget.Entry# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Entry#type Entry struct { 	DisableableWidget  	Text string 	// Since: 2.0 	TextStyle fyne.TextStyle 	PlaceHolder string 	OnChanged func(string) `json:&amp;#34;-&amp;#34;` 	// Since: 2.0 	OnSubmitted func(string) `json:&amp;#34;-&amp;#34;` 	Password bool 	MultiLine bool 	Wrapping fyne.TextWrap  	// Set a validator that this entry will check against 	// Since: 1.4 	Validator fyne.</description>
    </item>
    
    <item>
      <title>widget.FileIcon</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/fileicon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/fileicon/</guid>
      <description>widget.FileIcon# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type FileIcon#type FileIcon struct { 	BaseWidget  	Selected bool 	URI fyne.URI } FileIcon is an adaption of widget.Icon for showing files and folders
Since: 1.4func NewFileIcon#func NewFileIcon(uri fyne.URI) *FileIcon NewFileIcon takes a filepath and creates an icon with an overlaid label using the detected mimetype and extension
Since: 1.4func (*FileIcon) CreateRenderer#func (i *FileIcon) CreateRenderer() fyne.</description>
    </item>
    
    <item>
      <title>widget.Form</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/form/</guid>
      <description>widget.Form# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Form#type Form struct { 	BaseWidget  	Items []*FormItem 	OnSubmit func() 	OnCancel func() 	SubmitText string 	CancelText string } Form widget is two column grid where each row has a label and a widget (usually an input). The last row of the grid will contain the appropriate form control buttons if any should be shown.</description>
    </item>
    
    <item>
      <title>widget.FormItem</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/formitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/formitem/</guid>
      <description>widget.FormItem# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type FormItem#type FormItem struct { 	Text string 	Widget fyne.CanvasObject  	// Since: 2.0 	HintText string } FormItem provides the details for a row in a form
func NewFormItem#func NewFormItem(text string, widget fyne.CanvasObject) *FormItem NewFormItem creates a new form item with the specified label text and input widget</description>
    </item>
    
    <item>
      <title>widget.Hyperlink</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/hyperlink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/hyperlink/</guid>
      <description>widget.Hyperlink# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Hyperlink#type Hyperlink struct { 	BaseWidget 	Text string 	URL *url.URL 	Alignment fyne.TextAlign // The alignment of the Text 	Wrapping fyne.TextWrap // The wrapping of the Text 	TextStyle fyne.TextStyle // The style of the hyperlink text } Hyperlink widget is a text component with appropriate padding and layout. When clicked, the default web browser should open with a URL</description>
    </item>
    
    <item>
      <title>widget.HyperlinkSegment</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/hyperlinksegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/hyperlinksegment/</guid>
      <description>widget.HyperlinkSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type HyperlinkSegment#type HyperlinkSegment struct { 	Alignment fyne.TextAlign 	Text string 	URL *url.URL } HyperlinkSegment represents a hyperlink within a rich text widget.
Since: 2.1func (*HyperlinkSegment) Inline#func (h *HyperlinkSegment) Inline() bool Inline returns true as hyperlinks are inside other elements.
func (*HyperlinkSegment) Select#func (h *HyperlinkSegment) Select(begin, end fyne.Position) Select tells the segment that the user is selecting the content between the two positions.</description>
    </item>
    
    <item>
      <title>widget.Icon</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/icon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/icon/</guid>
      <description>widget.Icon# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Icon#type Icon struct { 	BaseWidget  	Resource fyne.Resource // The resource for this icon } Icon widget is a basic image component that load&amp;rsquo;s its resource to match the theme.
func NewIcon#func NewIcon(res fyne.Resource) *Icon NewIcon returns a new icon widget that displays a themed icon resource
func (*Icon) CreateRenderer#func (i *Icon) CreateRenderer() fyne.</description>
    </item>
    
    <item>
      <title>widget.Label</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/label/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/label/</guid>
      <description>widget.Label# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Label#type Label struct { 	BaseWidget 	Text string 	Alignment fyne.TextAlign // The alignment of the Text 	Wrapping fyne.TextWrap // The wrapping of the Text 	TextStyle fyne.TextStyle // The style of the label text } Label widget is a label component with appropriate padding and layout.
func NewLabel#func NewLabel(text string) *Label NewLabel creates a new label widget with the set text content</description>
    </item>
    
    <item>
      <title>widget.List</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/list/</guid>
      <description>widget.List# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type List#type List struct { 	BaseWidget  	Length func() int 	CreateItem func() fyne.CanvasObject 	UpdateItem func(id ListItemID, item fyne.CanvasObject) 	OnSelected func(id ListItemID) 	OnUnselected func(id ListItemID) } List is a widget that pools list items for performance and lays the items out in a vertical direction inside of a scroller. List requires that all items are the same size.</description>
    </item>
    
    <item>
      <title>widget.ListItemID</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/listitemid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/listitemid/</guid>
      <description>widget.ListItemID# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ListItemID#type ListItemID = int ListItemID uniquely identifies an item within a list.</description>
    </item>
    
    <item>
      <title>widget.ListSegment</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/listsegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/listsegment/</guid>
      <description>widget.ListSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ListSegment#type ListSegment struct { 	Items []RichTextSegment 	Ordered bool } ListSegment includes an itemised list with the content set using the Items field.
Since: 2.1func (*ListSegment) Inline#func (l *ListSegment) Inline() bool Inline returns false as a list should be in a block.
func (*ListSegment) Segments#func (l *ListSegment) Segments() []RichTextSegment Segments returns the segments required to draw bullets before each item</description>
    </item>
    
    <item>
      <title>widget.Menu</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/menu/</guid>
      <description>widget.Menu# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Menu#type Menu struct { 	BaseWidget  	Items []fyne.CanvasObject 	OnDismiss func() } Menu is a widget for displaying a fyne.Menu.
func NewMenu#func NewMenu(menu *fyne.Menu) *Menu NewMenu creates a new Menu.
func (*Menu) ActivateLastSubmenu#func (m *Menu) ActivateLastSubmenu() bool ActivateLastSubmenu finds the last active menu item traversing through the open submenus and activates its submenu if any.</description>
    </item>
    
    <item>
      <title>widget.Orientation</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/orientation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/orientation/</guid>
      <description>widget.Orientation# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Orientation#type Orientation int Orientation controls the horizontal/vertical layout of a widget
const ( 	Horizontal Orientation = 0 	Vertical Orientation = 1 ) Orientation constants to control widget layout</description>
    </item>
    
    <item>
      <title>widget.ParagraphSegment</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/paragraphsegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/paragraphsegment/</guid>
      <description>widget.ParagraphSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ParagraphSegment#type ParagraphSegment struct { 	Texts []RichTextSegment } ParagraphSegment wraps a number of text elements in a paragraph. It is similar to using a list of text elements when the final style is RichTextStyleParagraph.
Since: 2.1func (*ParagraphSegment) Inline#func (p *ParagraphSegment) Inline() bool Inline returns false as a paragraph should be in a block.</description>
    </item>
    
    <item>
      <title>widget.PopUp</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/popup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/popup/</guid>
      <description>widget.PopUp# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type PopUp#type PopUp struct { 	BaseWidget  	Content fyne.CanvasObject 	Canvas fyne.Canvas } PopUp is a widget that can float above the user interface. It wraps any standard elements with padding and a shadow. If it is modal then the shadow will cover the entire canvas it hovers over and block interactions.
func NewModalPopUp#func NewModalPopUp(content fyne.</description>
    </item>
    
    <item>
      <title>widget.PopUpMenu</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/popupmenu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/popupmenu/</guid>
      <description>widget.PopUpMenu# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type PopUpMenu#type PopUpMenu struct { 	*Menu } PopUpMenu is a Menu which displays itself in an OverlayContainer.
func NewPopUpMenu#func NewPopUpMenu(menu *fyne.Menu, c fyne.Canvas) *PopUpMenu NewPopUpMenu creates a new, reusable popup menu. You can show it using ShowAtPosition.
Since: 2.0func (*PopUpMenu) FocusGained#func (p *PopUpMenu) FocusGained() FocusGained is triggered when the object gained focus.</description>
    </item>
    
    <item>
      <title>widget.ProgressBar</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/progressbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/progressbar/</guid>
      <description>widget.ProgressBar# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ProgressBar#type ProgressBar struct { 	BaseWidget  	Min, Max, Value float64  	// TextFormatter can be used to have a custom format of progress text. 	// If set, it overrides the percentage readout and runs each time the value updates. 	// 	// Since: 1.4 	TextFormatter func() string } ProgressBar widget creates a horizontal panel that indicates progress</description>
    </item>
    
    <item>
      <title>widget.ProgressBarInfinite</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/progressbarinfinite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/progressbarinfinite/</guid>
      <description>widget.ProgressBarInfinite# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ProgressBarInfinite#type ProgressBarInfinite struct { 	BaseWidget } ProgressBarInfinite widget creates a horizontal panel that indicates waiting indefinitely An infinite progress bar loops 0% -&amp;gt; 100% repeatedly until Stop() is called
func NewProgressBarInfinite#func NewProgressBarInfinite() *ProgressBarInfinite NewProgressBarInfinite creates a new progress bar widget that loops indefinitely from 0% -&amp;gt; 100% SetValue() is not defined for infinite progress bar To stop the looping progress and set the progress bar to 100%, call ProgressBarInfinite.</description>
    </item>
    
    <item>
      <title>widget.RadioGroup</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/radiogroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/radiogroup/</guid>
      <description>widget.RadioGroup# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type RadioGroup#type RadioGroup struct { 	DisableableWidget 	Horizontal bool 	Required bool 	OnChanged func(string) `json:&amp;#34;-&amp;#34;` 	Options []string 	Selected string } RadioGroup widget has a list of text labels and checks check icons next to each. Changing the selection (only one can be selected) will trigger the changed func.
Since: 1.4func NewRadioGroup#func NewRadioGroup(options []string, changed func(string)) *RadioGroup NewRadioGroup creates a new radio group widget with the set options and change handler</description>
    </item>
    
    <item>
      <title>widget.RichText</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/richtext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/richtext/</guid>
      <description>widget.RichText# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type RichText#type RichText struct { 	BaseWidget 	Segments []RichTextSegment 	Wrapping fyne.TextWrap 	Scroll widget.ScrollDirection } RichText represents the base element for a rich text-based widget.
Since: 2.1func NewRichText#func NewRichText(segments ...RichTextSegment) *RichText NewRichText returns a new RichText widget that renders the given text and segments. If no segments are specified it will be converted to a single segment using the default text settings.</description>
    </item>
    
    <item>
      <title>widget.RichTextBlock</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/richtextblock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/richtextblock/</guid>
      <description>widget.RichTextBlock# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type RichTextBlock#type RichTextBlock interface { 	Segments() []RichTextSegment } RichTextBlock is an extension of a text segment that contains other segments
Since: 2.1</description>
    </item>
    
    <item>
      <title>widget.RichTextSegment</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/richtextsegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/richtextsegment/</guid>
      <description>widget.RichTextSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type RichTextSegment#type RichTextSegment interface { 	Inline() bool 	Textual() string 	Update(fyne.CanvasObject) 	Visual() fyne.CanvasObject  	Select(pos1, pos2 fyne.Position) 	SelectedText() string 	Unselect() } RichTextSegment describes any element that can be rendered in a RichText widget.
Since: 2.1</description>
    </item>
    
    <item>
      <title>widget.RichTextStyle</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/richtextstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/richtextstyle/</guid>
      <description>widget.RichTextStyle# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type RichTextStyle#type RichTextStyle struct { 	Alignment fyne.TextAlign 	ColorName fyne.ThemeColorName 	Inline bool 	SizeName fyne.ThemeSizeName 	TextStyle fyne.TextStyle } RichTextStyle describes the details of a text object inside a RichText widget.
Since: 2.1</description>
    </item>
    
    <item>
      <title>widget.Select</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/select/</guid>
      <description>widget.Select# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Select#type Select struct { 	DisableableWidget  	// Alignment sets the text alignment of the select and its list of options. 	// 	// Since: 2.1 	Alignment fyne.TextAlign 	Selected string 	Options []string 	PlaceHolder string 	OnChanged func(string) `json:&amp;#34;-&amp;#34;` } Select widget has a list of options, with the current one shown, and triggers an event func when clicked</description>
    </item>
    
    <item>
      <title>widget.SelectEntry</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/selectentry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/selectentry/</guid>
      <description>widget.SelectEntry# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type SelectEntry#type SelectEntry struct { 	Entry } SelectEntry is an input field which supports selecting from a fixed set of options.
func NewSelectEntry#func NewSelectEntry(options []string) *SelectEntry NewSelectEntry creates a SelectEntry.
func (*SelectEntry) CreateRenderer#func (e *SelectEntry) CreateRenderer() fyne.WidgetRenderer CreateRenderer returns a new renderer for this select entry.
Implements: fyne.Widgetfunc (*SelectEntry) Disable#func (e *SelectEntry) Disable() Disable this widget so that it cannot be interacted with, updating any style appropriately.</description>
    </item>
    
    <item>
      <title>widget.Separator</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/separator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/separator/</guid>
      <description>widget.Separator# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Separator#type Separator struct { 	BaseWidget } Separator is a widget for displaying a separator with themeable color.
Since: 1.4func NewSeparator#func NewSeparator() *Separator NewSeparator creates a new separator.
Since: 1.4func (*Separator) CreateRenderer#func (s *Separator) CreateRenderer() fyne.WidgetRenderer CreateRenderer returns a new renderer for the separator.
Implements: fyne.Widgetfunc (*Separator) MinSize#func (s *Separator) MinSize() fyne.</description>
    </item>
    
    <item>
      <title>widget.SeparatorSegment</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/separatorsegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/separatorsegment/</guid>
      <description>widget.SeparatorSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type SeparatorSegment#type SeparatorSegment struct { } SeparatorSegment includes a horizontal separator in a rich text widget.
Since: 2.1func (*SeparatorSegment) Inline#func (s *SeparatorSegment) Inline() bool Inline returns false as a separator should be full width.
func (*SeparatorSegment) Select#func (s *SeparatorSegment) Select(_, _ fyne.Position) Select does nothing for a separator.
func (*SeparatorSegment) SelectedText#func (s *SeparatorSegment) SelectedText() string SelectedText returns the empty string for this separator.</description>
    </item>
    
    <item>
      <title>widget.Slider</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/slider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/slider/</guid>
      <description>widget.Slider# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Slider#type Slider struct { 	BaseWidget  	Value float64 	Min float64 	Max float64 	Step float64  	Orientation Orientation 	OnChanged func(float64) } Slider is a widget that can slide between two fixed values.
func NewSlider#func NewSlider(min, max float64) *Slider NewSlider returns a basic slider.
func NewSliderWithData#func NewSliderWithData(min, max float64, data binding.</description>
    </item>
    
    <item>
      <title>widget.Table</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/table/</guid>
      <description>widget.Table# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Table#type Table struct { 	BaseWidget  	Length func() (int, int) 	CreateCell func() fyne.CanvasObject 	UpdateCell func(id TableCellID, template fyne.CanvasObject) 	OnSelected func(id TableCellID) 	OnUnselected func(id TableCellID) } Table widget is a grid of items that can be scrolled and a cell selected. It&amp;rsquo;s performance is provided by caching cell templates created with CreateCell and re-using them with UpdateCell.</description>
    </item>
    
    <item>
      <title>widget.TableCellID</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/tablecellid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/tablecellid/</guid>
      <description>widget.TableCellID# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TableCellID#type TableCellID struct { 	Row int 	Col int } TableCellID is a type that represents a cell&amp;rsquo;s position in a table based on it&amp;rsquo;s row and column location.</description>
    </item>
    
    <item>
      <title>widget.TextGrid</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/textgrid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/textgrid/</guid>
      <description>widget.TextGrid# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TextGrid#type TextGrid struct { 	BaseWidget 	Rows []TextGridRow  	ShowLineNumbers bool 	ShowWhitespace bool 	TabWidth int // If set to 0 the fyne.DefaultTabWidth is used } TextGrid is a monospaced grid of characters. This is designed to be used by a text editor, code preview or terminal emulator.
func NewTextGrid#func NewTextGrid() *TextGrid NewTextGrid creates a new empty TextGrid widget.</description>
    </item>
    
    <item>
      <title>widget.TextGridCell</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/textgridcell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/textgridcell/</guid>
      <description>widget.TextGridCell# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TextGridCell#type TextGridCell struct { 	Rune rune 	Style TextGridStyle } TextGridCell represents a single cell in a text grid. It has a rune for the text content and a style associated with it.</description>
    </item>
    
    <item>
      <title>widget.TextGridRow</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/textgridrow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/textgridrow/</guid>
      <description>widget.TextGridRow# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TextGridRow#type TextGridRow struct { 	Cells []TextGridCell 	Style TextGridStyle } TextGridRow represents a row of cells cell in a text grid. It contains the cells for the row and an optional style.</description>
    </item>
    
    <item>
      <title>widget.TextGridStyle</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/textgridstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/textgridstyle/</guid>
      <description>widget.TextGridStyle# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TextGridStyle#type TextGridStyle interface { 	TextColor() color.Color 	BackgroundColor() color.Color } TextGridStyle defines a style that can be applied to a TextGrid cell.
var ( 	// TextGridStyleDefault is a default style for test grid cells 	TextGridStyleDefault TextGridStyle 	// TextGridStyleWhitespace is the style used for whitespace characters, if enabled 	TextGridStyleWhitespace TextGridStyle ) </description>
    </item>
    
    <item>
      <title>widget.TextSegment</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/textsegment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/textsegment/</guid>
      <description>widget.TextSegment# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TextSegment#type TextSegment struct { 	Style RichTextStyle 	Text string } TextSegment represents the styling for a segment of rich text.
Since: 2.1func (*TextSegment) Inline#func (t *TextSegment) Inline() bool Inline should return true if this text can be included within other elements, or false if it creates a new block.
func (*TextSegment) Select#func (t *TextSegment) Select(begin, end fyne.</description>
    </item>
    
    <item>
      <title>widget.Toolbar</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/toolbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/toolbar/</guid>
      <description>widget.Toolbar# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Toolbar#type Toolbar struct { 	BaseWidget 	Items []ToolbarItem } Toolbar widget creates a horizontal list of tool buttons
func NewToolbar#func NewToolbar(items ...ToolbarItem) *Toolbar NewToolbar creates a new toolbar widget.
func (*Toolbar) Append#func (t *Toolbar) Append(item ToolbarItem) Append a new ToolbarItem to the end of this Toolbar
func (*Toolbar) CreateRenderer#func (t *Toolbar) CreateRenderer() fyne.</description>
    </item>
    
    <item>
      <title>widget.ToolbarAction</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/toolbaraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/toolbaraction/</guid>
      <description>widget.ToolbarAction# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ToolbarAction#type ToolbarAction struct { 	Icon fyne.Resource 	OnActivated func() `json:&amp;#34;-&amp;#34;` } ToolbarAction is push button style of ToolbarItem
func (*ToolbarAction) ToolbarObject#func (t *ToolbarAction) ToolbarObject() fyne.CanvasObject ToolbarObject gets a button to render this ToolbarAction</description>
    </item>
    
    <item>
      <title>widget.ToolbarItem</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/toolbaritem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/toolbaritem/</guid>
      <description>widget.ToolbarItem# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ToolbarItem#type ToolbarItem interface { 	ToolbarObject() fyne.CanvasObject } ToolbarItem represents any interface element that can be added to a toolbar
func NewToolbarAction#func NewToolbarAction(icon fyne.Resource, onActivated func()) ToolbarItem NewToolbarAction returns a new push button style ToolbarItem
func NewToolbarSeparator#func NewToolbarSeparator() ToolbarItem NewToolbarSeparator returns a new separator item for a Toolbar to assist with ToolbarItem grouping</description>
    </item>
    
    <item>
      <title>widget.ToolbarSeparator</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/toolbarseparator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/toolbarseparator/</guid>
      <description>widget.ToolbarSeparator# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ToolbarSeparator#type ToolbarSeparator struct { } ToolbarSeparator is a thin, visible divide that can be added to a Toolbar. This is typically used to assist visual grouping of ToolbarItems.
func (*ToolbarSeparator) ToolbarObject#func (t *ToolbarSeparator) ToolbarObject() fyne.CanvasObject ToolbarObject gets the visible line object for this ToolbarSeparator</description>
    </item>
    
    <item>
      <title>widget.ToolbarSpacer</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/toolbarspacer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/toolbarspacer/</guid>
      <description>widget.ToolbarSpacer# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type ToolbarSpacer#type ToolbarSpacer struct { } ToolbarSpacer is a blank, stretchable space for a toolbar. This is typically used to assist layout if you wish some left and some right aligned items. Space will be split evebly amongst all the spacers on a toolbar.
func (*ToolbarSpacer) ToolbarObject#func (t *ToolbarSpacer) ToolbarObject() fyne.CanvasObject ToolbarObject gets the actual spacer object for this ToolbarSpacer</description>
    </item>
    
    <item>
      <title>widget.Tree</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/tree/</guid>
      <description>widget.Tree# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type Tree#type Tree struct { 	BaseWidget 	Root TreeNodeID  	ChildUIDs func(uid TreeNodeID) (c []TreeNodeID) // Return a sorted slice of Children TreeNodeIDs for the given Node TreeNodeID 	CreateNode func(branch bool) (o fyne.CanvasObject) // Return a CanvasObject that can represent a Branch (if branch is true), or a Leaf (if branch is false) 	IsBranch func(uid TreeNodeID) (ok bool) // Return true if the given TreeNodeID represents a Branch 	OnBranchClosed func(uid TreeNodeID) // Called when a Branch is closed 	OnBranchOpened func(uid TreeNodeID) // Called when a Branch is opened 	OnSelected func(uid TreeNodeID) // Called when the Node with the given TreeNodeID is selected.</description>
    </item>
    
    <item>
      <title>widget.TreeNodeID</title>
      <link>https://darcybook.github.io/fyne/docs/api/widget/treenodeid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/api/widget/treenodeid/</guid>
      <description>widget.TreeNodeID# import &amp;#34;fyne.io/fyne/v2/widget&amp;#34; Usage#type TreeNodeID#type TreeNodeID = string TreeNodeID represents the unique id of a tree node.</description>
    </item>
    
  </channel>
</rss>
