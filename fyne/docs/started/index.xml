<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting Started on Hugo Book</title>
    <link>https://darcybook.github.io/fyne/docs/started/</link>
    <description>Recent content in Getting Started on Hugo Book</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://darcybook.github.io/fyne/docs/started/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://darcybook.github.io/fyne/docs/started/introduction/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/introduction/</guid>
      <description>Getting Started#Using the Fyne toolkit to build cross platform applications is very simple but does require some tools to be installed before you can begin. If your computer is set up for development with Go then the following steps may not be required, but we advise reading the tips for your operating system just in case. If later steps in this tutorial fail then you should re-visit the prerequisites below.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://darcybook.github.io/fyne/docs/started/helloword/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/helloword/</guid>
      <description>Create your first Fyne app# Having completed the steps in the getting started document you&amp;rsquo;re ready to build your first app. To illustrate the process we will build a simple hello world application.
A simple app starts by creating an app instance with app.New() and then opening a window with app.NewWindow(). Then a widget tree is defined that is set as the main content with SetContent() on a window.</description>
    </item>
    
    <item>
      <title>Application and RunLoop</title>
      <link>https://darcybook.github.io/fyne/docs/started/apprun/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/apprun/</guid>
      <description>For a GUI application to work it needs to run an event loop (sometimes called a runloop) that processes user interactions and drawing events. In Fyne this is started using the App.Run() or Window.ShowAndRun() functions. One of these must be called from the end of your setup code in the main() function.
An application should only have one runloop and so you should only call Run() once in your code. Calling it a second time will cause errors.</description>
    </item>
    
    <item>
      <title>Updating Content</title>
      <link>https://darcybook.github.io/fyne/docs/started/updating/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/updating/</guid>
      <description>Having completed the hello world tutorial or other examples you will have created a basic user interface. In this page we see how the content of a GUI can be updated from your code.
The first step is to assign the widget you want to update to a variable. In the hello world tutorial we passed widget.NewLabel directly into SetContent(), to update it we change that to two different lines, such as:</description>
    </item>
    
    <item>
      <title>Window Handling</title>
      <link>https://darcybook.github.io/fyne/docs/started/windows/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/windows/</guid>
      <description>Windows are created using App.NewWindow() and need to be shown using the Show() function. The helper method ShowAndRun() on fyne.Window allows you to show your window and run the application at the same time.
By default a window will be the right size to show its content by checking the MinSize() function (more on that in later examples). You can set a larger size by calling the Window.Resize() method. Into this is passed a fyne.</description>
    </item>
    
    <item>
      <title>Testing Graphical Apps</title>
      <link>https://darcybook.github.io/fyne/docs/started/testing/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/testing/</guid>
      <description>Part of a good test suite is being able to quickly write tests and run them on a regular basis. Fyne&amp;rsquo;s API is designed to make testing applications easy. By separating component logic from it&amp;rsquo;s rendering definition we can load applications without actually displaying them and test the functionality completely.
Example#We can demonstrate unit testing by extending our Hello World app to include space for users to input their name to be greeted.</description>
    </item>
    
    <item>
      <title>Packaging for Desktop</title>
      <link>https://darcybook.github.io/fyne/docs/started/packaging/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/packaging/</guid>
      <description>Packaging a graphical app for distribution can be complex. Graphical applications typically have icons and metadata associated with them as well as specific formats required to integrate with each environment. Windows executables need embedded icons, macOS apps are bundles and with Linux there are various metadata files that should get installed. What a hassle!
Thankfully the &amp;ldquo;fyne&amp;rdquo; app has a &amp;ldquo;package&amp;rdquo; command that can handle this automatically. Just specifying the target OS and any required metadata (such as icon) will generate the appropriate package.</description>
    </item>
    
    <item>
      <title>Packaging Mobile Apps</title>
      <link>https://darcybook.github.io/fyne/docs/started/mobile/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/mobile/</guid>
      <description>Your Fyne app code will work out of the box as mobile apps, just as it did for desktop. However it is a little more complex to package the code for distribution. This page will explore the process to do just that to get your app on iOS and Android.
Firstly you will need some more development tools installed for mobile packaging to complete. For Android builds you must have the Android SDK and NDK installed with appropriate environment set up so that the tools (such as adb) can be found on the command line.</description>
    </item>
    
    <item>
      <title>Distributing to App Stores</title>
      <link>https://darcybook.github.io/fyne/docs/started/distribution/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/distribution/</guid>
      <description>Packaging a graphical app as described in the Packaging page provides a file or bundle that could be directly shared or distributed. However signing and uploading to app stores and market places is an additional step that requires platform-specific configuration, which we will cover in this page.
In each of these steps we will use a new tool that is part of the fyne command line utilities. The fyne release step handles the signing and preparation for each store, but the parameters vary per-platform, which we see below.</description>
    </item>
    
    <item>
      <title>App Metadata</title>
      <link>https://darcybook.github.io/fyne/docs/started/metadata/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/metadata/</guid>
      <description>App Metadata#Since release v2.1.0 of the fyne command we support a metadata file that allows you to store information about your application in the repository. This file is optional, but can help to avoid having to remember specific build parameters for each package and release command.
The file should be named FyneApp.toml in the directory where you run the fyne command (this is normally the main package). The contents of the file are as follows:</description>
    </item>
    
    <item>
      <title>Cross Compiling</title>
      <link>https://darcybook.github.io/fyne/docs/started/cross-compiling/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darcybook.github.io/fyne/docs/started/cross-compiling/</guid>
      <description>Compiling for different platforms# Cross compiling with Go is designed to be simple - we just set the environment variable GOOS for the target Operating System (and GOARCH if targeting a different architecture). Unfortunately when using native graphics calls the use of CGo in Fyne makes this a little harder.
Compiling from a development computer#To cross-compile a Fyne application you will also have to set CGO_ENABLED=1 which tells go to enable the C compiler (this is normally turned off when the target platform is different to the current system).</description>
    </item>
    
  </channel>
</rss>
